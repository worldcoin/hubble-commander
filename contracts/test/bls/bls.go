// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package bls

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TestBLSMetaData contains all meta data concerning the TestBLS contract.
var TestBLSMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"expandMsg\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"hashToField\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"hashToPoint\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"hashToPointGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"isOnCurveG1\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"point\",\"type\":\"uint256[2]\"}],\"name\":\"isOnCurveG1GasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"point\",\"type\":\"uint256[4]\"}],\"name\":\"isOnCurveG2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"point\",\"type\":\"uint256[4]\"}],\"name\":\"isOnCurveG2GasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"e\",\"type\":\"uint256\"}],\"name\":\"mapToPoint\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"p\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"messages\",\"type\":\"uint256[2][]\"}],\"name\":\"verifyMultiple\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"messages\",\"type\":\"uint256[2][]\"}],\"name\":\"verifyMultipleGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"message\",\"type\":\"uint256[2]\"}],\"name\":\"verifySingle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"message\",\"type\":\"uint256[2]\"}],\"name\":\"verifySingleGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// TestBLSABI is the input ABI used to generate the binding from.
// Deprecated: Use TestBLSMetaData.ABI instead.
var TestBLSABI = TestBLSMetaData.ABI

// TestBLSBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TestBLSMetaData.Bin instead.
var TestBLSBin = TestBLSMetaData.Bin

// DeployTestBLS deploys a new Ethereum contract, binding an instance of TestBLS to it.
func DeployTestBLS(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TestBLS, error) {
	parsed, err := TestBLSMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TestBLSBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TestBLS{TestBLSCaller: TestBLSCaller{contract: contract}, TestBLSTransactor: TestBLSTransactor{contract: contract}, TestBLSFilterer: TestBLSFilterer{contract: contract}}, nil
}

// TestBLS is an auto generated Go binding around an Ethereum contract.
type TestBLS struct {
	TestBLSCaller     // Read-only binding to the contract
	TestBLSTransactor // Write-only binding to the contract
	TestBLSFilterer   // Log filterer for contract events
}

// TestBLSCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestBLSCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBLSTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestBLSTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBLSFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestBLSFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestBLSSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestBLSSession struct {
	Contract     *TestBLS          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestBLSCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestBLSCallerSession struct {
	Contract *TestBLSCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// TestBLSTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestBLSTransactorSession struct {
	Contract     *TestBLSTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// TestBLSRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestBLSRaw struct {
	Contract *TestBLS // Generic contract binding to access the raw methods on
}

// TestBLSCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestBLSCallerRaw struct {
	Contract *TestBLSCaller // Generic read-only contract binding to access the raw methods on
}

// TestBLSTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestBLSTransactorRaw struct {
	Contract *TestBLSTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestBLS creates a new instance of TestBLS, bound to a specific deployed contract.
func NewTestBLS(address common.Address, backend bind.ContractBackend) (*TestBLS, error) {
	contract, err := bindTestBLS(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TestBLS{TestBLSCaller: TestBLSCaller{contract: contract}, TestBLSTransactor: TestBLSTransactor{contract: contract}, TestBLSFilterer: TestBLSFilterer{contract: contract}}, nil
}

// NewTestBLSCaller creates a new read-only instance of TestBLS, bound to a specific deployed contract.
func NewTestBLSCaller(address common.Address, caller bind.ContractCaller) (*TestBLSCaller, error) {
	contract, err := bindTestBLS(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestBLSCaller{contract: contract}, nil
}

// NewTestBLSTransactor creates a new write-only instance of TestBLS, bound to a specific deployed contract.
func NewTestBLSTransactor(address common.Address, transactor bind.ContractTransactor) (*TestBLSTransactor, error) {
	contract, err := bindTestBLS(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestBLSTransactor{contract: contract}, nil
}

// NewTestBLSFilterer creates a new log filterer instance of TestBLS, bound to a specific deployed contract.
func NewTestBLSFilterer(address common.Address, filterer bind.ContractFilterer) (*TestBLSFilterer, error) {
	contract, err := bindTestBLS(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestBLSFilterer{contract: contract}, nil
}

// bindTestBLS binds a generic wrapper to an already deployed contract.
func bindTestBLS(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestBLSABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBLS *TestBLSRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBLS.Contract.TestBLSCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBLS *TestBLSRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBLS.Contract.TestBLSTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBLS *TestBLSRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBLS.Contract.TestBLSTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TestBLS *TestBLSCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TestBLS.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TestBLS *TestBLSTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TestBLS.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TestBLS *TestBLSTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TestBLS.Contract.contract.Transact(opts, method, params...)
}

// ExpandMsg is a free data retrieval call binding the contract method 0x0b598e2a.
//
// Solidity: function expandMsg(bytes32 domain, bytes message) pure returns(bytes)
func (_TestBLS *TestBLSCaller) ExpandMsg(opts *bind.CallOpts, domain [32]byte, message []byte) ([]byte, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "expandMsg", domain, message)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// ExpandMsg is a free data retrieval call binding the contract method 0x0b598e2a.
//
// Solidity: function expandMsg(bytes32 domain, bytes message) pure returns(bytes)
func (_TestBLS *TestBLSSession) ExpandMsg(domain [32]byte, message []byte) ([]byte, error) {
	return _TestBLS.Contract.ExpandMsg(&_TestBLS.CallOpts, domain, message)
}

// ExpandMsg is a free data retrieval call binding the contract method 0x0b598e2a.
//
// Solidity: function expandMsg(bytes32 domain, bytes message) pure returns(bytes)
func (_TestBLS *TestBLSCallerSession) ExpandMsg(domain [32]byte, message []byte) ([]byte, error) {
	return _TestBLS.Contract.ExpandMsg(&_TestBLS.CallOpts, domain, message)
}

// HashToField is a free data retrieval call binding the contract method 0x8669026f.
//
// Solidity: function hashToField(bytes32 domain, bytes message) pure returns(uint256[2])
func (_TestBLS *TestBLSCaller) HashToField(opts *bind.CallOpts, domain [32]byte, message []byte) ([2]*big.Int, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "hashToField", domain, message)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// HashToField is a free data retrieval call binding the contract method 0x8669026f.
//
// Solidity: function hashToField(bytes32 domain, bytes message) pure returns(uint256[2])
func (_TestBLS *TestBLSSession) HashToField(domain [32]byte, message []byte) ([2]*big.Int, error) {
	return _TestBLS.Contract.HashToField(&_TestBLS.CallOpts, domain, message)
}

// HashToField is a free data retrieval call binding the contract method 0x8669026f.
//
// Solidity: function hashToField(bytes32 domain, bytes message) pure returns(uint256[2])
func (_TestBLS *TestBLSCallerSession) HashToField(domain [32]byte, message []byte) ([2]*big.Int, error) {
	return _TestBLS.Contract.HashToField(&_TestBLS.CallOpts, domain, message)
}

// HashToPoint is a free data retrieval call binding the contract method 0xa850a909.
//
// Solidity: function hashToPoint(bytes32 domain, bytes message) view returns(uint256[2] p)
func (_TestBLS *TestBLSCaller) HashToPoint(opts *bind.CallOpts, domain [32]byte, message []byte) ([2]*big.Int, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "hashToPoint", domain, message)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// HashToPoint is a free data retrieval call binding the contract method 0xa850a909.
//
// Solidity: function hashToPoint(bytes32 domain, bytes message) view returns(uint256[2] p)
func (_TestBLS *TestBLSSession) HashToPoint(domain [32]byte, message []byte) ([2]*big.Int, error) {
	return _TestBLS.Contract.HashToPoint(&_TestBLS.CallOpts, domain, message)
}

// HashToPoint is a free data retrieval call binding the contract method 0xa850a909.
//
// Solidity: function hashToPoint(bytes32 domain, bytes message) view returns(uint256[2] p)
func (_TestBLS *TestBLSCallerSession) HashToPoint(domain [32]byte, message []byte) ([2]*big.Int, error) {
	return _TestBLS.Contract.HashToPoint(&_TestBLS.CallOpts, domain, message)
}

// IsOnCurveG1 is a free data retrieval call binding the contract method 0xe242cce9.
//
// Solidity: function isOnCurveG1(uint256[2] point) pure returns(bool)
func (_TestBLS *TestBLSCaller) IsOnCurveG1(opts *bind.CallOpts, point [2]*big.Int) (bool, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "isOnCurveG1", point)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOnCurveG1 is a free data retrieval call binding the contract method 0xe242cce9.
//
// Solidity: function isOnCurveG1(uint256[2] point) pure returns(bool)
func (_TestBLS *TestBLSSession) IsOnCurveG1(point [2]*big.Int) (bool, error) {
	return _TestBLS.Contract.IsOnCurveG1(&_TestBLS.CallOpts, point)
}

// IsOnCurveG1 is a free data retrieval call binding the contract method 0xe242cce9.
//
// Solidity: function isOnCurveG1(uint256[2] point) pure returns(bool)
func (_TestBLS *TestBLSCallerSession) IsOnCurveG1(point [2]*big.Int) (bool, error) {
	return _TestBLS.Contract.IsOnCurveG1(&_TestBLS.CallOpts, point)
}

// IsOnCurveG2 is a free data retrieval call binding the contract method 0x115000fe.
//
// Solidity: function isOnCurveG2(uint256[4] point) pure returns(bool)
func (_TestBLS *TestBLSCaller) IsOnCurveG2(opts *bind.CallOpts, point [4]*big.Int) (bool, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "isOnCurveG2", point)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOnCurveG2 is a free data retrieval call binding the contract method 0x115000fe.
//
// Solidity: function isOnCurveG2(uint256[4] point) pure returns(bool)
func (_TestBLS *TestBLSSession) IsOnCurveG2(point [4]*big.Int) (bool, error) {
	return _TestBLS.Contract.IsOnCurveG2(&_TestBLS.CallOpts, point)
}

// IsOnCurveG2 is a free data retrieval call binding the contract method 0x115000fe.
//
// Solidity: function isOnCurveG2(uint256[4] point) pure returns(bool)
func (_TestBLS *TestBLSCallerSession) IsOnCurveG2(point [4]*big.Int) (bool, error) {
	return _TestBLS.Contract.IsOnCurveG2(&_TestBLS.CallOpts, point)
}

// MapToPoint is a free data retrieval call binding the contract method 0xd58e7733.
//
// Solidity: function mapToPoint(uint256 e) view returns(uint256[2] p)
func (_TestBLS *TestBLSCaller) MapToPoint(opts *bind.CallOpts, e *big.Int) ([2]*big.Int, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "mapToPoint", e)

	if err != nil {
		return *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)

	return out0, err

}

// MapToPoint is a free data retrieval call binding the contract method 0xd58e7733.
//
// Solidity: function mapToPoint(uint256 e) view returns(uint256[2] p)
func (_TestBLS *TestBLSSession) MapToPoint(e *big.Int) ([2]*big.Int, error) {
	return _TestBLS.Contract.MapToPoint(&_TestBLS.CallOpts, e)
}

// MapToPoint is a free data retrieval call binding the contract method 0xd58e7733.
//
// Solidity: function mapToPoint(uint256 e) view returns(uint256[2] p)
func (_TestBLS *TestBLSCallerSession) MapToPoint(e *big.Int) ([2]*big.Int, error) {
	return _TestBLS.Contract.MapToPoint(&_TestBLS.CallOpts, e)
}

// VerifyMultiple is a free data retrieval call binding the contract method 0x91413763.
//
// Solidity: function verifyMultiple(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) view returns(bool, bool)
func (_TestBLS *TestBLSCaller) VerifyMultiple(opts *bind.CallOpts, signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (bool, bool, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "verifyMultiple", signature, pubkeys, messages)

	if err != nil {
		return *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// VerifyMultiple is a free data retrieval call binding the contract method 0x91413763.
//
// Solidity: function verifyMultiple(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) view returns(bool, bool)
func (_TestBLS *TestBLSSession) VerifyMultiple(signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (bool, bool, error) {
	return _TestBLS.Contract.VerifyMultiple(&_TestBLS.CallOpts, signature, pubkeys, messages)
}

// VerifyMultiple is a free data retrieval call binding the contract method 0x91413763.
//
// Solidity: function verifyMultiple(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) view returns(bool, bool)
func (_TestBLS *TestBLSCallerSession) VerifyMultiple(signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (bool, bool, error) {
	return _TestBLS.Contract.VerifyMultiple(&_TestBLS.CallOpts, signature, pubkeys, messages)
}

// VerifySingle is a free data retrieval call binding the contract method 0xebbdac91.
//
// Solidity: function verifySingle(uint256[2] signature, uint256[4] pubkey, uint256[2] message) view returns(bool, bool)
func (_TestBLS *TestBLSCaller) VerifySingle(opts *bind.CallOpts, signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (bool, bool, error) {
	var out []interface{}
	err := _TestBLS.contract.Call(opts, &out, "verifySingle", signature, pubkey, message)

	if err != nil {
		return *new(bool), *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)
	out1 := *abi.ConvertType(out[1], new(bool)).(*bool)

	return out0, out1, err

}

// VerifySingle is a free data retrieval call binding the contract method 0xebbdac91.
//
// Solidity: function verifySingle(uint256[2] signature, uint256[4] pubkey, uint256[2] message) view returns(bool, bool)
func (_TestBLS *TestBLSSession) VerifySingle(signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (bool, bool, error) {
	return _TestBLS.Contract.VerifySingle(&_TestBLS.CallOpts, signature, pubkey, message)
}

// VerifySingle is a free data retrieval call binding the contract method 0xebbdac91.
//
// Solidity: function verifySingle(uint256[2] signature, uint256[4] pubkey, uint256[2] message) view returns(bool, bool)
func (_TestBLS *TestBLSCallerSession) VerifySingle(signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (bool, bool, error) {
	return _TestBLS.Contract.VerifySingle(&_TestBLS.CallOpts, signature, pubkey, message)
}

// HashToPointGasCost is a paid mutator transaction binding the contract method 0x5358a82f.
//
// Solidity: function hashToPointGasCost(bytes32 domain, bytes message) returns(uint256 p)
func (_TestBLS *TestBLSTransactor) HashToPointGasCost(opts *bind.TransactOpts, domain [32]byte, message []byte) (*types.Transaction, error) {
	return _TestBLS.contract.Transact(opts, "hashToPointGasCost", domain, message)
}

// HashToPointGasCost is a paid mutator transaction binding the contract method 0x5358a82f.
//
// Solidity: function hashToPointGasCost(bytes32 domain, bytes message) returns(uint256 p)
func (_TestBLS *TestBLSSession) HashToPointGasCost(domain [32]byte, message []byte) (*types.Transaction, error) {
	return _TestBLS.Contract.HashToPointGasCost(&_TestBLS.TransactOpts, domain, message)
}

// HashToPointGasCost is a paid mutator transaction binding the contract method 0x5358a82f.
//
// Solidity: function hashToPointGasCost(bytes32 domain, bytes message) returns(uint256 p)
func (_TestBLS *TestBLSTransactorSession) HashToPointGasCost(domain [32]byte, message []byte) (*types.Transaction, error) {
	return _TestBLS.Contract.HashToPointGasCost(&_TestBLS.TransactOpts, domain, message)
}

// IsOnCurveG1GasCost is a paid mutator transaction binding the contract method 0x2f06a1e3.
//
// Solidity: function isOnCurveG1GasCost(uint256[2] point) returns(uint256)
func (_TestBLS *TestBLSTransactor) IsOnCurveG1GasCost(opts *bind.TransactOpts, point [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.contract.Transact(opts, "isOnCurveG1GasCost", point)
}

// IsOnCurveG1GasCost is a paid mutator transaction binding the contract method 0x2f06a1e3.
//
// Solidity: function isOnCurveG1GasCost(uint256[2] point) returns(uint256)
func (_TestBLS *TestBLSSession) IsOnCurveG1GasCost(point [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.IsOnCurveG1GasCost(&_TestBLS.TransactOpts, point)
}

// IsOnCurveG1GasCost is a paid mutator transaction binding the contract method 0x2f06a1e3.
//
// Solidity: function isOnCurveG1GasCost(uint256[2] point) returns(uint256)
func (_TestBLS *TestBLSTransactorSession) IsOnCurveG1GasCost(point [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.IsOnCurveG1GasCost(&_TestBLS.TransactOpts, point)
}

// IsOnCurveG2GasCost is a paid mutator transaction binding the contract method 0x760b9d50.
//
// Solidity: function isOnCurveG2GasCost(uint256[4] point) returns(uint256)
func (_TestBLS *TestBLSTransactor) IsOnCurveG2GasCost(opts *bind.TransactOpts, point [4]*big.Int) (*types.Transaction, error) {
	return _TestBLS.contract.Transact(opts, "isOnCurveG2GasCost", point)
}

// IsOnCurveG2GasCost is a paid mutator transaction binding the contract method 0x760b9d50.
//
// Solidity: function isOnCurveG2GasCost(uint256[4] point) returns(uint256)
func (_TestBLS *TestBLSSession) IsOnCurveG2GasCost(point [4]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.IsOnCurveG2GasCost(&_TestBLS.TransactOpts, point)
}

// IsOnCurveG2GasCost is a paid mutator transaction binding the contract method 0x760b9d50.
//
// Solidity: function isOnCurveG2GasCost(uint256[4] point) returns(uint256)
func (_TestBLS *TestBLSTransactorSession) IsOnCurveG2GasCost(point [4]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.IsOnCurveG2GasCost(&_TestBLS.TransactOpts, point)
}

// VerifyMultipleGasCost is a paid mutator transaction binding the contract method 0x0d1abfdf.
//
// Solidity: function verifyMultipleGasCost(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) returns(uint256)
func (_TestBLS *TestBLSTransactor) VerifyMultipleGasCost(opts *bind.TransactOpts, signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.contract.Transact(opts, "verifyMultipleGasCost", signature, pubkeys, messages)
}

// VerifyMultipleGasCost is a paid mutator transaction binding the contract method 0x0d1abfdf.
//
// Solidity: function verifyMultipleGasCost(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) returns(uint256)
func (_TestBLS *TestBLSSession) VerifyMultipleGasCost(signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.VerifyMultipleGasCost(&_TestBLS.TransactOpts, signature, pubkeys, messages)
}

// VerifyMultipleGasCost is a paid mutator transaction binding the contract method 0x0d1abfdf.
//
// Solidity: function verifyMultipleGasCost(uint256[2] signature, uint256[4][] pubkeys, uint256[2][] messages) returns(uint256)
func (_TestBLS *TestBLSTransactorSession) VerifyMultipleGasCost(signature [2]*big.Int, pubkeys [][4]*big.Int, messages [][2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.VerifyMultipleGasCost(&_TestBLS.TransactOpts, signature, pubkeys, messages)
}

// VerifySingleGasCost is a paid mutator transaction binding the contract method 0x22bf7de7.
//
// Solidity: function verifySingleGasCost(uint256[2] signature, uint256[4] pubkey, uint256[2] message) returns(uint256)
func (_TestBLS *TestBLSTransactor) VerifySingleGasCost(opts *bind.TransactOpts, signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.contract.Transact(opts, "verifySingleGasCost", signature, pubkey, message)
}

// VerifySingleGasCost is a paid mutator transaction binding the contract method 0x22bf7de7.
//
// Solidity: function verifySingleGasCost(uint256[2] signature, uint256[4] pubkey, uint256[2] message) returns(uint256)
func (_TestBLS *TestBLSSession) VerifySingleGasCost(signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.VerifySingleGasCost(&_TestBLS.TransactOpts, signature, pubkey, message)
}

// VerifySingleGasCost is a paid mutator transaction binding the contract method 0x22bf7de7.
//
// Solidity: function verifySingleGasCost(uint256[2] signature, uint256[4] pubkey, uint256[2] message) returns(uint256)
func (_TestBLS *TestBLSTransactorSession) VerifySingleGasCost(signature [2]*big.Int, pubkey [4]*big.Int, message [2]*big.Int) (*types.Transaction, error) {
	return _TestBLS.Contract.VerifySingleGasCost(&_TestBLS.TransactOpts, signature, pubkey, message)
}
