// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package massmigration

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesMassMigrationBody is an auto generated low-level Go binding around an user-defined struct.
type TypesMassMigrationBody struct {
	AccountRoot  [32]byte
	Signature    [2]*big.Int
	SpokeID      *big.Int
	WithdrawRoot [32]byte
	TokenID      *big.Int
	Amount       *big.Int
	FeeReceiver  *big.Int
	Txs          []byte
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// MassMigrationMetaData contains all meta data concerning the MassMigration contract.
var MassMigrationMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.MassMigrationBody\",\"name\":\"committed\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processMassMigrationCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "",
}

// MassMigrationABI is the input ABI used to generate the binding from.
// Deprecated: Use MassMigrationMetaData.ABI instead.
var MassMigrationABI = MassMigrationMetaData.ABI

// MassMigrationBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MassMigrationMetaData.Bin instead.
var MassMigrationBin = MassMigrationMetaData.Bin

// DeployMassMigration deploys a new Ethereum contract, binding an instance of MassMigration to it.
func DeployMassMigration(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MassMigration, error) {
	parsed, err := MassMigrationMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MassMigrationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MassMigration{MassMigrationCaller: MassMigrationCaller{contract: contract}, MassMigrationTransactor: MassMigrationTransactor{contract: contract}, MassMigrationFilterer: MassMigrationFilterer{contract: contract}}, nil
}

// MassMigration is an auto generated Go binding around an Ethereum contract.
type MassMigration struct {
	MassMigrationCaller     // Read-only binding to the contract
	MassMigrationTransactor // Write-only binding to the contract
	MassMigrationFilterer   // Log filterer for contract events
}

// MassMigrationCaller is an auto generated read-only Go binding around an Ethereum contract.
type MassMigrationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MassMigrationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MassMigrationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MassMigrationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MassMigrationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MassMigrationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MassMigrationSession struct {
	Contract     *MassMigration    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MassMigrationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MassMigrationCallerSession struct {
	Contract *MassMigrationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MassMigrationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MassMigrationTransactorSession struct {
	Contract     *MassMigrationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MassMigrationRaw is an auto generated low-level Go binding around an Ethereum contract.
type MassMigrationRaw struct {
	Contract *MassMigration // Generic contract binding to access the raw methods on
}

// MassMigrationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MassMigrationCallerRaw struct {
	Contract *MassMigrationCaller // Generic read-only contract binding to access the raw methods on
}

// MassMigrationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MassMigrationTransactorRaw struct {
	Contract *MassMigrationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMassMigration creates a new instance of MassMigration, bound to a specific deployed contract.
func NewMassMigration(address common.Address, backend bind.ContractBackend) (*MassMigration, error) {
	contract, err := bindMassMigration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MassMigration{MassMigrationCaller: MassMigrationCaller{contract: contract}, MassMigrationTransactor: MassMigrationTransactor{contract: contract}, MassMigrationFilterer: MassMigrationFilterer{contract: contract}}, nil
}

// NewMassMigrationCaller creates a new read-only instance of MassMigration, bound to a specific deployed contract.
func NewMassMigrationCaller(address common.Address, caller bind.ContractCaller) (*MassMigrationCaller, error) {
	contract, err := bindMassMigration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MassMigrationCaller{contract: contract}, nil
}

// NewMassMigrationTransactor creates a new write-only instance of MassMigration, bound to a specific deployed contract.
func NewMassMigrationTransactor(address common.Address, transactor bind.ContractTransactor) (*MassMigrationTransactor, error) {
	contract, err := bindMassMigration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MassMigrationTransactor{contract: contract}, nil
}

// NewMassMigrationFilterer creates a new log filterer instance of MassMigration, bound to a specific deployed contract.
func NewMassMigrationFilterer(address common.Address, filterer bind.ContractFilterer) (*MassMigrationFilterer, error) {
	contract, err := bindMassMigration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MassMigrationFilterer{contract: contract}, nil
}

// bindMassMigration binds a generic wrapper to an already deployed contract.
func bindMassMigration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(MassMigrationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MassMigration *MassMigrationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MassMigration.Contract.MassMigrationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MassMigration *MassMigrationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MassMigration.Contract.MassMigrationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MassMigration *MassMigrationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MassMigration.Contract.MassMigrationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MassMigration *MassMigrationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MassMigration.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MassMigration *MassMigrationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MassMigration.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MassMigration *MassMigrationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MassMigration.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0xbe42c7c4.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, uint256 spokeID) view returns(uint8)
func (_MassMigration *MassMigrationCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProof, spokeID *big.Int) (uint8, error) {
	var out []interface{}
	err := _MassMigration.contract.Call(opts, &out, "checkSignature", common, proof, spokeID)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xbe42c7c4.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, uint256 spokeID) view returns(uint8)
func (_MassMigration *MassMigrationSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof, spokeID *big.Int) (uint8, error) {
	return _MassMigration.Contract.CheckSignature(&_MassMigration.CallOpts, common, proof, spokeID)
}

// CheckSignature is a free data retrieval call binding the contract method 0xbe42c7c4.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, uint256 spokeID) view returns(uint8)
func (_MassMigration *MassMigrationCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof, spokeID *big.Int) (uint8, error) {
	return _MassMigration.Contract.CheckSignature(&_MassMigration.CallOpts, common, proof, spokeID)
}

// ProcessMassMigrationCommit is a free data retrieval call binding the contract method 0xab5a164f.
//
// Solidity: function processMassMigrationCommit(bytes32 stateRoot, uint256 maxTxSize, (bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes) committed, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_MassMigration *MassMigrationCaller) ProcessMassMigrationCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, committed TypesMassMigrationBody, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _MassMigration.contract.Call(opts, &out, "processMassMigrationCommit", stateRoot, maxTxSize, committed, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessMassMigrationCommit is a free data retrieval call binding the contract method 0xab5a164f.
//
// Solidity: function processMassMigrationCommit(bytes32 stateRoot, uint256 maxTxSize, (bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes) committed, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_MassMigration *MassMigrationSession) ProcessMassMigrationCommit(stateRoot [32]byte, maxTxSize *big.Int, committed TypesMassMigrationBody, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _MassMigration.Contract.ProcessMassMigrationCommit(&_MassMigration.CallOpts, stateRoot, maxTxSize, committed, proofs)
}

// ProcessMassMigrationCommit is a free data retrieval call binding the contract method 0xab5a164f.
//
// Solidity: function processMassMigrationCommit(bytes32 stateRoot, uint256 maxTxSize, (bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes) committed, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_MassMigration *MassMigrationCallerSession) ProcessMassMigrationCommit(stateRoot [32]byte, maxTxSize *big.Int, committed TypesMassMigrationBody, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _MassMigration.Contract.ProcessMassMigrationCommit(&_MassMigration.CallOpts, stateRoot, maxTxSize, committed, proofs)
}
