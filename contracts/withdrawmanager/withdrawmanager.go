// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package withdrawmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesMMCommitmentInclusionProof is an auto generated low-level Go binding around an user-defined struct.
type TypesMMCommitmentInclusionProof struct {
	Commitment TypesMassMigrationCommitment
	Path       *big.Int
	Witness    [][32]byte
}

// TypesMassMigrationBody is an auto generated low-level Go binding around an user-defined struct.
type TypesMassMigrationBody struct {
	AccountRoot  [32]byte
	Signature    [2]*big.Int
	SpokeID      *big.Int
	WithdrawRoot [32]byte
	TokenID      *big.Int
	Amount       *big.Int
	FeeReceiver  *big.Int
	Txs          []byte
}

// TypesMassMigrationCommitment is an auto generated low-level Go binding around an user-defined struct.
type TypesMassMigrationCommitment struct {
	StateRoot [32]byte
	Body      TypesMassMigrationBody
}

// TypesStateMerkleProofWithPath is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProofWithPath struct {
	State   TypesUserState
	Path    *big.Int
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// WithdrawManagerMetaData contains all meta data concerning the WithdrawManager contract.
var WithdrawManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractITokenRegistry\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"contractVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contractIEIP712\",\"name\":\"_domain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProofWithPath\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyWitness\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"contractIEIP712\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.MassMigrationBody\",\"name\":\"body\",\"type\":\"tuple\"}],\"internalType\":\"structTypes.MassMigrationCommitment\",\"name\":\"commitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.MMCommitmentInclusionProof\",\"name\":\"commitmentMP\",\"type\":\"tuple\"}],\"name\":\"processWithdrawCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contractITokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contractVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// WithdrawManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use WithdrawManagerMetaData.ABI instead.
var WithdrawManagerABI = WithdrawManagerMetaData.ABI

// WithdrawManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WithdrawManagerMetaData.Bin instead.
var WithdrawManagerBin = WithdrawManagerMetaData.Bin

// DeployWithdrawManager deploys a new Ethereum contract, binding an instance of WithdrawManager to it.
func DeployWithdrawManager(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenRegistry common.Address, _vault common.Address, _domain common.Address) (common.Address, *types.Transaction, *WithdrawManager, error) {
	parsed, err := WithdrawManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WithdrawManagerBin), backend, _tokenRegistry, _vault, _domain)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WithdrawManager{WithdrawManagerCaller: WithdrawManagerCaller{contract: contract}, WithdrawManagerTransactor: WithdrawManagerTransactor{contract: contract}, WithdrawManagerFilterer: WithdrawManagerFilterer{contract: contract}}, nil
}

// WithdrawManager is an auto generated Go binding around an Ethereum contract.
type WithdrawManager struct {
	WithdrawManagerCaller     // Read-only binding to the contract
	WithdrawManagerTransactor // Write-only binding to the contract
	WithdrawManagerFilterer   // Log filterer for contract events
}

// WithdrawManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type WithdrawManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WithdrawManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WithdrawManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WithdrawManagerSession struct {
	Contract     *WithdrawManager  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WithdrawManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WithdrawManagerCallerSession struct {
	Contract *WithdrawManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// WithdrawManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WithdrawManagerTransactorSession struct {
	Contract     *WithdrawManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// WithdrawManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type WithdrawManagerRaw struct {
	Contract *WithdrawManager // Generic contract binding to access the raw methods on
}

// WithdrawManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WithdrawManagerCallerRaw struct {
	Contract *WithdrawManagerCaller // Generic read-only contract binding to access the raw methods on
}

// WithdrawManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WithdrawManagerTransactorRaw struct {
	Contract *WithdrawManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWithdrawManager creates a new instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManager(address common.Address, backend bind.ContractBackend) (*WithdrawManager, error) {
	contract, err := bindWithdrawManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WithdrawManager{WithdrawManagerCaller: WithdrawManagerCaller{contract: contract}, WithdrawManagerTransactor: WithdrawManagerTransactor{contract: contract}, WithdrawManagerFilterer: WithdrawManagerFilterer{contract: contract}}, nil
}

// NewWithdrawManagerCaller creates a new read-only instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerCaller(address common.Address, caller bind.ContractCaller) (*WithdrawManagerCaller, error) {
	contract, err := bindWithdrawManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerCaller{contract: contract}, nil
}

// NewWithdrawManagerTransactor creates a new write-only instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*WithdrawManagerTransactor, error) {
	contract, err := bindWithdrawManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerTransactor{contract: contract}, nil
}

// NewWithdrawManagerFilterer creates a new log filterer instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*WithdrawManagerFilterer, error) {
	contract, err := bindWithdrawManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerFilterer{contract: contract}, nil
}

// bindWithdrawManager binds a generic wrapper to an already deployed contract.
func bindWithdrawManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WithdrawManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WithdrawManager *WithdrawManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WithdrawManager.Contract.WithdrawManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WithdrawManager *WithdrawManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WithdrawManager.Contract.WithdrawManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WithdrawManager *WithdrawManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WithdrawManager.Contract.WithdrawManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WithdrawManager *WithdrawManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WithdrawManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WithdrawManager *WithdrawManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WithdrawManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WithdrawManager *WithdrawManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WithdrawManager.Contract.contract.Transact(opts, method, params...)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) Domain(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) Domain() (common.Address, error) {
	return _WithdrawManager.Contract.Domain(&_WithdrawManager.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) Domain() (common.Address, error) {
	return _WithdrawManager.Contract.Domain(&_WithdrawManager.CallOpts)
}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) TokenRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "tokenRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) TokenRegistry() (common.Address, error) {
	return _WithdrawManager.Contract.TokenRegistry(&_WithdrawManager.CallOpts)
}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) TokenRegistry() (common.Address, error) {
	return _WithdrawManager.Contract.TokenRegistry(&_WithdrawManager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) Vault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "vault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) Vault() (common.Address, error) {
	return _WithdrawManager.Contract.Vault(&_WithdrawManager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) Vault() (common.Address, error) {
	return _WithdrawManager.Contract.Vault(&_WithdrawManager.CallOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerTransactor) ClaimTokens(opts *bind.TransactOpts, withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.contract.Transact(opts, "claimTokens", withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerSession) ClaimTokens(withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ClaimTokens(&_WithdrawManager.TransactOpts, withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerTransactorSession) ClaimTokens(withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ClaimTokens(&_WithdrawManager.TransactOpts, withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerTransactor) ProcessWithdrawCommitment(opts *bind.TransactOpts, batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.contract.Transact(opts, "processWithdrawCommitment", batchID, commitmentMP)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerSession) ProcessWithdrawCommitment(batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ProcessWithdrawCommitment(&_WithdrawManager.TransactOpts, batchID, commitmentMP)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerTransactorSession) ProcessWithdrawCommitment(batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ProcessWithdrawCommitment(&_WithdrawManager.TransactOpts, batchID, commitmentMP)
}
