// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package withdrawmanager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesMMCommitmentInclusionProof is an auto generated low-level Go binding around an user-defined struct.
type TypesMMCommitmentInclusionProof struct {
	Commitment TypesMassMigrationCommitment
	Path       *big.Int
	Witness    [][32]byte
}

// TypesMassMigrationBody is an auto generated low-level Go binding around an user-defined struct.
type TypesMassMigrationBody struct {
	AccountRoot  [32]byte
	Signature    [2]*big.Int
	SpokeID      *big.Int
	WithdrawRoot [32]byte
	TokenID      *big.Int
	Amount       *big.Int
	FeeReceiver  *big.Int
	Txs          []byte
}

// TypesMassMigrationCommitment is an auto generated low-level Go binding around an user-defined struct.
type TypesMassMigrationCommitment struct {
	StateRoot [32]byte
	Body      TypesMassMigrationBody
}

// TypesStateMerkleProofWithPath is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProofWithPath struct {
	State   TypesUserState
	Path    *big.Int
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// WithdrawManagerMetaData contains all meta data concerning the WithdrawManager contract.
var WithdrawManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractITokenRegistry\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"contractVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contractIEIP712\",\"name\":\"_domain\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProofWithPath\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyWitness\",\"type\":\"bytes32[]\"}],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domain\",\"outputs\":[{\"internalType\":\"contractIEIP712\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.MassMigrationBody\",\"name\":\"body\",\"type\":\"tuple\"}],\"internalType\":\"structTypes.MassMigrationCommitment\",\"name\":\"commitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"path\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.MMCommitmentInclusionProof\",\"name\":\"commitmentMP\",\"type\":\"tuple\"}],\"name\":\"processWithdrawCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contractITokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contractVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60e06040523480156200001157600080fd5b5060405162002e3f38038062002e3f83398101604081905262000034916200005c565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c052620000c8565b60008060006060848603121562000071578283fd5b83516200007e81620000af565b60208501519093506200009181620000af565b6040850151909250620000a481620000af565b809150509250925092565b6001600160a01b0381168114620000c557600080fd5b50565b60805160601c60a05160601c60c05160601c612d29620001166000398061026a528061046c52508060c9528061021752806106405250806101585280610246528061056e5250612d296000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063707e80b41461005c5780639d23c4c714610071578063c2fb26a61461008f578063e84b20c814610097578063fbfa77cf146100aa575b600080fd5b61006f61006a3660046125fe565b6100b2565b005b610079610244565b6040516100869190612842565b60405180910390f35b610079610268565b61006f6100a53660046124e6565b61028c565b61007961063e565b604051634abb54d960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690634abb54d9906101009085908590600401612bce565b600060405180830381600087803b15801561011a57600080fd5b505af115801561012e573d6000803e3d6000fd5b505082516020015160800151604051630a7973b760e01b8152600093508392506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630a7973b79161018c9190600401612864565b604080518083038186803b1580156101a357600080fd5b505afa1580156101b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101db9190612476565b8451602090810151805160609091015160009081526001835260409020558551015160a001519193509150810261023d6001600160a01b0384167f00000000000000000000000000000000000000000000000000000000000000003084610662565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600086815260016020526040902054806102c15760405162461bcd60e51b81526004016102b890612b71565b60405180910390fd5b61032d876102dc6102d7368a90038a018a6125b7565b6106c0565b805160209091012060808901356102f660a08b018b612c5b565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061075792505050565b6103495760405162461bcd60e51b81526004016102b890612a17565b60008781526020819052604090206103639087359061076f565b156103805760405162461bcd60e51b81526004016102b890612999565b6103e3818660405160200161039591906127ab565b60408051601f1981840301815282825280516020918201208782028085018301909352878452928b359290918991899182919085019084908082843760009201919091525061075792505050565b6103ff5760405162461bcd60e51b81526004016102b890612944565b604080518082018252600091829161051491889060029083908390808284376000920191909152505060408051608081810190925291508a906004908390839080828437600092019190915250506040805163f698da2560e01b8152905161050f92506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f698da25916004808301926020929190829003018186803b1580156104b257600080fd5b505afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea91906124ce565b336040516020016104fb919061278e565b604051602081830303815290604052610796565b610855565b92509050816105355760405162461bcd60e51b81526004016102b8906128b7565b806105525760405162461bcd60e51b81526004016102b8906129e0565b604051630a7973b760e01b815260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630a7973b7906105a79060208e013590600401612864565b604080518083038186803b1580156105be57600080fd5b505afa1580156105d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f69190612476565b60008d81526020819052604090209193509150610615908b3590610a18565b60408a013581026106306001600160a01b0384163383610a40565b505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106ba846323b872dd60e01b858585604051602401610683939291906127f7565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a64565b50505050565b80516060901580156106d457506020820151155b80156106e257506040820151155b80156106f057506060820151155b1561071d5760006040516020016107079190612856565b6040516020818303038152906040529050610752565b8151602080840151604080860151606087015191516107409594919291016127dc565b60405160208183030381529060405290505b919050565b600084610765858585610af3565b1495945050505050565b610100820460009081526020919091526040902054600160ff9092169190911b9081161490565b61079e612220565b6107a6612220565b6107b08484610ba0565b90506107ba612220565b6107cb8260005b6020020151610c5b565b90506107d5612220565b6107e08360016107c1565b90506107ea61223e565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa90508080156108295761082b565bfe5b50806108495760405162461bcd60e51b81526004016102b890612880565b50919695505050505050565b60008061086061225c565b50604080516101808101825286518152602080880151818301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2828401527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060808401919091527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec60808401527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60a0840152865160c08401528682015160e08401529087015161010083015286516101208301528601516101408201529085015161016082015261095261227b565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca9061098d90600290600401612864565b60206040518083038186803b1580156109a557600080fd5b505afa1580156109b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109dd91906124ce565b9050600060208361018086600886fa905080610a03576000809550955050505050610a10565b5050511515925060019150505b935093915050565b61010082046000908152602091909152604090208054600160ff9093169290921b9091179055565b610a5f8363a9059cbb60e01b848460405160240161068392919061281b565b505050565b6060610ab9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610fd79092919063ffffffff16565b805190915015610a5f5780806020019051810190610ad791906124ae565b610a5f5760405162461bcd60e51b81526004016102b890612b27565b600083815b8351811015610b9557600185821c16610b4e5781848281518110610b1857fe5b6020026020010151604051602001610b31929190612834565b604051602081830303815290604052805190602001209150610b8d565b838181518110610b5a57fe5b602002602001015182604051602001610b74929190612834565b6040516020818303038152906040528051906020012091505b600101610af8565b5090505b9392505050565b610ba8612220565b6060610bb48484610fee565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020612cfd83398151915285600080516020612cfd833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020612cfd83398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b610c63612220565b600080516020612cfd8339815191528210610c905760405162461bcd60e51b81526004016102b890612a6b565b816000610c9c8261126a565b9150506000600080516020612cfd83398151915280610cb757fe5b8384099050600080516020612cfd8339815191526004820890506000600080516020612cfd83398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020612cfd8339815191528383099050610d1e81611293565b9050600080516020612cfd8339815191528283099150600080516020612cfd8339815191528183099150600080516020612cfd8339815191528286099150600080516020612cfd83398151915282600080516020612cfd833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020612cfd8339815191528586099150600080516020612cfd8339815191528583099150600080516020612cfd8339815191526003830891506000610de08361126a565b90935090508015610e235784610e045782600080516020612cfd8339815191520392505b5050604080518082019091529384526020840152509091506107529050565b600080516020612cfd83398151915260018708600080516020612cfd833981519152039550600080516020612cfd83398151915280610e5e57fe5b8687099250600080516020612cfd8339815191528684099250600080516020612cfd833981519152600384089250610e958361126a565b90935090508015610ed45784610e0457505060408051808201909152938452600080516020612cfd833981519152036020840152509091506107529050565b600080516020612cfd8339815191528485099550600080516020612cfd8339815191528687099550600080516020612cfd8339815191528287099550600080516020612cfd8339815191528287099550600080516020612cfd833981519152600187089550600080516020612cfd8339815191528687099250600080516020612cfd8339815191528684099250600080516020612cfd833981519152600384089250610f7f8361126a565b909350905080610fa15760405162461bcd60e51b81526004016102b890612ae5565b84610fba5782600080516020612cfd8339815191520392505b505060408051808201909152938452602084015250909392505050565b6060610fe684846000856112a4565b949350505050565b8051606090816064820167ffffffffffffffff8111801561100e57600080fd5b506040519080825280601f01601f191660200182016040528015611039576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b8481101561107f5760208188018101518383015201611065565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516110b591906127c0565b602060405180830381855afa1580156110d2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906110f591906124ce565b905060006042945084845281602085015260016040850153604184018890526020606185015360028460405161112b91906127c0565b602060405180830381855afa158015611148573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061116b91906124ce565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516111a291906127c0565b602060405180830381855afa1580156111bf573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906111e291906124ce565b90508060408401528082188060208601525060036040850153604184018890526020606185015360028460405161121991906127c0565b602060405180830381855afa158015611236573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061125991906124ce565b606084015250909695505050505050565b60008061127683611365565b915082600080516020612cfd833981519152838409149050915091565b600061129e82611a9a565b92915050565b6060824710156112c65760405162461bcd60e51b81526004016102b8906128fe565b6112cf856121e1565b6112eb5760405162461bcd60e51b81526004016102b890612aae565b60006060866001600160a01b0316858760405161130891906127c0565b60006040518083038185875af1925050503d8060008114611345576040519150601f19603f3d011682016040523d82523d6000602084013e61134a565b606091505b509150915061135a8282866121e7565b979650505050505050565b6000600080516020612cfd8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020612cfd8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab3b151590565b606083156121f6575081610b99565b8251156122065782518084602001fd5b8160405162461bcd60e51b81526004016102b8919061286d565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f8301126122a9578081fd5b813567ffffffffffffffff8111156122bf578182fd5b60208082026122cf828201612ca9565b838152935081840185830182870184018810156122eb57600080fd5b600092505b8483101561230e5780358252600192909201919083019083016122f0565b505050505092915050565b600082601f830112612329578081fd5b6123336040612ca9565b905080828460408501111561234757600080fd5b60005b600281101561236957813583526020928301929091019060010161234a565b50505092915050565b600082601f830112612382578081fd5b813567ffffffffffffffff811115612398578182fd5b6123ab601f8201601f1916602001612ca9565b91508082528360208285010111156123c257600080fd5b8060208401602084013760009082016020015292915050565b600061012082840312156123ed578081fd5b6101006123f981612ca9565b91508235825261240c8460208501612319565b6020830152606083013560408301526080830135606083015260a0830135608083015260c083013560a083015260e083013560c083015280830135905067ffffffffffffffff81111561245e57600080fd5b61246a84828501612372565b60e08301525092915050565b60008060408385031215612488578182fd5b82516001600160a01b038116811461249e578283fd5b6020939093015192949293505050565b6000602082840312156124bf578081fd5b81518015158114610b99578182fd5b6000602082840312156124df578081fd5b5051919050565b60008060008060008061012087890312156124ff578182fd5b86359550602087013567ffffffffffffffff8082111561251d578384fd5b9088019060c0828b031215612530578384fd5b90955060c088019089821115612544578384fd5b60408901955061010089018a81111561255b578485fd5b9194509035908082111561256d578384fd5b818901915089601f830112612580578384fd5b81358181111561258e578485fd5b8a602080830285010111156125a1578485fd5b6020830194508093505050509295509295509295565b6000608082840312156125c8578081fd5b6125d26080612ca9565b823581526020830135602082015260408301356040820152606083013560608201528091505092915050565b60008060408385031215612610578182fd5b82359150602083013567ffffffffffffffff8082111561262e578283fd5b9084019060608287031215612641578283fd5b61264b6060612ca9565b823582811115612659578485fd5b83016040818903121561266a578485fd5b6126746040612ca9565b81358152602082013584811115612689578687fd5b6126958a8285016123db565b6020830152508083525050602083013560208201526040830135828111156126bb578485fd5b6126c788828601612299565b6040830152508093505050509250929050565b600081518084526126f2816020860160208601612cd0565b601f01601f19169290920160200192915050565b600061012082518452602080840151818601845b60028110156127375782518252918301919083019060010161271a565b505050506040830151606085015260608301516080850152608083015160a085015260a083015160c085015260c083015160e085015260e083015181610100860152612785828601826126da565b95945050505050565b60609190911b6bffffffffffffffffffffffff1916815260140190565b60006080838337608091909101908152919050565b600082516127d2818460208701612cd0565b9190910192915050565b93845260208401929092526040830152606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b918252602082015260400190565b6001600160a01b0391909116815260200190565b60ff91909116815260200190565b90815260200190565b600060208252610b9960208301846126da565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526027908201527f57697468647261774d616e616765723a20507265636f6d70696c652063616c6c6040820152660819985a5b195960ca1b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b60208082526035908201527f57697468647261774d616e616765723a205075626c6963206b65792073686f756040820152746c6420626520696e2074686520526567697374727960581b606082015260800190565b60208082526027908201527f57697468647261774d616e616765723a20546f6b656e20686173206265656e2060408201526618db185a5b595960ca1b606082015260800190565b6020808252601e908201527f57697468647261774d616e616765723a20426164207369676e61747572650000604082015260600190565b60208082526034908201527f57697468647261774d616e616765723a2073746174652073686f756c64206265604082015273081a5b881d1a19481dda5d1a191c985dd49bdbdd60621b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526038908201527f57697468647261774d616e616765723a207769746864726177526f6f7420736860408201527f6f756c642068617665206265656e2070726f6365737365640000000000000000606082015260800190565b60008382526020604081840152835160606040850152805160a0850152818101519050604060c0850152612c0560e0850182612706565b8583015160608601526040860151858203603f190160808701528051808352908401925084918401905b80831015612c4f5783518252928401926001929092019190840190612c2f565b50979650505050505050565b6000808335601e19843603018112612c71578283fd5b83018035915067ffffffffffffffff821115612c8b578283fd5b6020908101925081023603821315612ca257600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715612cc857600080fd5b604052919050565b60005b83811015612ceb578181015183820152602001612cd3565b838111156106ba575050600091015256fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a",
}

// WithdrawManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use WithdrawManagerMetaData.ABI instead.
var WithdrawManagerABI = WithdrawManagerMetaData.ABI

// WithdrawManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use WithdrawManagerMetaData.Bin instead.
var WithdrawManagerBin = WithdrawManagerMetaData.Bin

// DeployWithdrawManager deploys a new Ethereum contract, binding an instance of WithdrawManager to it.
func DeployWithdrawManager(auth *bind.TransactOpts, backend bind.ContractBackend, _tokenRegistry common.Address, _vault common.Address, _domain common.Address) (common.Address, *types.Transaction, *WithdrawManager, error) {
	parsed, err := WithdrawManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(WithdrawManagerBin), backend, _tokenRegistry, _vault, _domain)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &WithdrawManager{WithdrawManagerCaller: WithdrawManagerCaller{contract: contract}, WithdrawManagerTransactor: WithdrawManagerTransactor{contract: contract}, WithdrawManagerFilterer: WithdrawManagerFilterer{contract: contract}}, nil
}

// WithdrawManager is an auto generated Go binding around an Ethereum contract.
type WithdrawManager struct {
	WithdrawManagerCaller     // Read-only binding to the contract
	WithdrawManagerTransactor // Write-only binding to the contract
	WithdrawManagerFilterer   // Log filterer for contract events
}

// WithdrawManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type WithdrawManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type WithdrawManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type WithdrawManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// WithdrawManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type WithdrawManagerSession struct {
	Contract     *WithdrawManager  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// WithdrawManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type WithdrawManagerCallerSession struct {
	Contract *WithdrawManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// WithdrawManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type WithdrawManagerTransactorSession struct {
	Contract     *WithdrawManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// WithdrawManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type WithdrawManagerRaw struct {
	Contract *WithdrawManager // Generic contract binding to access the raw methods on
}

// WithdrawManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type WithdrawManagerCallerRaw struct {
	Contract *WithdrawManagerCaller // Generic read-only contract binding to access the raw methods on
}

// WithdrawManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type WithdrawManagerTransactorRaw struct {
	Contract *WithdrawManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewWithdrawManager creates a new instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManager(address common.Address, backend bind.ContractBackend) (*WithdrawManager, error) {
	contract, err := bindWithdrawManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &WithdrawManager{WithdrawManagerCaller: WithdrawManagerCaller{contract: contract}, WithdrawManagerTransactor: WithdrawManagerTransactor{contract: contract}, WithdrawManagerFilterer: WithdrawManagerFilterer{contract: contract}}, nil
}

// NewWithdrawManagerCaller creates a new read-only instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerCaller(address common.Address, caller bind.ContractCaller) (*WithdrawManagerCaller, error) {
	contract, err := bindWithdrawManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerCaller{contract: contract}, nil
}

// NewWithdrawManagerTransactor creates a new write-only instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*WithdrawManagerTransactor, error) {
	contract, err := bindWithdrawManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerTransactor{contract: contract}, nil
}

// NewWithdrawManagerFilterer creates a new log filterer instance of WithdrawManager, bound to a specific deployed contract.
func NewWithdrawManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*WithdrawManagerFilterer, error) {
	contract, err := bindWithdrawManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &WithdrawManagerFilterer{contract: contract}, nil
}

// bindWithdrawManager binds a generic wrapper to an already deployed contract.
func bindWithdrawManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(WithdrawManagerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WithdrawManager *WithdrawManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WithdrawManager.Contract.WithdrawManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WithdrawManager *WithdrawManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WithdrawManager.Contract.WithdrawManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WithdrawManager *WithdrawManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WithdrawManager.Contract.WithdrawManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_WithdrawManager *WithdrawManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _WithdrawManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_WithdrawManager *WithdrawManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _WithdrawManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_WithdrawManager *WithdrawManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _WithdrawManager.Contract.contract.Transact(opts, method, params...)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) Domain(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "domain")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) Domain() (common.Address, error) {
	return _WithdrawManager.Contract.Domain(&_WithdrawManager.CallOpts)
}

// Domain is a free data retrieval call binding the contract method 0xc2fb26a6.
//
// Solidity: function domain() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) Domain() (common.Address, error) {
	return _WithdrawManager.Contract.Domain(&_WithdrawManager.CallOpts)
}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) TokenRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "tokenRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) TokenRegistry() (common.Address, error) {
	return _WithdrawManager.Contract.TokenRegistry(&_WithdrawManager.CallOpts)
}

// TokenRegistry is a free data retrieval call binding the contract method 0x9d23c4c7.
//
// Solidity: function tokenRegistry() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) TokenRegistry() (common.Address, error) {
	return _WithdrawManager.Contract.TokenRegistry(&_WithdrawManager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerCaller) Vault(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _WithdrawManager.contract.Call(opts, &out, "vault")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerSession) Vault() (common.Address, error) {
	return _WithdrawManager.Contract.Vault(&_WithdrawManager.CallOpts)
}

// Vault is a free data retrieval call binding the contract method 0xfbfa77cf.
//
// Solidity: function vault() view returns(address)
func (_WithdrawManager *WithdrawManagerCallerSession) Vault() (common.Address, error) {
	return _WithdrawManager.Contract.Vault(&_WithdrawManager.CallOpts)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerTransactor) ClaimTokens(opts *bind.TransactOpts, withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.contract.Transact(opts, "claimTokens", withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerSession) ClaimTokens(withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ClaimTokens(&_WithdrawManager.TransactOpts, withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ClaimTokens is a paid mutator transaction binding the contract method 0xe84b20c8.
//
// Solidity: function claimTokens(bytes32 withdrawRoot, ((uint256,uint256,uint256,uint256),uint256,bytes32[]) withdrawal, uint256[4] pubkey, uint256[2] signature, bytes32[] pubkeyWitness) returns()
func (_WithdrawManager *WithdrawManagerTransactorSession) ClaimTokens(withdrawRoot [32]byte, withdrawal TypesStateMerkleProofWithPath, pubkey [4]*big.Int, signature [2]*big.Int, pubkeyWitness [][32]byte) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ClaimTokens(&_WithdrawManager.TransactOpts, withdrawRoot, withdrawal, pubkey, signature, pubkeyWitness)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerTransactor) ProcessWithdrawCommitment(opts *bind.TransactOpts, batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.contract.Transact(opts, "processWithdrawCommitment", batchID, commitmentMP)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerSession) ProcessWithdrawCommitment(batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ProcessWithdrawCommitment(&_WithdrawManager.TransactOpts, batchID, commitmentMP)
}

// ProcessWithdrawCommitment is a paid mutator transaction binding the contract method 0x707e80b4.
//
// Solidity: function processWithdrawCommitment(uint256 batchID, ((bytes32,(bytes32,uint256[2],uint256,bytes32,uint256,uint256,uint256,bytes)),uint256,bytes32[]) commitmentMP) returns()
func (_WithdrawManager *WithdrawManagerTransactorSession) ProcessWithdrawCommitment(batchID *big.Int, commitmentMP TypesMMCommitmentInclusionProof) (*types.Transaction, error) {
	return _WithdrawManager.Contract.ProcessWithdrawCommitment(&_WithdrawManager.TransactOpts, batchID, commitmentMP)
}
