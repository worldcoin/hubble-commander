// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package create2transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProofWithReceiver is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProofWithReceiver struct {
	States                  []TypesUserState
	StateWitnesses          [][][32]byte
	PubkeysSender           [][4]*big.Int
	PubkeyWitnessesSender   [][][32]byte
	PubkeyHashesReceiver    [][32]byte
	PubkeyWitnessesReceiver [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// Create2TransferMetaData contains all meta data concerning the Create2Transfer contract.
var Create2TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysSender\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesSender\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyHashesReceiver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesReceiver\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProofWithReceiver\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processCreate2TransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613237806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063336920361461003b578063ff81749514610065575b600080fd5b61004e610049366004612b2b565b610085565b60405161005c929190612dd8565b60405180910390f35b610078610073366004612c5b565b6101ba565b60405161005c9190612df4565b600080610091846101cf565b156100a1575085905060086101b0565b60006100ac856101e7565b9050868111156100c35787600992509250506101b0565b600080856000815181106100d357fe5b6020026020010151600001516020015190506100ed612666565b60005b8481101561017f5761010289826101fb565b91506101408c83858b856002028151811061011957fe5b60200260200101518c866002026001018151811061013357fe5b602002602001015161027e565b909c509550600086600b81111561015357fe5b14610165578b965050505050506101b0565b60808201516101759085906102d2565b93506001016100f0565b506101a38b8a84868b896002028151811061019657fe5b6020026020010151610300565b909b508b96509450505050505b9550959350505050565b60006101c683836103ae565b90505b92915050565b600060108251816101dc57fe5b06151590505b919050565b600060108251816101f457fe5b0492915050565b610203612666565b50600460108281028401918201516008830151600c80850151600e86015195909401516040805160a08101825263ffffffff958616815293851660208501529490931693820193909352600f84841c8116600a90810a610fff9687160260608401529383901c1690920a921691909102608082015292915050565b60008061029b8787600001518789606001518a6080015189610790565b9092509050600081600b8111156102ae57fe5b146102b8576101b0565b6102c482878786610843565b976000975095505050505050565b6000828201838110156101c65760405162461bcd60e51b81526004016102f790612e92565b60405180910390fd5b6000806103268761031485600001516108d7565b8051906020012088866020015161096d565b6103425760405162461bcd60e51b81526004016102f79061316c565b61034a612695565b600061035b87878760000151610985565b9092509050600081600b81111561036e57fe5b14610380576000935091506101b09050565b61039e61038c836108d7565b805190602001208987602001516109f7565b9960009950975050505050505050565b6000806103be84608001516101e7565b905060608167ffffffffffffffff811180156103d957600080fd5b5060405190808252806020026020018201604052801561041357816020015b6104006126bd565b8152602001906001900390816103f85790505b50905060608267ffffffffffffffff8111801561042f57600080fd5b50604051908082528060200260200182016040528015610459578160200160208202803683370190505b50905060005b838110156107415760001981850301610476612666565b608089015161048590836101fb565b90506104d889602001516104af8a6000015185815181106104a257fe5b60200260200101516108d7565b8051906020012083600001518b6020015186815181106104cb57fe5b602002602001015161096d565b6104f45760405162461bcd60e51b81526004016102f790612e4e565b60008860000151838151811061050657fe5b6020026020010151606001511161052f5760405162461bcd60e51b81526004016102f790612fe6565b6105a189604001518960400151848151811061054757fe5b602002602001015160405160200161055f9190612d1a565b604051602081830303815290604052805190602001208a60000151858151811061058557fe5b6020026020010151600001518b6060015186815181106104cb57fe5b6105bd5760405162461bcd60e51b81526004016102f790612ec9565b6105f28960400151896080015184815181106105d557fe5b602002602001015183604001518b60a0015186815181106104cb57fe5b61060e5760405162461bcd60e51b81526004016102f79061301d565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b8860800151838151811061064257fe5b6020026020010151141561065f57600b96505050505050506101c9565b600060018960000151848151811061067357fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b858110156106ca57818782815181106106ac57fe5b602002602001015114156106c257600019909201915b600101610697565b50808686815181106106d857fe5b602002602001018181525050606061070884848d6080015188815181106106fb57fe5b6020026020010151610aa2565b90506107188c6060015182610ae4565b88868151811061072457fe5b60200260200101819052505050505050808060010191505061045f565b506000806107588860000151886040015186610ba3565b925090508161076f57600a955050505050506101c9565b80610782576005955050505050506101c9565b506000979650505050505050565b6000806107b6886107a485600001516108d7565b8051906020012089866020015161096d565b6107d25760405162461bcd60e51b81526004016102f790613065565b6107da612695565b60006107ec8888888860000151610fd3565b9092509050600081600b8111156107ff57fe5b14610811576000935091506108389050565b61082f61081d836108d7565b805190602001208a87602001516109f7565b93506000925050505b965096945050505050565b600061088085600060405160200161085b9190612e09565b604051602081830303815290604052805190602001208660200151856020015161096d565b61089c5760405162461bcd60e51b81526004016102f790612f13565b60606108b1856040015185876060015161109b565b90506108cd8180519060200120866020015185602001516109f7565b9695505050505050565b80516060901580156108eb57506020820151155b80156108f957506040820151155b801561090757506060820151155b1561093457600060405160200161091e9190612e09565b60405160208183030381529060405290506101e2565b815160208084015160408086015160608701519151610957959491929101612daf565b6040516020818303038152906040529050919050565b60008461097b8585856109f7565b1495945050505050565b61098d612695565b6000848360200151146109a5575081905060046109ef565b604051806080016040528084600001518152602001846020015181526020016109db8686604001516102d290919063ffffffff16565b815260608501516020909101529150600090505b935093915050565b600083815b8351811015610a9957600185821c16610a525781848281518110610a1c57fe5b6020026020010151604051602001610a35929190612dca565b604051602081830303815290604052805190602001209150610a91565b838181518110610a5e57fe5b602002602001015182604051602001610a78929190612dca565b6040516020818303038152906040528051906020012091505b6001016109fc565b50949350505050565b606060038460000151838587606001518860800151604051602001610acc96959493929190612d87565b60405160208183030381529060405290509392505050565b610aec6126bd565b610af46126bd565b610afe84846110db565b9050610b086126bd565b610b198260005b6020020151611196565b9050610b236126bd565b610b2e836001610b0f565b9050610b386126db565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610b7757610b79565bfe5b5080610b975760405162461bcd60e51b81526004016102f790612e17565b50919695505050505050565b8151600090819080610bc75760405162461bcd60e51b81526004016102f7906130a6565b83518114610be75760405162461bcd60e51b81526004016102f790612f91565b6006600182010260608167ffffffffffffffff81118015610c0757600080fd5b50604051908082528060200260200182016040528015610c31578160200160208202803683370190505b509050876000602002015181600081518110610c4957fe5b6020908102919091010152876001602002015181600181518110610c6957fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281600281518110610ca357fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81600381518110610cdd57fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81600481518110610d1757fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81600581518110610d5157fe5b60200260200101818152505060005b83811015610f0157868181518110610d7457fe5b6020026020010151600060028110610d8857fe5b6020020151828260060260060181518110610d9f57fe5b602002602001018181525050868181518110610db757fe5b6020026020010151600160028110610dcb57fe5b6020020151828260060260070181518110610de257fe5b602002602001018181525050878181518110610dfa57fe5b6020026020010151600160048110610e0e57fe5b6020020151828260060260080181518110610e2557fe5b602002602001018181525050878181518110610e3d57fe5b6020026020010151600060048110610e5157fe5b6020020151828260060260090181518110610e6857fe5b602002602001018181525050878181518110610e8057fe5b6020026020010151600360048110610e9457fe5b60200201518282600602600a0181518110610eab57fe5b602002602001018181525050878181518110610ec357fe5b6020026020010151600260048110610ed757fe5b60200201518282600602600b0181518110610eee57fe5b6020908102919091010152600101610d60565b50610f0a6126f9565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610f479060018901906004016131af565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f979190612b13565b90506020826020860260208601600885fa955085610fc0576000809650965050505050506109ef565b5051151598600198509650505050505050565b610fdb612695565b600084610fed57508190506001611092565b6000610ff986866102d2565b90508084604001511015611014578360029250925050611092565b8684602001511461102c578360039250925050611092565b611034612695565b6040518060800160405280866000015181526020018660200151815260200161106a84886040015161151290919063ffffffff16565b8152602001611087600188606001516102d290919063ffffffff16565b905293506000925050505b94509492505050565b60606110a5612695565b6040518060800160405280868152602001858152602001848152602001600081525090506110d2816108d7565b95945050505050565b6110e36126bd565b60606110ef848461153a565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b03815116945060008051602061320b8339815191528560008051602061320b833981519152600160c01b870908604887015160608801516001600160c01b039081169750169450925060008051602061320b83398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b61119e6126bd565b60008051602061320b83398151915282106111cb5760405162461bcd60e51b81526004016102f7906130e7565b8160006111d7826117b6565b915050600060008051602061320b833981519152806111f257fe5b838409905060008051602061320b833981519152600482089050600060008051602061320b83398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd85099050600060008051602061320b8339815191528383099050611259816117df565b905060008051602061320b833981519152828309915060008051602061320b833981519152818309915060008051602061320b833981519152828609915060008051602061320b8339815191528260008051602061320b833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe08945060008051602061320b833981519152858609915060008051602061320b833981519152858309915060008051602061320b833981519152600383089150600061131b836117b6565b9093509050801561135e578461133f578260008051602061320b8339815191520392505b5050604080518082019091529384526020840152509091506101e29050565b60008051602061320b8339815191526001870860008051602061320b83398151915203955060008051602061320b8339815191528061139957fe5b868709925060008051602061320b833981519152868409925060008051602061320b8339815191526003840892506113d0836117b6565b9093509050801561140f578461133f5750506040805180820190915293845260008051602061320b833981519152036020840152509091506101e29050565b60008051602061320b833981519152848509955060008051602061320b833981519152868709955060008051602061320b833981519152828709955060008051602061320b833981519152828709955060008051602061320b83398151915260018708955060008051602061320b833981519152868709925060008051602061320b833981519152868409925060008051602061320b8339815191526003840892506114ba836117b6565b9093509050806114dc5760405162461bcd60e51b81526004016102f79061312a565b846114f5578260008051602061320b8339815191520392505b505060408051808201909152938452602084015250909392505050565b6000828211156115345760405162461bcd60e51b81526004016102f790612f5a565b50900390565b8051606090816064820167ffffffffffffffff8111801561155a57600080fd5b506040519080825280601f01601f191660200182016040528015611585576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b848110156115cb57602081880181015183830152016115b1565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516116019190612d4e565b602060405180830381855afa15801561161e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116419190612b13565b90506000604294508484528160208501526001604085015360418401889052602060618501536002846040516116779190612d4e565b602060405180830381855afa158015611694573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116b79190612b13565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516116ee9190612d4e565b602060405180830381855afa15801561170b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061172e9190612b13565b9050806040840152808218806020860152506003604085015360418401889052602060618501536002846040516117659190612d4e565b602060405180830381855afa158015611782573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906117a59190612b13565b606084015250909695505050505050565b6000806117c2836117ea565b91508260008051602061320b833981519152838409149050915091565b60006101c982611f1f565b600060008051602061320b8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab600060008051602061320b8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f830112612727578081fd5b813561273a612735826131df565b6131b8565b818152915060208083019084810160005b8481101561277457612762888484358a0101612836565b8452928201929082019060010161274b565b505050505092915050565b6000601f8381840112612790578182fd5b823561279e612735826131df565b81815292506020808401908581016080808502880183018910156127c157600080fd5b60005b858110156128295789878401126127da57600080fd5b6127e3826131b8565b80848486018d8111156127f557600080fd5b60005b6004811015612815578235855293880193918801916001016127f8565b5091885250958501959350506001016127c4565b5050505050505092915050565b600082601f830112612846578081fd5b8135612854612735826131df565b81815291506020808301908481018184028601820187101561287557600080fd5b60005b8481101561277457813584529282019290820190600101612878565b600082601f8301126128a4578081fd5b81356128b2612735826131df565b81815291506020808301908481016080808502870183018810156128d557600080fd5b60005b858110156128fc576128ea8984612ace565b855293830193918101916001016128d8565b50505050505092915050565b600082601f830112612918578081fd5b61292260406131b8565b905080828460408501111561293657600080fd5b60005b6002811015612958578135835260209283019290910190600101612939565b50505092915050565b600082601f830112612971578081fd5b813567ffffffffffffffff811115612987578182fd5b61299a601f8201601f19166020016131b8565b91508082528360208285010111156129b157600080fd5b8060208401602084013760009082016020015292915050565b600060c082840312156129db578081fd5b6129e560c06131b8565b9050813567ffffffffffffffff808211156129ff57600080fd5b612a0b85838601612894565b83526020840135915080821115612a2157600080fd5b612a2d85838601612717565b60208401526040840135915080821115612a4657600080fd5b612a528583860161277f565b60408401526060840135915080821115612a6b57600080fd5b612a7785838601612717565b60608401526080840135915080821115612a9057600080fd5b612a9c85838601612836565b608084015260a0840135915080821115612ab557600080fd5b50612ac284828501612717565b60a08301525092915050565b600060808284031215612adf578081fd5b612ae960806131b8565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215612b24578081fd5b5051919050565b600080600080600060a08688031215612b42578081fd5b85359450602086013593506040860135925067ffffffffffffffff60608701351115612b6c578081fd5b612b7c8760608801358801612961565b915067ffffffffffffffff60808701351115612b96578081fd5b6080860135860187601f820112612bab578182fd5b612bb861273582356131df565b81358152602080820191908301845b8435811015612c49578135850160a0818e03601f19011215612be7578687fd5b612bf160406131b8565b612bfe8e60208401612ace565b815267ffffffffffffffff60a08301351115612c18578788fd5b612c2b8e602060a0850135850101612836565b60208281019190915290865294850194929092019150600101612bc7565b50508093505050509295509295909350565b60008060408385031215612c6d578182fd5b823567ffffffffffffffff80821115612c84578384fd5b9084019060c08287031215612c97578384fd5b612ca160a06131b8565b612cab8784612908565b815260408301356020820152606083013560408201526080830135606082015260a083013582811115612cdc578586fd5b612ce888828601612961565b60808301525093506020850135915080821115612d03578283fd5b50612d10858286016129ca565b9150509250929050565b60008183825b6004811015612d3f578151835260209283019290910190600101612d20565b50505060808201905092915050565b60008251815b81811015612d6e5760208186018101518583015201612d54565b81811115612d7c5782828501525b509190910192915050565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b82815260408101612de8836131ff565b60208301529392505050565b60208101612e01836131ff565b825292915050565b60ff91909116815260200190565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f41757468656e7469636974793a2066726f6d206163636f756e7420646f6573206040820152696e6f742065786973747360b01b606082015260800190565b60208082526027908201527f437265617465325472616e736665723a2072656365697665722070726f6f66206040820152661a5b9d985b1a5960ca1b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526028908201527f41757468656e7469636974793a20746f206163636f756e7420646f6573206e6f604082015267742065786973747360c01b606082015260800190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156131d757600080fd5b604052919050565b600067ffffffffffffffff8211156131f5578081fd5b5060209081020190565b80600c81106101e257fefe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a",
}

// Create2TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use Create2TransferMetaData.ABI instead.
var Create2TransferABI = Create2TransferMetaData.ABI

// Create2TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Create2TransferMetaData.Bin instead.
var Create2TransferBin = Create2TransferMetaData.Bin

// DeployCreate2Transfer deploys a new Ethereum contract, binding an instance of Create2Transfer to it.
func DeployCreate2Transfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Create2Transfer, error) {
	parsed, err := Create2TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Create2TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// Create2Transfer is an auto generated Go binding around an Ethereum contract.
type Create2Transfer struct {
	Create2TransferCaller     // Read-only binding to the contract
	Create2TransferTransactor // Write-only binding to the contract
	Create2TransferFilterer   // Log filterer for contract events
}

// Create2TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type Create2TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Create2TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Create2TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Create2TransferSession struct {
	Contract     *Create2Transfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Create2TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Create2TransferCallerSession struct {
	Contract *Create2TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// Create2TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Create2TransferTransactorSession struct {
	Contract     *Create2TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// Create2TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type Create2TransferRaw struct {
	Contract *Create2Transfer // Generic contract binding to access the raw methods on
}

// Create2TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Create2TransferCallerRaw struct {
	Contract *Create2TransferCaller // Generic read-only contract binding to access the raw methods on
}

// Create2TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Create2TransferTransactorRaw struct {
	Contract *Create2TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreate2Transfer creates a new instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2Transfer(address common.Address, backend bind.ContractBackend) (*Create2Transfer, error) {
	contract, err := bindCreate2Transfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// NewCreate2TransferCaller creates a new read-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferCaller(address common.Address, caller bind.ContractCaller) (*Create2TransferCaller, error) {
	contract, err := bindCreate2Transfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferCaller{contract: contract}, nil
}

// NewCreate2TransferTransactor creates a new write-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferTransactor(address common.Address, transactor bind.ContractTransactor) (*Create2TransferTransactor, error) {
	contract, err := bindCreate2Transfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferTransactor{contract: contract}, nil
}

// NewCreate2TransferFilterer creates a new log filterer instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferFilterer(address common.Address, filterer bind.ContractFilterer) (*Create2TransferFilterer, error) {
	contract, err := bindCreate2Transfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Create2TransferFilterer{contract: contract}, nil
}

// bindCreate2Transfer binds a generic wrapper to an already deployed contract.
func bindCreate2Transfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Create2TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.Create2TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCaller) ProcessCreate2TransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "processCreate2TransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCallerSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
