// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package create2transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProofWithReceiver is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProofWithReceiver struct {
	States                  []TypesUserState
	StateWitnesses          [][][32]byte
	PubkeysSender           [][4]*big.Int
	PubkeyWitnessesSender   [][][32]byte
	PubkeyHashesReceiver    [][32]byte
	PubkeyWitnessesReceiver [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// Create2TransferMetaData contains all meta data concerning the Create2Transfer contract.
var Create2TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysSender\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesSender\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyHashesReceiver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesReceiver\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProofWithReceiver\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processCreate2TransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613725806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063336920361461003b578063ff81749514610065575b600080fd5b61004e610049366004613086565b610085565b60405161005c9291906132d0565b60405180910390f35b610078610073366004613153565b6101ba565b60405161005c91906132ee565b600080610091846101cf565b156100a1575085905060086101b0565b60006100ac856101e7565b9050868111156100c35787600992509250506101b0565b600080856000815181106100d357fe5b6020026020010151600001516020015190506100ed612b47565b60005b8481101561017f5761010289826101fb565b91506101408c83858b856002028151811061011957fe5b60200260200101518c866002026001018151811061013357fe5b602002602001015161027e565b909c509550600086600b81111561015357fe5b14610165578b965050505050506101b0565b60808201516101759085906102d2565b93506001016100f0565b506101a38b8a84868b896002028151811061019657fe5b6020026020010151610300565b909b508b96509450505050505b9550959350505050565b60006101c683836103ae565b90505b92915050565b600060108251816101dc57fe5b06151590505b919050565b600060108251816101f457fe5b0492915050565b610203612b47565b50600460108281028401918201516008830151600c80850151600e86015195909401516040805160a08101825263ffffffff958616815293851660208501529490931693820193909352600f84841c8116600a90810a610fff9687160260608401529383901c1690920a921691909102608082015292915050565b60008061029b8787600001518789606001518a6080015189610776565b9092509050600081600b8111156102ae57fe5b146102b8576101b0565b6102c482878786610829565b976000975095505050505050565b6000828201838110156101c65760405162461bcd60e51b81526004016102f79061338b565b60405180910390fd5b6000806103268761031485600001516108bd565b80519060200120888660200151610953565b6103425760405162461bcd60e51b81526004016102f790613665565b61034a612b76565b600061035b8787876000015161096b565b9092509050600081600b81111561036e57fe5b14610380576000935091506101b09050565b61039e61038c836108bd565b805190602001208987602001516109dd565b9960009950975050505050505050565b6000806103be84608001516101e7565b905060608167ffffffffffffffff811180156103d957600080fd5b5060405190808252806020026020018201604052801561041357816020015b610400612b9e565b8152602001906001900390816103f85790505b50905060608267ffffffffffffffff8111801561042f57600080fd5b50604051908082528060200260200182016040528015610459578160200160208202803683370190505b50905060005b838110156107275760001981850301610476612b47565b608089015161048590836101fb565b90506104d889602001516104af8a6000015185815181106104a257fe5b60200260200101516108bd565b8051906020012083600001518b6020015186815181106104cb57fe5b6020026020010151610953565b6104f45760405162461bcd60e51b81526004016102f790613347565b60008860000151838151811061050657fe5b6020026020010151606001511161052f5760405162461bcd60e51b81526004016102f7906134df565b6105a189604001518960400151848151811061054757fe5b602002602001015160405160200161055f9190613212565b604051602081830303815290604052805190602001208a60000151858151811061058557fe5b6020026020010151600001518b6060015186815181106104cb57fe5b6105bd5760405162461bcd60e51b81526004016102f7906133c2565b6105f28960400151896080015184815181106105d557fe5b602002602001015183604001518b60a0015186815181106104cb57fe5b61060e5760405162461bcd60e51b81526004016102f790613516565b6106186000610a88565b8860800151838151811061062857fe5b6020026020010151141561064557600b96505050505050506101c9565b600060018960000151848151811061065957fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b858110156106b0578187828151811061069257fe5b602002602001015114156106a857600019909201915b60010161067d565b50808686815181106106be57fe5b60200260200101818152505060606106ee84848d6080015188815181106106e157fe5b6020026020010151610f83565b90506106fe8c6060015182610fc5565b88868151811061070a57fe5b60200260200101819052505050505050808060010191505061045f565b5060008061073e8860000151886040015186611084565b925090508161075557600a955050505050506101c9565b80610768576005955050505050506101c9565b506000979650505050505050565b60008061079c8861078a85600001516108bd565b80519060200120898660200151610953565b6107b85760405162461bcd60e51b81526004016102f79061355e565b6107c0612b76565b60006107d288888888600001516114b4565b9092509050600081600b8111156107e557fe5b146107f75760009350915061081e9050565b610815610803836108bd565b805190602001208a87602001516109dd565b93506000925050505b965096945050505050565b60006108668560006040516020016108419190613302565b6040516020818303038152906040528051906020012086602001518560200151610953565b6108825760405162461bcd60e51b81526004016102f79061340c565b6060610897856040015185876060015161157c565b90506108b38180519060200120866020015185602001516109dd565b9695505050505050565b80516060901580156108d157506020820151155b80156108df57506040820151155b80156108ed57506060820151155b1561091a5760006040516020016109049190613302565b60405160208183030381529060405290506101e2565b81516020808401516040808601516060870151915161093d9594919291016132a7565b6040516020818303038152906040529050919050565b6000846109618585856109dd565b1495945050505050565b610973612b76565b60008483602001511461098b575081905060046109d5565b604051806080016040528084600001518152602001846020015181526020016109c18686604001516102d290919063ffffffff16565b815260608501516020909101529150600090505b935093915050565b600083815b8351811015610a7f57600185821c16610a385781848281518110610a0257fe5b6020026020010151604051602001610a1b9291906132c2565b604051602081830303815290604052805190602001209150610a77565b838181518110610a4457fe5b602002602001015182604051602001610a5e9291906132c2565b6040516020818303038152906040528051906020012091505b6001016109e2565b50949350505050565b6000610a92612bbc565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381527f633dc4d7da7256660a892f8f1604a44b5432649cc8ec5cb3ced4c4e6ac94dd1d6020808301919091527f890740a8eb06ce9be422cb8da5cdafc2b58c0a5e24036c578de2a433c828ff7d60408301527f3b8ec09e026fdc305365dfc94e189a81b38c7597b3d941c279f042e8206e0bd860608301527fecd50eee38e386bd62be9bedb990706951b65fe053bd9d8a521af753d139e2da60808301527fdefff6d330bb5403f63b14f33b578274160de3a50df4efecf0e0db73bcdd3da560a08301527f617bdd11f7c0a11f49db22f629387a12da7596f9d1704d7465177c63d88ec7d760c08301527f292c23a9aa1d8bea7e2435e555a4a60e379a5a35f3f452bae60121073fb6eead60e08301527fe1cea92ed99acdcb045a6726b2f87107e8a61620a232cf4d7d5b5766b3952e106101008301527f7ad66c0a68c72cb89e4fb4303841966e4062a76ab97451e3b9fb526a5ceb7f826101208301527fe026cc5a4aed3c22a58cbd3d2ac754c9352c5436f638042dca99034e836365166101408301527f3d04cffd8b46a874edf5cfae63077de85f849a660426697b06a829c70dd1409c6101608301527fad676aa337a485e4728a0b240d92b3ef7b3c372d06d189322bfd5f61f1e7203e6101808301527fa2fca4a49658f9fab7aa63289c91b7c7b6c832a6d0e69334ff5b0a3483d09dab6101a08301527f4ebfd9cd7bca2505f7bef59cc1c12ecc708fff26ae4af19abe852afe9e20c8626101c08301527f2def10d13dd169f550f578bda343d9717a138562e0093b380a1120789d53cf106101e08301527f776a31db34a1a0a7caaf862cffdfff1789297ffadc380bd3d39281d340abd3ad6102008301527fe2e7610b87a5fdf3a72ebe271287d923ab990eefac64b6e59d79f8b7e08c46e36102208301527f504364a5c6858bf98fff714ab5be9de19ed31a976860efbd0e772a2efe23e2e06102408301527f4f05f4acb83f5b65168d9fef89d56d4d77b8944015e6b1eed81b0238e2d0dba36102608301527f44a6d974c75b07423e1d6d33f481916fdd45830aea11b6347e700cd8b9f0767c6102808301527fedf260291f734ddac396a956127dde4c34c0cfb8d8052f88ac139658ccf2d5076102a08301527f6075c657a105351e7f0fce53bc320113324a522e8fd52dc878c762551e01a46e6102c08301527f6ca6a3f763a9395f7da16014725ca7ee17e4815c0ff8119bf33f273dee11833b6102e08301527f1c25ef10ffeb3c7d08aa707d17286e0b0d3cbcb50f1bd3b6523b63ba3b52dd0f6103008301527ffffc43bd08273ccf135fd3cacbeef055418e09eb728d727c4d5d5c556cdea7e36103208301527fc5ab8111456b1f28f3c7a0a604b4553ce905cb019c463ee159137af83c350b226103408301527f0ff273fcbf4ae0f2bd88d6cf319ff4004f8d7dca70d4ced4e74d2c74139739e66103608301527f7fa06ba11241ddd5efdc65d4e39c9f6991b74fd4b81b62230808216c876f827c6103808301527f7e275adf313a996c7e2950cac67caba02a5ff925ebf9906b58949f3e77aec5b96103a08301527f8f6162fa308d2b3a15dc33cffac85f13ab349173121645aedf00f471663108be6103c08301527f78ccaaab73373552f207a63599de54d7d8d0c1805f86ce7da15818d09f4cff626103e0830152819084908110610f7757fe5b60200201519392505050565b606060038460000151838587606001518860800151604051602001610fad9695949392919061327f565b60405160208183030381529060405290509392505050565b610fcd612b9e565b610fd5612b9e565b610fdf84846115bc565b9050610fe9612b9e565b610ffa8260005b6020020151611677565b9050611004612b9e565b61100f836001610ff0565b9050611019612bdb565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa90508080156110585761105a565bfe5b50806110785760405162461bcd60e51b81526004016102f790613310565b50919695505050505050565b81516000908190806110a85760405162461bcd60e51b81526004016102f79061359f565b835181146110c85760405162461bcd60e51b81526004016102f79061348a565b6006600182010260608167ffffffffffffffff811180156110e857600080fd5b50604051908082528060200260200182016040528015611112578160200160208202803683370190505b50905087600060200201518160008151811061112a57fe5b602090810291909101015287600160200201518160018151811061114a57fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28160028151811061118457fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed816003815181106111be57fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec816004815181106111f857fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8160058151811061123257fe5b60200260200101818152505060005b838110156113e25786818151811061125557fe5b602002602001015160006002811061126957fe5b602002015182826006026006018151811061128057fe5b60200260200101818152505086818151811061129857fe5b60200260200101516001600281106112ac57fe5b60200201518282600602600701815181106112c357fe5b6020026020010181815250508781815181106112db57fe5b60200260200101516001600481106112ef57fe5b602002015182826006026008018151811061130657fe5b60200260200101818152505087818151811061131e57fe5b602002602001015160006004811061133257fe5b602002015182826006026009018151811061134957fe5b60200260200101818152505087818151811061136157fe5b602002602001015160036004811061137557fe5b60200201518282600602600a018151811061138c57fe5b6020026020010181815250508781815181106113a457fe5b60200260200101516002600481106113b857fe5b60200201518282600602600b01815181106113cf57fe5b6020908102919091010152600101611241565b506113eb612bf9565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca906114289060018901906004016136a8565b60206040518083038186803b15801561144057600080fd5b505afa158015611454573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611478919061306e565b90506020826020860260208601600885fa9550856114a1576000809650965050505050506109d5565b5051151598600198509650505050505050565b6114bc612b76565b6000846114ce57508190506001611573565b60006114da86866102d2565b905080846040015110156114f5578360029250925050611573565b8684602001511461150d578360039250925050611573565b611515612b76565b6040518060800160405280866000015181526020018660200151815260200161154b8488604001516119f390919063ffffffff16565b8152602001611568600188606001516102d290919063ffffffff16565b905293506000925050505b94509492505050565b6060611586612b76565b6040518060800160405280868152602001858152602001848152602001600081525090506115b3816108bd565b95945050505050565b6115c4612b9e565b60606115d08484611a1b565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b0381511694506000805160206136f9833981519152856000805160206136f9833981519152600160c01b870908604887015160608801516001600160c01b03908116975016945092506000805160206136f983398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b61167f612b9e565b6000805160206136f983398151915282106116ac5760405162461bcd60e51b81526004016102f7906135e0565b8160006116b882611c97565b91505060006000805160206136f9833981519152806116d357fe5b83840990506000805160206136f983398151915260048208905060006000805160206136f983398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd8509905060006000805160206136f9833981519152838309905061173a81611cc0565b90506000805160206136f983398151915282830991506000805160206136f983398151915281830991506000805160206136f983398151915282860991506000805160206136f9833981519152826000805160206136f9833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe0894506000805160206136f983398151915285860991506000805160206136f983398151915285830991506000805160206136f983398151915260038308915060006117fc83611c97565b9093509050801561183f578461182057826000805160206136f98339815191520392505b5050604080518082019091529384526020840152509091506101e29050565b6000805160206136f9833981519152600187086000805160206136f98339815191520395506000805160206136f98339815191528061187a57fe5b86870992506000805160206136f983398151915286840992506000805160206136f98339815191526003840892506118b183611c97565b909350905080156118f05784611820575050604080518082019091529384526000805160206136f9833981519152036020840152509091506101e29050565b6000805160206136f983398151915284850995506000805160206136f983398151915286870995506000805160206136f983398151915282870995506000805160206136f983398151915282870995506000805160206136f98339815191526001870895506000805160206136f983398151915286870992506000805160206136f983398151915286840992506000805160206136f983398151915260038408925061199b83611c97565b9093509050806119bd5760405162461bcd60e51b81526004016102f790613623565b846119d657826000805160206136f98339815191520392505b505060408051808201909152938452602084015250909392505050565b600082821115611a155760405162461bcd60e51b81526004016102f790613453565b50900390565b8051606090816064820167ffffffffffffffff81118015611a3b57600080fd5b506040519080825280601f01601f191660200182016040528015611a66576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b84811015611aac5760208188018101518383015201611a92565b5083016000815360010160608153600101600081536001810187905260210160208153506000600283604051611ae29190613246565b602060405180830381855afa158015611aff573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b22919061306e565b9050600060429450848452816020850152600160408501536041840188905260206061850153600284604051611b589190613246565b602060405180830381855afa158015611b75573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611b98919061306e565b905080602084015280821880602086015250600260408501536041840188905260206061850153600284604051611bcf9190613246565b602060405180830381855afa158015611bec573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c0f919061306e565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051611c469190613246565b602060405180830381855afa158015611c63573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c86919061306e565b606084015250909695505050505050565b600080611ca383611ccb565b9150826000805160206136f9833981519152838409149050915091565b60006101c982612400565b60006000805160206136f98339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60006000805160206136f98339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b6040518061040001604052806020906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f830112612c27578081fd5b8135612c3a612c35826136d8565b6136b1565b818152915060208083019084810160005b84811015612c7457612c62888484358a0101612d36565b84529282019290820190600101612c4b565b505050505092915050565b6000601f8381840112612c90578182fd5b8235612c9e612c35826136d8565b8181529250602080840190858101608080850288018301891015612cc157600080fd5b60005b85811015612d29578987840112612cda57600080fd5b612ce3826136b1565b80848486018d811115612cf557600080fd5b60005b6004811015612d1557823585529388019391880191600101612cf8565b509188525095850195935050600101612cc4565b5050505050505092915050565b600082601f830112612d46578081fd5b8135612d54612c35826136d8565b818152915060208083019084810181840286018201871015612d7557600080fd5b60005b84811015612c7457813584529282019290820190600101612d78565b600082601f830112612da4578081fd5b8135612db2612c35826136d8565b8181529150602080830190848101608080850287018301881015612dd557600080fd5b60005b85811015612dfc57612dea8984613029565b85529383019391810191600101612dd8565b50505050505092915050565b600082601f830112612e18578081fd5b612e2260406136b1565b9050808284604085011115612e3657600080fd5b60005b6002811015612e58578135835260209283019290910190600101612e39565b50505092915050565b600082601f830112612e71578081fd5b813567ffffffffffffffff811115612e87578182fd5b612e9a601f8201601f19166020016136b1565b9150808252836020828501011115612eb157600080fd5b8060208401602084013760009082016020015292915050565b600060c08284031215612edb578081fd5b612ee560c06136b1565b9050813567ffffffffffffffff80821115612eff57600080fd5b612f0b85838601612d94565b83526020840135915080821115612f2157600080fd5b612f2d85838601612c17565b60208401526040840135915080821115612f4657600080fd5b612f5285838601612c7f565b60408401526060840135915080821115612f6b57600080fd5b612f7785838601612c17565b60608401526080840135915080821115612f9057600080fd5b612f9c85838601612d36565b608084015260a0840135915080821115612fb557600080fd5b50612fc284828501612c17565b60a08301525092915050565b600060a08284031215612fdf578081fd5b612fe960406136b1565b9050612ff58383613029565b8152608082013567ffffffffffffffff81111561301157600080fd5b61301d84828501612d36565b60208301525092915050565b60006080828403121561303a578081fd5b61304460806136b1565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b60006020828403121561307f578081fd5b5051919050565b600080600080600060a0868803121561309d578081fd5b85359450602080870135945060408701359350606087013567ffffffffffffffff808211156130ca578384fd5b6130d68a838b01612e61565b945060808901359150808211156130eb578384fd5b508701601f810189136130fc578283fd5b803561310a612c35826136d8565b81815283810190838501865b8481101561313f5761312d8e888435890101612fce565b84529286019290860190600101613116565b505080955050505050509295509295909350565b60008060408385031215613165578182fd5b823567ffffffffffffffff8082111561317c578384fd5b9084019060c0828703121561318f578384fd5b61319960a06136b1565b6131a38784612e08565b815260408301356020820152606083013560408201526080830135606082015260a0830135828111156131d4578586fd5b6131e088828601612e61565b608083015250935060208501359150808211156131fb578283fd5b5061320885828601612eca565b9150509250929050565b60008183825b6004811015613237578151835260209283019290910190600101613218565b50505060808201905092915050565b60008251815b81811015613266576020818601810151858301520161324c565b818111156132745782828501525b509190910192915050565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b82815260408101600c83106132e157fe5b8260208301529392505050565b60208101600c83106132fc57fe5b91905290565b60ff91909116815260200190565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f41757468656e7469636974793a2066726f6d206163636f756e7420646f6573206040820152696e6f742065786973747360b01b606082015260800190565b60208082526027908201527f437265617465325472616e736665723a2072656365697665722070726f6f66206040820152661a5b9d985b1a5960ca1b606082015260800190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526028908201527f41757468656e7469636974793a20746f206163636f756e7420646f6573206e6f604082015267742065786973747360c01b606082015260800190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff811182821017156136d057600080fd5b604052919050565b600067ffffffffffffffff8211156136ee578081fd5b506020908102019056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a",
}

// Create2TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use Create2TransferMetaData.ABI instead.
var Create2TransferABI = Create2TransferMetaData.ABI

// Create2TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Create2TransferMetaData.Bin instead.
var Create2TransferBin = Create2TransferMetaData.Bin

// DeployCreate2Transfer deploys a new Ethereum contract, binding an instance of Create2Transfer to it.
func DeployCreate2Transfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Create2Transfer, error) {
	parsed, err := Create2TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Create2TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// Create2Transfer is an auto generated Go binding around an Ethereum contract.
type Create2Transfer struct {
	Create2TransferCaller     // Read-only binding to the contract
	Create2TransferTransactor // Write-only binding to the contract
	Create2TransferFilterer   // Log filterer for contract events
}

// Create2TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type Create2TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Create2TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Create2TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Create2TransferSession struct {
	Contract     *Create2Transfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Create2TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Create2TransferCallerSession struct {
	Contract *Create2TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// Create2TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Create2TransferTransactorSession struct {
	Contract     *Create2TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// Create2TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type Create2TransferRaw struct {
	Contract *Create2Transfer // Generic contract binding to access the raw methods on
}

// Create2TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Create2TransferCallerRaw struct {
	Contract *Create2TransferCaller // Generic read-only contract binding to access the raw methods on
}

// Create2TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Create2TransferTransactorRaw struct {
	Contract *Create2TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreate2Transfer creates a new instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2Transfer(address common.Address, backend bind.ContractBackend) (*Create2Transfer, error) {
	contract, err := bindCreate2Transfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// NewCreate2TransferCaller creates a new read-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferCaller(address common.Address, caller bind.ContractCaller) (*Create2TransferCaller, error) {
	contract, err := bindCreate2Transfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferCaller{contract: contract}, nil
}

// NewCreate2TransferTransactor creates a new write-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferTransactor(address common.Address, transactor bind.ContractTransactor) (*Create2TransferTransactor, error) {
	contract, err := bindCreate2Transfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferTransactor{contract: contract}, nil
}

// NewCreate2TransferFilterer creates a new log filterer instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferFilterer(address common.Address, filterer bind.ContractFilterer) (*Create2TransferFilterer, error) {
	contract, err := bindCreate2Transfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Create2TransferFilterer{contract: contract}, nil
}

// bindCreate2Transfer binds a generic wrapper to an already deployed contract.
func bindCreate2Transfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Create2TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.Create2TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCaller) ProcessCreate2TransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "processCreate2TransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCallerSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
