// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package create2transfer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProofWithReceiver is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProofWithReceiver struct {
	States                  []TypesUserState
	StateWitnesses          [][][32]byte
	PubkeysSender           [][4]*big.Int
	PubkeyWitnessesSender   [][][32]byte
	PubkeysReceiver         [][4]*big.Int
	PubkeyWitnessesReceiver [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// Create2TransferABI is the input ABI used to generate the binding from.
const Create2TransferABI = "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysSender\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesSender\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysReceiver\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesReceiver\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProofWithReceiver\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processCreate2TransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// Create2TransferBin is the compiled bytecode used for deploying new contracts.
var Create2TransferBin = "0x608060405234801561001057600080fd5b5061321a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063336920361461003b5780639c57ceb514610065575b600080fd5b61004e610049366004612b4a565b610085565b60405161005c929190612d93565b60405180910390f35b610078610073366004612c17565b6101ba565b60405161005c9190612daf565b600080610091846101cf565b156100a1575085905060086101b0565b60006100ac856101e7565b9050868111156100c35787600992509250506101b0565b600080856000815181106100d357fe5b6020026020010151600001516020015190506100ed61262a565b60005b8481101561017f5761010289826101fb565b91506101408c83858b856002028151811061011957fe5b60200260200101518c866002026001018151811061013357fe5b602002602001015161027e565b909c509550600086600a81111561015357fe5b14610165578b965050505050506101b0565b60808201516101759085906102d2565b93506001016100f0565b506101a38b8a84868b896002028151811061019657fe5b6020026020010151610300565b909b508b96509450505050505b9550959350505050565b60006101c683836103ae565b90505b92915050565b600060108251816101dc57fe5b06151590505b919050565b600060108251816101f457fe5b0492915050565b61020361262a565b50600460108281028401918201516008830151600c80850151600e86015195909401516040805160a08101825263ffffffff958616815293851660208501529490931693820193909352600f84841c8116600a90810a610fff9687160260608401529383901c1690920a921691909102608082015292915050565b60008061029b8787600001518789606001518a6080015189610765565b9092509050600081600a8111156102ae57fe5b146102b8576101b0565b6102c482878786610818565b976000975095505050505050565b6000828201838110156101c65760405162461bcd60e51b81526004016102f790612e80565b60405180910390fd5b6000806103268761031485600001516108ac565b805190602001208886602001516108eb565b6103425760405162461bcd60e51b81526004016102f790613123565b61034a612659565b600061035b87878760000151610903565b9092509050600081600a81111561036e57fe5b14610380576000935091506101b09050565b61039e61038c836108ac565b80519060200120898760200151610975565b9960009950975050505050505050565b6000806103be84608001516101e7565b905060608167ffffffffffffffff811180156103d957600080fd5b5060405190808252806020026020018201604052801561041357816020015b610400612681565b8152602001906001900390816103f85790505b50905060608267ffffffffffffffff8111801561042f57600080fd5b50604051908082528060200260200182016040528015610459578160200160208202803683370190505b50905060005b83811015610716576000198185030161047661262a565b608089015161048590836101fb565b90506104d889602001516104af8a6000015185815181106104a257fe5b60200260200101516108ac565b8051906020012083600001518b6020015186815181106104cb57fe5b60200260200101516108eb565b6104f45760405162461bcd60e51b81526004016102f790612e3c565b60008860000151838151811061050657fe5b6020026020010151606001511161052f5760405162461bcd60e51b81526004016102f790612f9d565b6105a189604001518960400151848151811061054757fe5b602002602001015160405160200161055f9190612cff565b604051602081830303815290604052805190602001208a60000151858151811061058557fe5b6020026020010151600001518b6060015186815181106104cb57fe5b6105bd5760405162461bcd60e51b81526004016102f790612eb7565b6106188960400151896080015184815181106105d557fe5b60200260200101516040516020016105ed9190612cff565b6040516020818303038152906040528051906020012083604001518b60a0015186815181106104cb57fe5b6106345760405162461bcd60e51b81526004016102f790612fd4565b600060018960000151848151811061064857fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b8581101561069f578187828151811061068157fe5b6020026020010151141561069757600019909201915b60010161066c565b50808686815181106106ad57fe5b60200260200101818152505060606106dd84848d6080015188815181106106d057fe5b6020026020010151610a20565b90506106ed8c6060015182610a62565b8886815181106106f957fe5b60200260200101819052505050505050808060010191505061045f565b5060008061072d8860000151886040015186610b21565b925090508161074457600a955050505050506101c9565b80610757576005955050505050506101c9565b506000979650505050505050565b60008061078b8861077985600001516108ac565b805190602001208986602001516108eb565b6107a75760405162461bcd60e51b81526004016102f79061301c565b6107af612659565b60006107c18888888860000151610f51565b9092509050600081600a8111156107d457fe5b146107e65760009350915061080d9050565b6108046107f2836108ac565b805190602001208a8760200151610975565b93506000925050505b965096945050505050565b60006108558560006040516020016108309190612dc4565b60405160208183030381529060405280519060200120866020015185602001516108eb565b6108715760405162461bcd60e51b81526004016102f790612f01565b60606108868560400151858760600151611019565b90506108a2818051906020012086602001518560200151610975565b9695505050505050565b606081600001518260200151836040015184606001516040516020016108d59493929190612d6a565b6040516020818303038152906040529050919050565b6000846108f9858585610975565b1495945050505050565b61090b612659565b6000848360200151146109235750819050600461096d565b604051806080016040528084600001518152602001846020015181526020016109598686604001516102d290919063ffffffff16565b815260608501516020909101529150600090505b935093915050565b600083815b8351811015610a1757600185821c166109d0578184828151811061099a57fe5b60200260200101516040516020016109b3929190612d85565b604051602081830303815290604052805190602001209150610a0f565b8381815181106109dc57fe5b6020026020010151826040516020016109f6929190612d85565b6040516020818303038152906040528051906020012091505b60010161097a565b50949350505050565b606060038460000151838587606001518860800151604051602001610a4a96959493929190612d30565b60405160208183030381529060405290509392505050565b610a6a612681565b610a72612681565b610a7c8484611059565b9050610a86612681565b610a978260005b6020020151611114565b9050610aa1612681565b610aac836001610a8d565b9050610ab661269f565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610af557610af7565bfe5b5080610b155760405162461bcd60e51b81526004016102f790612e05565b50919695505050505050565b8151600090819080610b455760405162461bcd60e51b81526004016102f79061305d565b83518114610b655760405162461bcd60e51b81526004016102f790612f48565b6006600182010260608167ffffffffffffffff81118015610b8557600080fd5b50604051908082528060200260200182016040528015610baf578160200160208202803683370190505b509050876000602002015181600081518110610bc757fe5b6020908102919091010152876001602002015181600181518110610be757fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281600281518110610c2157fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81600381518110610c5b57fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81600481518110610c9557fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81600581518110610ccf57fe5b60200260200101818152505060005b83811015610e7f57868181518110610cf257fe5b6020026020010151600060028110610d0657fe5b6020020151828260060260060181518110610d1d57fe5b602002602001018181525050868181518110610d3557fe5b6020026020010151600160028110610d4957fe5b6020020151828260060260070181518110610d6057fe5b602002602001018181525050878181518110610d7857fe5b6020026020010151600160048110610d8c57fe5b6020020151828260060260080181518110610da357fe5b602002602001018181525050878181518110610dbb57fe5b6020026020010151600060048110610dcf57fe5b6020020151828260060260090181518110610de657fe5b602002602001018181525050878181518110610dfe57fe5b6020026020010151600360048110610e1257fe5b60200201518282600602600a0181518110610e2957fe5b602002602001018181525050878181518110610e4157fe5b6020026020010151600260048110610e5557fe5b60200201518282600602600b0181518110610e6c57fe5b6020908102919091010152600101610cde565b50610e886126bd565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610ec5906001890190600401613166565b60206040518083038186803b158015610edd57600080fd5b505afa158015610ef1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f159190612b32565b90506020826020860260208601600885fa955085610f3e5760008096509650505050505061096d565b5051151598600198509650505050505050565b610f59612659565b600084610f6b57508190506001611010565b6000610f7786866102d2565b90508084604001511015610f92578360029250925050611010565b86846020015114610faa578360039250925050611010565b610fb2612659565b60405180608001604052808660000151815260200186602001518152602001610fe884886040015161149090919063ffffffff16565b8152602001611005600188606001516102d290919063ffffffff16565b905293506000925050505b94509492505050565b6060611023612659565b604051806080016040528086815260200185815260200184815260200160008152509050611050816108ac565b95945050505050565b611061612681565b606061106d84846114d2565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b0381511694506000805160206131ee833981519152856000805160206131ee833981519152600160c01b870908604887015160608801516001600160c01b03908116975016945092506000805160206131ee83398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b61111c612681565b6000805160206131ee83398151915282106111495760405162461bcd60e51b81526004016102f79061309e565b8160006111558261174e565b91505060006000805160206131ee8339815191528061117057fe5b83840990506000805160206131ee83398151915260048208905060006000805160206131ee83398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd8509905060006000805160206131ee83398151915283830990506111d781611777565b90506000805160206131ee83398151915282830991506000805160206131ee83398151915281830991506000805160206131ee83398151915282860991506000805160206131ee833981519152826000805160206131ee833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe0894506000805160206131ee83398151915285860991506000805160206131ee83398151915285830991506000805160206131ee83398151915260038308915060006112998361174e565b909350905080156112dc57846112bd57826000805160206131ee8339815191520392505b5050604080518082019091529384526020840152509091506101e29050565b6000805160206131ee833981519152600187086000805160206131ee8339815191520395506000805160206131ee8339815191528061131757fe5b86870992506000805160206131ee83398151915286840992506000805160206131ee83398151915260038408925061134e8361174e565b9093509050801561138d57846112bd575050604080518082019091529384526000805160206131ee833981519152036020840152509091506101e29050565b6000805160206131ee83398151915284850995506000805160206131ee83398151915286870995506000805160206131ee83398151915282870995506000805160206131ee83398151915282870995506000805160206131ee8339815191526001870895506000805160206131ee83398151915286870992506000805160206131ee83398151915286840992506000805160206131ee8339815191526003840892506114388361174e565b90935090508061145a5760405162461bcd60e51b81526004016102f7906130e1565b8461147357826000805160206131ee8339815191520392505b505060408051808201909152938452602084015250909392505050565b60006101c683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611782565b8051606090816064820167ffffffffffffffff811180156114f257600080fd5b506040519080825280601f01601f19166020018201604052801561151d576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b848110156115635760208188018101518383015201611549565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516115999190612d14565b602060405180830381855afa1580156115b6573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115d99190612b32565b905060006042945084845281602085015260016040850153604184018890526020606185015360028460405161160f9190612d14565b602060405180830381855afa15801561162c573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061164f9190612b32565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516116869190612d14565b602060405180830381855afa1580156116a3573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906116c69190612b32565b9050806040840152808218806020860152506003604085015360418401889052602060618501536002846040516116fd9190612d14565b602060405180830381855afa15801561171a573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061173d9190612b32565b606084015250909695505050505050565b60008061175a836117ae565b9150826000805160206131ee833981519152838409149050915091565b60006101c982611ee3565b600081848411156117a65760405162461bcd60e51b81526004016102f79190612dd2565b505050900390565b60006000805160206131ee8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60006000805160206131ee8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f8301126126eb578081fd5b81356126fe6126f982613196565b61316f565b818152915060208083019084810160005b8481101561273857612726888484358a01016127fa565b8452928201929082019060010161270f565b505050505092915050565b6000601f8381840112612754578182fd5b82356127626126f982613196565b818152925060208084019085810160808085028801830189101561278557600080fd5b60005b858110156127ed57898784011261279e57600080fd5b6127a78261316f565b80848486018d8111156127b957600080fd5b60005b60048110156127d9578235855293880193918801916001016127bc565b509188525095850195935050600101612788565b5050505050505092915050565b600082601f83011261280a578081fd5b81356128186126f982613196565b81815291506020808301908481018184028601820187101561283957600080fd5b60005b848110156127385781358452928201929082019060010161283c565b600082601f830112612868578081fd5b81356128766126f982613196565b818152915060208083019084810160808085028701830188101561289957600080fd5b60005b858110156128c0576128ae8984612aed565b8552938301939181019160010161289c565b50505050505092915050565b600082601f8301126128dc578081fd5b6128e6604061316f565b90508082846040850111156128fa57600080fd5b60005b600281101561291c5781358352602092830192909101906001016128fd565b50505092915050565b600082601f830112612935578081fd5b813567ffffffffffffffff81111561294b578182fd5b61295e601f8201601f191660200161316f565b915080825283602082850101111561297557600080fd5b8060208401602084013760009082016020015292915050565b600060c0828403121561299f578081fd5b6129a960c061316f565b9050813567ffffffffffffffff808211156129c357600080fd5b6129cf85838601612858565b835260208401359150808211156129e557600080fd5b6129f1858386016126db565b60208401526040840135915080821115612a0a57600080fd5b612a1685838601612743565b60408401526060840135915080821115612a2f57600080fd5b612a3b858386016126db565b60608401526080840135915080821115612a5457600080fd5b612a6085838601612743565b608084015260a0840135915080821115612a7957600080fd5b50612a86848285016126db565b60a08301525092915050565b600060a08284031215612aa3578081fd5b612aad604061316f565b9050612ab98383612aed565b8152608082013567ffffffffffffffff811115612ad557600080fd5b612ae1848285016127fa565b60208301525092915050565b600060808284031215612afe578081fd5b612b08608061316f565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215612b43578081fd5b5051919050565b600080600080600060a08688031215612b61578081fd5b85359450602080870135945060408701359350606087013567ffffffffffffffff80821115612b8e578384fd5b612b9a8a838b01612925565b94506080890135915080821115612baf578384fd5b508701601f81018913612bc0578283fd5b8035612bce6126f982613196565b81815283810190838501865b84811015612c0357612bf18e888435890101612a92565b84529286019290860190600101612bda565b505080955050505050509295509295909350565b60008060408385031215612c29578182fd5b823567ffffffffffffffff80821115612c40578384fd5b9084019060c08287031215612c53578384fd5b612c5d60a061316f565b612c6787846128cc565b815260408301356020820152606083013560408201526080830135606082015260a083013582811115612c98578586fd5b612ca488828601612925565b60808301525093506020850135915080821115612cbf578283fd5b50612ccc8582860161298e565b9150509250929050565b8060005b6004811015612cf9578151845260209384019390910190600101612cda565b50505050565b6000612d0b8284612cd6565b50608001919050565b60008251612d268184602087016131c1565b9190910192915050565b6000878252866020830152612d486040830187612cd6565b5060c081019390935260e0830191909152610100820152610120019392505050565b93845260208401929092526040830152606082015260800190565b918252602082015260400190565b82815260408101612da3836131b6565b60208301529392505050565b60208101612dbc836131b6565b825292915050565b60ff91909116815260200190565b6000602082528251806020840152612df18160408501602087016131c1565b601f01601f19169190910160400192915050565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602a908201527f41757468656e7469636974793a2066726f6d206163636f756e7420646f6573206040820152696e6f742065786973747360b01b606082015260800190565b60208082526027908201527f437265617465325472616e736665723a2072656365697665722070726f6f66206040820152661a5b9d985b1a5960ca1b606082015260800190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526028908201527f41757468656e7469636974793a20746f206163636f756e7420646f6573206e6f604082015267742065786973747360c01b606082015260800190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561318e57600080fd5b604052919050565b600067ffffffffffffffff8211156131ac578081fd5b5060209081020190565b80600b81106101e257fe5b60005b838110156131dc5781810151838201526020016131c4565b83811115612cf9575050600091015256fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a"

// DeployCreate2Transfer deploys a new Ethereum contract, binding an instance of Create2Transfer to it.
func DeployCreate2Transfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Create2Transfer, error) {
	parsed, err := abi.JSON(strings.NewReader(Create2TransferABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Create2TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// Create2Transfer is an auto generated Go binding around an Ethereum contract.
type Create2Transfer struct {
	Create2TransferCaller     // Read-only binding to the contract
	Create2TransferTransactor // Write-only binding to the contract
	Create2TransferFilterer   // Log filterer for contract events
}

// Create2TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type Create2TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Create2TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Create2TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Create2TransferSession struct {
	Contract     *Create2Transfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Create2TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Create2TransferCallerSession struct {
	Contract *Create2TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// Create2TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Create2TransferTransactorSession struct {
	Contract     *Create2TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// Create2TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type Create2TransferRaw struct {
	Contract *Create2Transfer // Generic contract binding to access the raw methods on
}

// Create2TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Create2TransferCallerRaw struct {
	Contract *Create2TransferCaller // Generic read-only contract binding to access the raw methods on
}

// Create2TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Create2TransferTransactorRaw struct {
	Contract *Create2TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreate2Transfer creates a new instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2Transfer(address common.Address, backend bind.ContractBackend) (*Create2Transfer, error) {
	contract, err := bindCreate2Transfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// NewCreate2TransferCaller creates a new read-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferCaller(address common.Address, caller bind.ContractCaller) (*Create2TransferCaller, error) {
	contract, err := bindCreate2Transfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferCaller{contract: contract}, nil
}

// NewCreate2TransferTransactor creates a new write-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferTransactor(address common.Address, transactor bind.ContractTransactor) (*Create2TransferTransactor, error) {
	contract, err := bindCreate2Transfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferTransactor{contract: contract}, nil
}

// NewCreate2TransferFilterer creates a new log filterer instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferFilterer(address common.Address, filterer bind.ContractFilterer) (*Create2TransferFilterer, error) {
	contract, err := bindCreate2Transfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Create2TransferFilterer{contract: contract}, nil
}

// bindCreate2Transfer binds a generic wrapper to an already deployed contract.
func bindCreate2Transfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Create2TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.Create2TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x9c57ceb5.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x9c57ceb5.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0x9c57ceb5.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCaller) ProcessCreate2TransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "processCreate2TransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCallerSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
