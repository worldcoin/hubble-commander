// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package create2transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProofWithReceiver is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProofWithReceiver struct {
	States                  []TypesUserState
	StateWitnesses          [][][32]byte
	PubkeysSender           [][4]*big.Int
	PubkeyWitnessesSender   [][][32]byte
	PubkeyHashesReceiver    [][32]byte
	PubkeyWitnessesReceiver [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// Create2TransferMetaData contains all meta data concerning the Create2Transfer contract.
var Create2TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysSender\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesSender\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyHashesReceiver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesReceiver\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProofWithReceiver\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processCreate2TransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "",
}

// Create2TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use Create2TransferMetaData.ABI instead.
var Create2TransferABI = Create2TransferMetaData.ABI

// Create2TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Create2TransferMetaData.Bin instead.
var Create2TransferBin = Create2TransferMetaData.Bin

// DeployCreate2Transfer deploys a new Ethereum contract, binding an instance of Create2Transfer to it.
func DeployCreate2Transfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Create2Transfer, error) {
	parsed, err := Create2TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Create2TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// Create2Transfer is an auto generated Go binding around an Ethereum contract.
type Create2Transfer struct {
	Create2TransferCaller     // Read-only binding to the contract
	Create2TransferTransactor // Write-only binding to the contract
	Create2TransferFilterer   // Log filterer for contract events
}

// Create2TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type Create2TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Create2TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Create2TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Create2TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Create2TransferSession struct {
	Contract     *Create2Transfer  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Create2TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Create2TransferCallerSession struct {
	Contract *Create2TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// Create2TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Create2TransferTransactorSession struct {
	Contract     *Create2TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// Create2TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type Create2TransferRaw struct {
	Contract *Create2Transfer // Generic contract binding to access the raw methods on
}

// Create2TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Create2TransferCallerRaw struct {
	Contract *Create2TransferCaller // Generic read-only contract binding to access the raw methods on
}

// Create2TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Create2TransferTransactorRaw struct {
	Contract *Create2TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCreate2Transfer creates a new instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2Transfer(address common.Address, backend bind.ContractBackend) (*Create2Transfer, error) {
	contract, err := bindCreate2Transfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Create2Transfer{Create2TransferCaller: Create2TransferCaller{contract: contract}, Create2TransferTransactor: Create2TransferTransactor{contract: contract}, Create2TransferFilterer: Create2TransferFilterer{contract: contract}}, nil
}

// NewCreate2TransferCaller creates a new read-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferCaller(address common.Address, caller bind.ContractCaller) (*Create2TransferCaller, error) {
	contract, err := bindCreate2Transfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferCaller{contract: contract}, nil
}

// NewCreate2TransferTransactor creates a new write-only instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferTransactor(address common.Address, transactor bind.ContractTransactor) (*Create2TransferTransactor, error) {
	contract, err := bindCreate2Transfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Create2TransferTransactor{contract: contract}, nil
}

// NewCreate2TransferFilterer creates a new log filterer instance of Create2Transfer, bound to a specific deployed contract.
func NewCreate2TransferFilterer(address common.Address, filterer bind.ContractFilterer) (*Create2TransferFilterer, error) {
	contract, err := bindCreate2Transfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Create2TransferFilterer{contract: contract}, nil
}

// bindCreate2Transfer binds a generic wrapper to an already deployed contract.
func bindCreate2Transfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Create2TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.Create2TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.Create2TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Create2Transfer *Create2TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Create2Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Create2Transfer *Create2TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Create2Transfer *Create2TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Create2Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0xff817495.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof) view returns(uint8)
func (_Create2Transfer *Create2TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProofWithReceiver) (uint8, error) {
	return _Create2Transfer.Contract.CheckSignature(&_Create2Transfer.CallOpts, common, proof)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCaller) ProcessCreate2TransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Create2Transfer.contract.Call(opts, &out, "processCreate2TransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessCreate2TransferCommit is a free data retrieval call binding the contract method 0x33692036.
//
// Solidity: function processCreate2TransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Create2Transfer *Create2TransferCallerSession) ProcessCreate2TransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Create2Transfer.Contract.ProcessCreate2TransferCommit(&_Create2Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
