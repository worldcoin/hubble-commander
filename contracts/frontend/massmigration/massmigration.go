// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package massmigration

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OffchainMassMigration is an auto generated low-level Go binding around an user-defined struct.
type OffchainMassMigration struct {
	TxType    *big.Int
	FromIndex *big.Int
	Amount    *big.Int
	Fee       *big.Int
	SpokeID   *big.Int
	Nonce     *big.Int
}

// TxMassMigration is an auto generated low-level Go binding around an user-defined struct.
type TxMassMigration struct {
	FromIndex *big.Int
	Amount    *big.Int
	Fee       *big.Int
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// FrontendMassMigrationABI is the input ABI used to generate the binding from.
const FrontendMassMigrationABI = "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedTxs\",\"type\":\"bytes[]\"}],\"name\":\"compress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.MassMigration\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"decompress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"structTx.MassMigration[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spokeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.MassMigration\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"from\",\"type\":\"tuple\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"freshState\",\"type\":\"bytes\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"signBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"senderEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"validateAndApply\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newSender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newReceiver\",\"type\":\"bytes\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// FrontendMassMigrationBin is the compiled bytecode used for deploying new contracts.
var FrontendMassMigrationBin = "0x608060405234801561001057600080fd5b50613db0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806373b3ba351161006657806373b3ba3514610123578063997ee23814610145578063d8b1728e14610165578063e5c5e9a314610178578063fa3204711461019857610093565b806308909a83146100985780635cd3f3a1146100c15780635ef63f4f146100e15780635f7dde2214610101575b600080fd5b6100ab6100a63660046135f3565b6101ab565b6040516100b891906138a8565b60405180910390f35b6100d46100cf3660046134d6565b6101cc565b6040516100b8919061380e565b6100f46100ef366004613515565b6102de565b6040516100b89190613867565b61011461010f36600461358b565b61044a565b6040516100b8939291906138bb565b610136610131366004613423565b610569565b6040516100b893929190613880565b61015861015336600461332b565b6105d1565b6040516100b891906138f0565b6100ab6101733660046134d6565b61061c565b61018b6101863660046134d6565b6106b4565b6040516100b89190613c42565b6100ab6101a63660046132bd565b610702565b60606101c46101bf3684900384018461360a565b610822565b90505b919050565b6060600061020f84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061086d92505050565b90506060816001600160401b038111801561022957600080fd5b5060405190808252806020026020018201604052801561026357816020015b610250612df1565b8152602001906001900390816102485790505b50905060005b828110156102d3576102b48187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506108819050565b8282815181106102c057fe5b6020908102919091010152600101610269565b509150505b92915050565b60006102e8612e12565b61032787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108e792505050565b90506103368160400151610923565b506103448160600151610923565b5061034d612df1565b6040518060600160405280836020015181526020018360400151815260200183606001518152509050606061038b828460a001518560800151610992565b90506000806103f28960028060200260405190810160405280929190826002602002808284376000920191909152505060408051608081810190925291508b9060049083908390808284376000920191909152506103ed91508b9050876109d4565b610a93565b925090508161041c5760405162461bcd60e51b815260040161041390613a45565b60405180910390fd5b806104395760405162461bcd60e51b815260040161041390613c1b565b5060019a9950505050505050505050565b6060806000610457612e12565b61049686868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108e792505050565b90506104a0612e48565b6104df89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610c5692505050565b90506000816020015190506104fe818460400151856060015185610c88565b94509150600084600a81111561051057fe5b1461053b5761051e82610d50565b604080516020810190915260008152909650945061055f92505050565b61054e8260000151828560400151610d79565b945061055982610d50565b95505050505b9450945094915050565b600060606000610577612e12565b610580876108e7565b905061058a612df1565b60405180606001604052808360200151815260200183604001518152602001836060015181525090506105bf89828989610db0565b94509450945050509450945094915050565b60006105db612e70565b6040518060a001604052808a815260200188815260200187815260200186815260200184815250905061060f818986610e22565b9998505050505050505050565b6060610626612e12565b61066584848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108e792505050565b905061066f612df1565b60405180606001604052808360200151815260200183604001518152602001836060015181525090506106ab818360a001518460800151610992565b95945050505050565b6106bc612e12565b6106fb83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108e792505050565b9392505050565b606080826001600160401b038111801561071b57600080fd5b5060405190808252806020026020018201604052801561075557816020015b610742612df1565b81526020019060019003908161073a5790505b50905060005b81518110156108105761076c612e12565b6107c786868481811061077b57fe5b905060200281019061078d9190613cae565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108e792505050565b90506040518060600160405280826020015181526020018260400151815260200182606001518152508383815181106107fc57fe5b60209081029190910101525060010161075b565b5061081a8161114a565b949350505050565b6060816000015182602001518360400151846060015185608001518660a0015160405160200161085796959493929190613c86565b6040516020818303038152906040529050919050565b6000600882518161087a57fe5b0492915050565b610889612df1565b506008908102919091016004810151600682015191909201516040805160608101825263ffffffff9094168452610fff808416600c94851c600f908116600a90810a9290920260208801529184169390941c1690920a029082015290565b6108ef612e12565b81806020019051810190610903919061369a565b60a087015260808601526060850152604084015260208301528152919050565b60008181805b600f8110156109655782158015906109425750600a8306155b1561095857600a8304925060018201915061095d565b610965565b600101610929565b50610fff8211156109885760405162461bcd60e51b815260040161041390613aed565b600c1b0192915050565b6060600584600001518560200151866040015186866040516020016109bc969594939291906137be565b60405160208183030381529060405290509392505050565b6109dc612ea7565b6109e4612ea7565b6109ee848461129d565b90506109f8612ea7565b610a098260005b6020020151611358565b9050610a13612ea7565b610a1e8360016109ff565b9050610a28612ec5565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610a6757610a69565bfe5b5080610a875760405162461bcd60e51b815260040161041390613907565b50919695505050505050565b600080610a9e612ee3565b50604080516101808101825286518152602080880151818301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2828401527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060808401919091527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec60808401527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60a0840152865160c08401528682015160e084015290870151610100830152865161012083015286015161014082015290850151610160820152610b90612f02565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610bcb906002906004016138fe565b60206040518083038186803b158015610be357600080fd5b505afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b919061340b565b9050600060208361018086600886fa905080610c41576000809550955050505050610c4e565b5050511515925060019150505b935093915050565b610c5e612e48565b81806020019051810190610c729190613665565b6060850152604084015260208301528152919050565b610c90612e48565b600084610ca257508190506001610d47565b6000610cae86866116d4565b90508084604001511015610cc9578360029250925050610d47565b86846020015114610ce1578360039250925050610d47565b610ce9612e48565b60405180608001604052808660000151815260200186602001518152602001610d1f8488604001516116f990919063ffffffff16565b8152602001610d3c600188606001516116d490919063ffffffff16565b905293506000925050505b94509492505050565b60608160000151826020015183604001518460600151604051602001610857949392919061376d565b6060610d83612e48565b6040518060800160405280868152602001858152602001848152602001600081525090506106ab81610d50565b600060606000610dd08787600001518789602001518a6040015189611721565b9093509050600081600a811115610de357fe5b14610dfe57604080516020810190915260008152915061055f565b8351516020870151610e1291908790610d79565b9150600090509450945094915050565b600080610e32856080015161086d565b90506060816001600160401b0381118015610e4c57600080fd5b50604051908082528060200260200182016040528015610e8657816020015b610e73612ea7565b815260200190600190039081610e6b5790505b5090506060826001600160401b0381118015610ea157600080fd5b50604051908082528060200260200182016040528015610ecb578160200160208202803683370190505b50905060005b838110156110fa5760001981850301610ee8612df1565b60808a0151610ef79083610881565b9050610f4a8a60200151610f218b600001518581518110610f1457fe5b6020026020010151610d50565b8051906020012083600001518c602001518681518110610f3d57fe5b60200260200101516117d4565b610f665760405162461bcd60e51b81526004016104139061393e565b600089600001518381518110610f7857fe5b60200260200101516060015111610fa15760405162461bcd60e51b815260040161041390613a75565b6110138a604001518a604001518481518110610fb957fe5b6020026020010151604051602001610fd1919061371d565b604051602081830303815290604052805190602001208b600001518581518110610ff757fe5b6020026020010151600001518c606001518681518110610f3d57fe5b61102f5760405162461bcd60e51b815260040161041390613b94565b600060018a60000151848151811061104357fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b8581101561109a578187828151811061107c57fe5b6020026020010151141561109257600019909201915b600101611067565b50808686815181106110a857fe5b60200260200101818152505060606110c184848d610992565b90506110d18d60600151826109d4565b8886815181106110dd57fe5b602002602001018190525050505050508080600101915050610ed1565b5060008061111189600001518960400151866117ec565b925090508161112857600a955050505050506106fb565b8061113b576005955050505050506106fb565b50600098975050505050505050565b805160609081600882026001600160401b038111801561116957600080fd5b506040519080825280601f01601f191660200182016040528015611194576020820181803683370190505b50905060005b828110156112955760008582815181106111b057fe5b602002602001015160000151905060006111e08784815181106111cf57fe5b602002602001015160200151610923565b905060006112048885815181106111f357fe5b602002602001015160400151610923565b9050606083838360405160200161121d93929190613788565b60408051601f1981840301815291905290506008850260005b60088110156112835782818151811061124b57fe5b602001015160f81c60f81b888383018151811061126457fe5b60200101906001600160f81b031916908160001a905350600101611236565b50506001909401935061119a92505050565b509392505050565b6112a5612ea7565b60606112b18484611c1b565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020613d8483398151915285600080516020613d84833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020613d8483398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b611360612ea7565b600080516020613d84833981519152821061138d5760405162461bcd60e51b815260040161041390613b51565b81600061139982611e96565b9150506000600080516020613d84833981519152806113b457fe5b8384099050600080516020613d848339815191526004820890506000600080516020613d8483398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020613d84833981519152838309905061141b81611ebf565b9050600080516020613d848339815191528283099150600080516020613d848339815191528183099150600080516020613d848339815191528286099150600080516020613d8483398151915282600080516020613d84833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020613d848339815191528586099150600080516020613d848339815191528583099150600080516020613d8483398151915260038308915060006114dd83611e96565b9093509050801561152057846115015782600080516020613d848339815191520392505b5050604080518082019091529384526020840152509091506101c79050565b600080516020613d8483398151915260018708600080516020613d84833981519152039550600080516020613d848339815191528061155b57fe5b8687099250600080516020613d848339815191528684099250600080516020613d8483398151915260038408925061159283611e96565b909350905080156115d1578461150157505060408051808201909152938452600080516020613d84833981519152036020840152509091506101c79050565b600080516020613d848339815191528485099550600080516020613d848339815191528687099550600080516020613d848339815191528287099550600080516020613d848339815191528287099550600080516020613d84833981519152600187089550600080516020613d848339815191528687099250600080516020613d848339815191528684099250600080516020613d8483398151915260038408925061167c83611e96565b90935090508061169e5760405162461bcd60e51b815260040161041390613bd9565b846116b75782600080516020613d848339815191520392505b505060408051808201909152938452602084015250909392505050565b6000828201838110156106fb5760405162461bcd60e51b815260040161041390613982565b60008282111561171b5760405162461bcd60e51b8152600401610413906139b9565b50900390565b600080611747886117358560000151610d50565b805190602001208986602001516117d4565b6117635760405162461bcd60e51b815260040161041390613aac565b61176b612e48565b600061177d8888888860000151610c88565b9092509050600081600a81111561179057fe5b146117a2576000935091506117c99050565b6117c06117ae83610d50565b805190602001208a8760200151611eca565b93506000925050505b965096945050505050565b6000846117e2858585611eca565b1495945050505050565b81516000908190806118105760405162461bcd60e51b815260040161041390613b10565b835181146118305760405162461bcd60e51b8152600401610413906139f0565b600660018201026060816001600160401b038111801561184f57600080fd5b50604051908082528060200260200182016040528015611879578160200160208202803683370190505b50905087600060200201518160008151811061189157fe5b60209081029190910101528760016020020151816001815181106118b157fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2816002815181106118eb57fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed8160038151811061192557fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec8160048151811061195f57fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8160058151811061199957fe5b60200260200101818152505060005b83811015611b49578681815181106119bc57fe5b60200260200101516000600281106119d057fe5b60200201518282600602600601815181106119e757fe5b6020026020010181815250508681815181106119ff57fe5b6020026020010151600160028110611a1357fe5b6020020151828260060260070181518110611a2a57fe5b602002602001018181525050878181518110611a4257fe5b6020026020010151600160048110611a5657fe5b6020020151828260060260080181518110611a6d57fe5b602002602001018181525050878181518110611a8557fe5b6020026020010151600060048110611a9957fe5b6020020151828260060260090181518110611ab057fe5b602002602001018181525050878181518110611ac857fe5b6020026020010151600360048110611adc57fe5b60200201518282600602600a0181518110611af357fe5b602002602001018181525050878181518110611b0b57fe5b6020026020010151600260048110611b1f57fe5b60200201518282600602600b0181518110611b3657fe5b60209081029190910101526001016119a8565b50611b52612f02565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90611b8f9060018901906004016138fe565b60206040518083038186803b158015611ba757600080fd5b505afa158015611bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bdf919061340b565b90506020826020860260208601600885fa955085611c0857600080965096505050505050610c4e565b5051151598600198509650505050505050565b805160609081606482016001600160401b0381118015611c3a57600080fd5b506040519080825280601f01601f191660200182016040528015611c65576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b84811015611cab5760208188018101518383015201611c91565b5083016000815360010160608153600101600081536001810187905260210160208153506000600283604051611ce19190613751565b602060405180830381855afa158015611cfe573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d21919061340b565b9050600060429450848452816020850152600160408501536041840188905260206061850153600284604051611d579190613751565b602060405180830381855afa158015611d74573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d97919061340b565b905080602084015280821880602086015250600260408501536041840188905260206061850153600284604051611dce9190613751565b602060405180830381855afa158015611deb573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e0e919061340b565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051611e459190613751565b602060405180830381855afa158015611e62573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e85919061340b565b606084015250909695505050505050565b600080611ea283611f75565b915082600080516020613d84833981519152838409149050915091565b60006101c4826126aa565b600083815b8351811015611f6c57600185821c16611f255781848281518110611eef57fe5b6020026020010151604051602001611f08929190613872565b604051602081830303815290604052805190602001209150611f64565b838181518110611f3157fe5b602002602001015182604051602001611f4b929190613872565b6040516020818303038152906040528051906020012091505b600101611ecf565b50949350505050565b6000600080516020613d848339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020613d848339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180606001604052806000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060a00160405280612e83612ea7565b81526000602082018190526040820181905260608083019190915260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f830112612f30578081fd5b8135612f43612f3e82613d18565b613cf2565b818152915060208083019084810160005b84811015612f7d57612f6b888484358a010161303f565b84529282019290820190600101612f54565b505050505092915050565b6000601f8381840112612f99578182fd5b8235612fa7612f3e82613d18565b8181529250602080840190858101608080850288018301891015612fca57600080fd5b60005b85811015613032578987840112612fe357600080fd5b612fec82613cf2565b80848486018d811115612ffe57600080fd5b60005b600481101561301e57823585529388019391880191600101613001565b509188525095850195935050600101612fcd565b5050505050505092915050565b600082601f83011261304f578081fd5b813561305d612f3e82613d18565b81815291506020808301908481018184028601820187101561307e57600080fd5b60005b84811015612f7d57813584529282019290820190600101613081565b600082601f8301126130ad578081fd5b81356130bb612f3e82613d18565b81815291506020808301908481016080808502870183018810156130de57600080fd5b60005b85811015613105576130f38984613278565b855293830193918101916001016130e1565b50505050505092915050565b60008083601f840112613122578182fd5b5081356001600160401b03811115613138578182fd5b60208301915083602082850101111561315057600080fd5b9250929050565b600082601f830112613167578081fd5b81356001600160401b0381111561317c578182fd5b61318f601f8201601f1916602001613cf2565b91508082528360208285010111156131a657600080fd5b8060208401602084013760009082016020015292915050565b6000608082840312156131d0578081fd5b6131da6080613cf2565b905081356001600160401b03808211156131f357600080fd5b6131ff8583860161309d565b8352602084013591508082111561321557600080fd5b61322185838601612f20565b6020840152604084013591508082111561323a57600080fd5b61324685838601612f88565b6040840152606084013591508082111561325f57600080fd5b5061326c84828501612f20565b60608301525092915050565b600060808284031215613289578081fd5b6132936080613cf2565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b600080602083850312156132cf578182fd5b82356001600160401b03808211156132e5578384fd5b818501915085601f8301126132f8578384fd5b813581811115613306578485fd5b8660208083028501011115613319578485fd5b60209290920196919550909350505050565b6000806000806000806000610100888a031215613346578283fd5b88601f890112613354578283fd5b6002613362612f3e82613d37565b808a60408c018d811115613374578788fd5b875b85811015613394578235855260209485019490920191600101613376565b50919a50503591506001600160401b039050808211156133b2578485fd5b6133be8b838c016131bf565b975060608a0135965060808a0135955060a08a0135945060c08a0135935060e08a01359150808211156133ef578283fd5b506133fc8a828b01613157565b91505092959891949750929550565b60006020828403121561341c578081fd5b5051919050565b60008060008060808587031215613438578182fd5b8435935060208501356001600160401b0380821115613455578384fd5b61346188838901613157565b945060408701359350606087013591508082111561347d578283fd5b9086019060a08289031215613490578283fd5b61349a6040613cf2565b6134a48984613278565b81526080830135828111156134b7578485fd5b6134c38a82860161303f565b6020830152509598949750929550505050565b600080602083850312156134e8578182fd5b82356001600160401b038111156134fd578283fd5b61350985828601613111565b90969095509350505050565b6000806000806000610100868803121561352d578283fd5b85356001600160401b03811115613542578384fd5b61354e88828901613111565b9096509450506060860187811115613564578384fd5b60208701935060e087018881111561357a578283fd5b959894975092955091933592915050565b600080600080604085870312156135a0578182fd5b84356001600160401b03808211156135b6578384fd5b6135c288838901613111565b909650945060208701359150808211156135da578384fd5b506135e787828801613111565b95989497509550505050565b600060c08284031215613604578081fd5b50919050565b600060c0828403121561361b578081fd5b61362560c0613cf2565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b6000806000806080858703121561367a578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008060008060008060c087890312156136b2578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600081518084526136fb816020860160208601613d53565b601f01601f19169290920160200192915050565b600b811061371957fe5b9052565b60008183825b6004811015613742578151835260209283019290910190600101613723565b50505060808201905092915050565b60008251613763818460208701613d53565b9190910192915050565b93845260208401929092526040830152606082015260800190565b60e09390931b6001600160e01b031916835260f091821b6001600160f01b03199081166004850152911b16600682015260080190565b60f89690961b6001600160f81b031916865260e094851b6001600160e01b0319908116600188015260058701949094526025860192909252831b8216604585015290911b166049820152604d0190565b602080825282518282018190526000919060409081850190868401855b8281101561385a578151805185528681015187860152850151858501526060909301929085019060010161382b565b5091979650505050505050565b901515815260200190565b918252602082015260400190565b60008482526060602083015261389960608301856136e3565b905061081a604083018461370f565b6000602082526106fb60208301846136e3565b6000606082526138ce60608301866136e3565b82810360208401526138e081866136e3565b91505061081a604083018461370f565b602081016102d8828461370f565b90815260200190565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b602080825260169082015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b604082015260600190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b602080825260099082015268109859081a5b9c1d5d60ba1b604082015260600190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526025908201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604082015264786973747360d81b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b6020808252600d908201526c426164207369676e617475726560981b604082015260600190565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6000808335601e19843603018112613cc4578283fd5b8301803591506001600160401b03821115613cdd578283fd5b60200191503681900382131561315057600080fd5b6040518181016001600160401b0381118282101715613d1057600080fd5b604052919050565b60006001600160401b03821115613d2d578081fd5b5060209081020190565b60006001600160401b03821115613d4c578081fd5b5060200290565b60005b83811015613d6e578181015183820152602001613d56565b83811115613d7d576000848401525b5050505056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a"

// DeployFrontendMassMigration deploys a new Ethereum contract, binding an instance of FrontendMassMigration to it.
func DeployFrontendMassMigration(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FrontendMassMigration, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendMassMigrationABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FrontendMassMigrationBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FrontendMassMigration{FrontendMassMigrationCaller: FrontendMassMigrationCaller{contract: contract}, FrontendMassMigrationTransactor: FrontendMassMigrationTransactor{contract: contract}, FrontendMassMigrationFilterer: FrontendMassMigrationFilterer{contract: contract}}, nil
}

// FrontendMassMigration is an auto generated Go binding around an Ethereum contract.
type FrontendMassMigration struct {
	FrontendMassMigrationCaller     // Read-only binding to the contract
	FrontendMassMigrationTransactor // Write-only binding to the contract
	FrontendMassMigrationFilterer   // Log filterer for contract events
}

// FrontendMassMigrationCaller is an auto generated read-only Go binding around an Ethereum contract.
type FrontendMassMigrationCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendMassMigrationTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FrontendMassMigrationTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendMassMigrationFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FrontendMassMigrationFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendMassMigrationSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FrontendMassMigrationSession struct {
	Contract     *FrontendMassMigration // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// FrontendMassMigrationCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FrontendMassMigrationCallerSession struct {
	Contract *FrontendMassMigrationCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// FrontendMassMigrationTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FrontendMassMigrationTransactorSession struct {
	Contract     *FrontendMassMigrationTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// FrontendMassMigrationRaw is an auto generated low-level Go binding around an Ethereum contract.
type FrontendMassMigrationRaw struct {
	Contract *FrontendMassMigration // Generic contract binding to access the raw methods on
}

// FrontendMassMigrationCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FrontendMassMigrationCallerRaw struct {
	Contract *FrontendMassMigrationCaller // Generic read-only contract binding to access the raw methods on
}

// FrontendMassMigrationTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FrontendMassMigrationTransactorRaw struct {
	Contract *FrontendMassMigrationTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFrontendMassMigration creates a new instance of FrontendMassMigration, bound to a specific deployed contract.
func NewFrontendMassMigration(address common.Address, backend bind.ContractBackend) (*FrontendMassMigration, error) {
	contract, err := bindFrontendMassMigration(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FrontendMassMigration{FrontendMassMigrationCaller: FrontendMassMigrationCaller{contract: contract}, FrontendMassMigrationTransactor: FrontendMassMigrationTransactor{contract: contract}, FrontendMassMigrationFilterer: FrontendMassMigrationFilterer{contract: contract}}, nil
}

// NewFrontendMassMigrationCaller creates a new read-only instance of FrontendMassMigration, bound to a specific deployed contract.
func NewFrontendMassMigrationCaller(address common.Address, caller bind.ContractCaller) (*FrontendMassMigrationCaller, error) {
	contract, err := bindFrontendMassMigration(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendMassMigrationCaller{contract: contract}, nil
}

// NewFrontendMassMigrationTransactor creates a new write-only instance of FrontendMassMigration, bound to a specific deployed contract.
func NewFrontendMassMigrationTransactor(address common.Address, transactor bind.ContractTransactor) (*FrontendMassMigrationTransactor, error) {
	contract, err := bindFrontendMassMigration(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendMassMigrationTransactor{contract: contract}, nil
}

// NewFrontendMassMigrationFilterer creates a new log filterer instance of FrontendMassMigration, bound to a specific deployed contract.
func NewFrontendMassMigrationFilterer(address common.Address, filterer bind.ContractFilterer) (*FrontendMassMigrationFilterer, error) {
	contract, err := bindFrontendMassMigration(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FrontendMassMigrationFilterer{contract: contract}, nil
}

// bindFrontendMassMigration binds a generic wrapper to an already deployed contract.
func bindFrontendMassMigration(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendMassMigrationABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendMassMigration *FrontendMassMigrationRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendMassMigration.Contract.FrontendMassMigrationCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendMassMigration *FrontendMassMigrationRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendMassMigration.Contract.FrontendMassMigrationTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendMassMigration *FrontendMassMigrationRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendMassMigration.Contract.FrontendMassMigrationTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendMassMigration *FrontendMassMigrationCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendMassMigration.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendMassMigration *FrontendMassMigrationTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendMassMigration.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendMassMigration *FrontendMassMigrationTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendMassMigration.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x997ee238.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, uint256 spokeID, bytes txs) view returns(uint8)
func (_FrontendMassMigration *FrontendMassMigrationCaller) CheckSignature(opts *bind.CallOpts, signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, spokeID *big.Int, txs []byte) (uint8, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "checkSignature", signature, proof, stateRoot, accountRoot, domain, spokeID, txs)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x997ee238.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, uint256 spokeID, bytes txs) view returns(uint8)
func (_FrontendMassMigration *FrontendMassMigrationSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, spokeID *big.Int, txs []byte) (uint8, error) {
	return _FrontendMassMigration.Contract.CheckSignature(&_FrontendMassMigration.CallOpts, signature, proof, stateRoot, accountRoot, domain, spokeID, txs)
}

// CheckSignature is a free data retrieval call binding the contract method 0x997ee238.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, uint256 spokeID, bytes txs) view returns(uint8)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, spokeID *big.Int, txs []byte) (uint8, error) {
	return _FrontendMassMigration.Contract.CheckSignature(&_FrontendMassMigration.CallOpts, signature, proof, stateRoot, accountRoot, domain, spokeID, txs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCaller) Compress(opts *bind.CallOpts, encodedTxs [][]byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "compress", encodedTxs)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendMassMigration.Contract.Compress(&_FrontendMassMigration.CallOpts, encodedTxs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendMassMigration.Contract.Compress(&_FrontendMassMigration.CallOpts, encodedTxs)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendMassMigration *FrontendMassMigrationCaller) Decode(opts *bind.CallOpts, encodedTx []byte) (OffchainMassMigration, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "decode", encodedTx)

	if err != nil {
		return *new(OffchainMassMigration), err
	}

	out0 := *abi.ConvertType(out[0], new(OffchainMassMigration)).(*OffchainMassMigration)

	return out0, err

}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendMassMigration *FrontendMassMigrationSession) Decode(encodedTx []byte) (OffchainMassMigration, error) {
	return _FrontendMassMigration.Contract.Decode(&_FrontendMassMigration.CallOpts, encodedTx)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Decode(encodedTx []byte) (OffchainMassMigration, error) {
	return _FrontendMassMigration.Contract.Decode(&_FrontendMassMigration.CallOpts, encodedTx)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256)[])
func (_FrontendMassMigration *FrontendMassMigrationCaller) Decompress(opts *bind.CallOpts, txs []byte) ([]TxMassMigration, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "decompress", txs)

	if err != nil {
		return *new([]TxMassMigration), err
	}

	out0 := *abi.ConvertType(out[0], new([]TxMassMigration)).(*[]TxMassMigration)

	return out0, err

}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256)[])
func (_FrontendMassMigration *FrontendMassMigrationSession) Decompress(txs []byte) ([]TxMassMigration, error) {
	return _FrontendMassMigration.Contract.Decompress(&_FrontendMassMigration.CallOpts, txs)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256)[])
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Decompress(txs []byte) ([]TxMassMigration, error) {
	return _FrontendMassMigration.Contract.Decompress(&_FrontendMassMigration.CallOpts, txs)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCaller) Encode(opts *bind.CallOpts, _tx OffchainMassMigration) ([]byte, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "encode", _tx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationSession) Encode(_tx OffchainMassMigration) ([]byte, error) {
	return _FrontendMassMigration.Contract.Encode(&_FrontendMassMigration.CallOpts, _tx)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Encode(_tx OffchainMassMigration) ([]byte, error) {
	return _FrontendMassMigration.Contract.Encode(&_FrontendMassMigration.CallOpts, _tx)
}

// Process is a free data retrieval call binding the contract method 0x73b3ba35.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from) pure returns(bytes32 newRoot, bytes freshState, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationCaller) Process(opts *bind.CallOpts, stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof) (struct {
	NewRoot    [32]byte
	FreshState []byte
	Result     uint8
}, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "process", stateRoot, encodedTx, tokenID, from)

	outstruct := new(struct {
		NewRoot    [32]byte
		FreshState []byte
		Result     uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.FreshState = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Result = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// Process is a free data retrieval call binding the contract method 0x73b3ba35.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from) pure returns(bytes32 newRoot, bytes freshState, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof) (struct {
	NewRoot    [32]byte
	FreshState []byte
	Result     uint8
}, error) {
	return _FrontendMassMigration.Contract.Process(&_FrontendMassMigration.CallOpts, stateRoot, encodedTx, tokenID, from)
}

// Process is a free data retrieval call binding the contract method 0x73b3ba35.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from) pure returns(bytes32 newRoot, bytes freshState, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof) (struct {
	NewRoot    [32]byte
	FreshState []byte
	Result     uint8
}, error) {
	return _FrontendMassMigration.Contract.Process(&_FrontendMassMigration.CallOpts, stateRoot, encodedTx, tokenID, from)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCaller) SignBytes(opts *bind.CallOpts, encodedTx []byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "signBytes", encodedTx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendMassMigration.Contract.SignBytes(&_FrontendMassMigration.CallOpts, encodedTx)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendMassMigration.Contract.SignBytes(&_FrontendMassMigration.CallOpts, encodedTx)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendMassMigration *FrontendMassMigrationCaller) Validate(opts *bind.CallOpts, encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "validate", encodedTx, signature, pubkey, domain)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendMassMigration *FrontendMassMigrationSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendMassMigration.Contract.Validate(&_FrontendMassMigration.CallOpts, encodedTx, signature, pubkey, domain)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendMassMigration.Contract.Validate(&_FrontendMassMigration.CallOpts, encodedTx, signature, pubkey, domain)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationCaller) ValidateAndApply(opts *bind.CallOpts, senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	var out []interface{}
	err := _FrontendMassMigration.contract.Call(opts, &out, "validateAndApply", senderEncoded, encodedTx)

	outstruct := new(struct {
		NewSender   []byte
		NewReceiver []byte
		Result      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewSender = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.NewReceiver = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Result = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationSession) ValidateAndApply(senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendMassMigration.Contract.ValidateAndApply(&_FrontendMassMigration.CallOpts, senderEncoded, encodedTx)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendMassMigration *FrontendMassMigrationCallerSession) ValidateAndApply(senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendMassMigration.Contract.ValidateAndApply(&_FrontendMassMigration.CallOpts, senderEncoded, encodedTx)
}
