// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package create2transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OffchainCreate2Transfer is an auto generated low-level Go binding around an user-defined struct.
type OffchainCreate2Transfer struct {
	TxType     *big.Int
	FromIndex  *big.Int
	ToIndex    *big.Int
	ToPubkeyID *big.Int
	Amount     *big.Int
	Fee        *big.Int
	Nonce      *big.Int
}

// OffchainCreate2TransferWithPub is an auto generated low-level Go binding around an user-defined struct.
type OffchainCreate2TransferWithPub struct {
	TxType    *big.Int
	FromIndex *big.Int
	ToPubkey  [32]byte
	Amount    *big.Int
	Fee       *big.Int
	Nonce     *big.Int
}

// TxCreate2Transfer is an auto generated low-level Go binding around an user-defined struct.
type TxCreate2Transfer struct {
	FromIndex  *big.Int
	ToIndex    *big.Int
	ToPubkeyID *big.Int
	Amount     *big.Int
	Fee        *big.Int
}

// TypesSignatureProofWithReceiver is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProofWithReceiver struct {
	States                  []TypesUserState
	StateWitnesses          [][][32]byte
	PubkeysSender           [][4]*big.Int
	PubkeyWitnessesSender   [][][32]byte
	PubkeyHashesReceiver    [][32]byte
	PubkeyWitnessesReceiver [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// FrontendCreate2TransferMetaData contains all meta data concerning the FrontendCreate2Transfer contract.
var FrontendCreate2TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeysSender\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesSender\",\"type\":\"bytes32[][]\"},{\"internalType\":\"bytes32[]\",\"name\":\"pubkeyHashesReceiver\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnessesReceiver\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProofWithReceiver\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedTxs\",\"type\":\"bytes[]\"}],\"name\":\"compress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Create2Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decodeWithPub\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"toPubkey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Create2TransferWithPub\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"decompress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"structTx.Create2Transfer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toPubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Create2Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"toPubkey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Create2TransferWithPub\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"encodeWithPub\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTxWithPub\",\"type\":\"bytes\"}],\"name\":\"signBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkeySender\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"pubkeyHashReceiver\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"senderEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"validateAndApply\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newSender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newReceiver\",\"type\":\"bytes\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614a5d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063bdb83e8a11610071578063bdb83e8a1461015d578063c62070c614610170578063d8b1728e14610190578063e48411d3146101a3578063e5c5e9a314610202578063fa3204711461026b57600080fd5b80635cd3f3a1146100ae5780635f7dde22146100d75780636cc2d754146100f95780638090e82d14610119578063898407611461013c575b600080fd5b6100c16100bc3660046143a6565b61027e565b6040516100ce919061475d565b60405180910390f35b6100ea6100e5366004614464565b6103be565b6040516100ce939291906147f2565b61010c61010736600461455b565b6104e4565b6040516100ce91906147df565b61012c6101273660046143e5565b6104fd565b60405190151581526020016100ce565b61014f61014a36600461430f565b6106b2565b6040516100ce9291906147cb565b61010c61016b3660046144cc565b61071f565b61018361017e36600461417f565b610738565b6040516100ce9190614827565b61010c61019e3660046143a6565b61077a565b6101b66101b13660046143a6565b610800565b6040516100ce9190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6102156102103660046143a6565b610882565b6040516100ce9190600060e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015292915050565b61010c610279366004614110565b610901565b606060006102c184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a7292505050565b90506000816001600160401b038111156102eb57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561032457816020015b610311613c8e565b8152602001906001900390816103095790505b50905060005b828110156103b3576103758187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050610a829050565b82828151811061039557634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806103ab906149bf565b91505061032a565b509150505b92915050565b60608060008061040386868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0592505050565b9050600061044689898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b7e92505050565b90506000816020015190506104658184608001518560a0015185610bd3565b94509150600084600b81111561048b57634e487b7160e01b600052602160045260246000fd5b146104b65761049982610cac565b60408051602081019091526000815290965094506104da92505050565b6104c98360600151828560800151610d3d565b94506104d482610cac565b95505050505b9450945094915050565b60606103b86104f83684900384018461456c565b610d6e565b60008061053f88888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0592505050565b905061054e8160800151610dd4565b5061055c8160a00151610dd4565b5060006040518060a00160405280836020015181526020018360400151815260200183606001518152602001836080015181526020018360a00151815250905060006105ad828460c0015188610e82565b90506000806106148a60028060200260405190810160405280929190826002602002808284376000920191909152505060408051608081810190925291508c90600490839083908082843760009201919091525061060f91508b905087610ed7565b610fb3565b92509050816106635760405162461bcd60e51b8152602060048201526016602482015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b60448201526064015b60405180910390fd5b806106a05760405162461bcd60e51b815260206004820152600d60248201526c426164207369676e617475726560981b604482015260640161065a565b5060019b9a5050505050505050505050565b60008060006106c087610b05565b905060006040518060a00160405280836020015181526020018360400151815260200183606001518152602001836080015181526020018360a00151815250905061070e898289898961127c565b9350935050505b9550959350505050565b60606103b8610733368490038401846144e3565b6112e4565b6000806040518060a0016040528089815260200187815260200186815260200185815260200184815250905061076e818861133c565b98975050505050505050565b606060006107bd84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197d92505050565b90506107c7613c8e565b60208201518152606080830151908201526080808301519082015260a082015160408301516107f7918391610e82565b95945050505050565b61083c6040518060c001604052806000815260200160008152602001600080191681526020016000815260200160008152602001600081525090565b61087b83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061197d92505050565b9392505050565b6108c26040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61087b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0592505050565b60606000826001600160401b0381111561092b57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561096457816020015b610951613c8e565b8152602001906001900390816109495790505b50905060005b8151811015610a605760006109e486868481811061099857634e487b7160e01b600052603260045260246000fd5b90506020028101906109aa9190614835565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b0592505050565b90506040518060a00160405280826020015181526020018260400151815260200182606001518152602001826080015181526020018260a00151815250838381518110610a4157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250508080610a58906149bf565b91505061096a565b50610a6a816119ed565b949350505050565b6000601082516103b8919061492e565b610a8a613c8e565b50600460108281028401918201516008830151600c80850151600e86015195909401516040805160a08101825263ffffffff958616815293851660208501529490931693820193909352600f84841c8116600a90810a610fff9687160260608401529383901c1690920a921691909102608082015292915050565b610b456040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81806020019051810190610b59919061466c565b60c088015260a087015260808601526060850152604084015260208301528152919050565b610ba96040518060800160405280600081526020016000815260200160008152602001600081525090565b81806020019051810190610bbd9190614637565b6060850152604084015260208301528152919050565b610bfe6040518060800160405280600081526020016000815260200160008152602001600081525090565b600084610c1057508190506001610ca3565b6000610c1c8686611c86565b90508084604001511015610c37578360029250925050610ca3565b86846020015114610c4f578360039250925050610ca3565b60408051608081018252855181526020808701519082015285820151600092820190610c7b9085611c92565b8152602001610c9860018860600151611c8690919063ffffffff16565b905293506000925050505b94509492505050565b8051606090158015610cc057506020820151155b8015610cce57506040820151155b8015610cdc57506060820151155b15610d04576040805160006020820152015b6040516020818303038152906040529050919050565b815160208084015160408086015160608701519151610cee95949192910193845260208401929092526040830152606082015260800190565b606060006040518060800160405280868152602001858152602001848152602001600081525090506107f781610cac565b6060816000015182602001518360400151846060015185608001518660a001518760c00151604051602001610cee9796959493929190968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60008181805b600f811015610e35578215801590610dfa5750610df8600a846149da565b155b15610e1e57610e0a600a8461492e565b9250610e17600183614916565b9150610e23565b610e35565b80610e2d816149bf565b915050610dda565b50610fff821115610e745760405162461bcd60e51b8152602060048201526009602482015268109859081a5b9c1d5d60ba1b604482015260640161065a565b610a6a82600c83901b614916565b825160608481015160808087015160408051600360208201529081019590955284840186905290840186905260a084019190915260c08301529060e00160405160208183030381529060405290509392505050565b610edf613cbd565b6000610eeb8484611c9e565b90506000610eff82825b6020020151611d59565b90506000610f0e836001610ef5565b9050610f18613cdb565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610f5757610f59565bfe5b5080610fa75760405162461bcd60e51b815260206004820152601760248201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604482015260640161065a565b50919695505050505050565b600080600060405180610180016040528087600060028110610fe557634e487b7160e01b600052603260045260246000fd5b602002015181526020018760016002811061101057634e487b7160e01b600052603260045260246000fd5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8152602001856000600281106110d357634e487b7160e01b600052603260045260246000fd5b60200201518152602001856001600281106110fe57634e487b7160e01b600052603260045260246000fd5b602002015181526020018660016004811061112957634e487b7160e01b600052603260045260246000fd5b602002015181526020018660006004811061115457634e487b7160e01b600052603260045260246000fd5b602002015181526020018660036004811061117f57634e487b7160e01b600052603260045260246000fd5b60200201518152602001866002600481106111aa57634e487b7160e01b600052603260045260246000fd5b6020020151905290506111bb613cf9565b60405163273cfc6560e11b815260026004820152600090739f19c6456854fda109dfc2b9ad45d9bf147c855790634e79f8ca9060240160206040518083038186803b15801561120957600080fd5b505afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124191906142f7565b9050600060208361018086600886fa905080611267576000809550955050505050611274565b5050511515925060019150505b935093915050565b6000806112998787600001518789606001518a608001518961213d565b9092509050600081600b8111156112c057634e487b7160e01b600052602160045260246000fd5b146112ca57610715565b6112d682878786612237565b976000975095505050505050565b6060816000015182602001518360400151846060015185608001518660a00151604051602001610cee96959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b60008061134c8460800151610a72565b90506000816001600160401b0381111561137657634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156113af57816020015b61139c613cbd565b8152602001906001900390816113945790505b5090506000826001600160401b038111156113da57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611403578160200160208202803683370190505b50905060005b8381101561192e576000600161141f8387614961565b6114299190614961565b90506000611444828a60800151610a8290919063ffffffff16565b90506114bf89602001516114828a60000151858151811061147557634e487b7160e01b600052603260045260246000fd5b6020026020010151610cac565b8051906020012083600001518b6020015186815181106114b257634e487b7160e01b600052603260045260246000fd5b6020026020010151612308565b6115175760405162461bcd60e51b8152602060048201526024808201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960448201526333b732b960e11b606482015260840161065a565b60008860000151838151811061153d57634e487b7160e01b600052603260045260246000fd5b602002602001015160600151116115965760405162461bcd60e51b815260206004820152601860248201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604482015260640161065a565b6116448960400151896040015184815181106115c257634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016115da919061470d565b604051602081830303815290604052805190602001208a60000151858151811061161457634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518b6060015186815181106114b257634e487b7160e01b600052603260045260246000fd5b6116a35760405162461bcd60e51b815260206004820152602a60248201527f41757468656e7469636974793a2066726f6d206163636f756e7420646f6573206044820152696e6f742065786973747360b01b606482015260840161065a565b6117008960400151896080015184815181106116cf57634e487b7160e01b600052603260045260246000fd5b602002602001015183604001518b60a0015186815181106114b257634e487b7160e01b600052603260045260246000fd5b61175d5760405162461bcd60e51b815260206004820152602860248201527f41757468656e7469636974793a20746f206163636f756e7420646f6573206e6f604482015267742065786973747360c01b606482015260840161065a565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56360001b886080015183815181106117a557634e487b7160e01b600052603260045260246000fd5b602002602001015114156117c257600b96505050505050506103b8565b60006001896000015184815181106117ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151606001516118009190614961565b82519091506000906118199066038d7ea4c68000614916565b905060005b85811015611875578187828151811061184757634e487b7160e01b600052603260045260246000fd5b60200260200101511415611863578261185f816149a8565b9350505b8061186d816149bf565b91505061181e565b508086868151811061189757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060006118db84848d6080015188815181106118ce57634e487b7160e01b600052603260045260246000fd5b6020026020010151610e82565b90506118eb8c6060015182610ed7565b88868151811061190b57634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050508080611926906149bf565b915050611409565b506000806119458860000151886040015186612320565b925090508161195c57600a955050505050506103b8565b8061196f576005955050505050506103b8565b506000979650505050505050565b6119b96040518060c001604052806000815260200160008152602001600080191681526020016000815260200160008152602001600081525090565b818060200190518101906119cd91906145ee565b60a087015260808601526060850152604084015260208301528152919050565b805160609060006119ff826010614942565b6001600160401b03811115611a2457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611a4e576020820181803683370190505b50905060005b82811015611c7e576000858281518110611a7e57634e487b7160e01b600052603260045260246000fd5b60200260200101516000015190506000868381518110611aae57634e487b7160e01b600052603260045260246000fd5b60200260200101516020015190506000878481518110611ade57634e487b7160e01b600052603260045260246000fd5b60200260200101516040015190506000888581518110611b0e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015190506000898681518110611b3e57634e487b7160e01b600052603260045260246000fd5b60200260200101516080015190506000858585611b5a86610dd4565b611b6386610dd4565b6040516001600160e01b031960e096871b8116602083015294861b851660248201529290941b90921660288201526001600160f01b031960f092831b8116602c8301529290911b909116602e82015260300160408051601f1981840301815291905290506000611bd4601089614942565b905060005b6010811015611c6357828181518110611c0257634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168a611c1c8484614916565b81518110611c3a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611c5b816149bf565b915050611bd9565b50505050505050508080611c76906149bf565b915050611a54565b509392505050565b600061087b8284614916565b600061087b8284614961565b611ca6613cbd565b6000611cb28484612a45565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020614a3183398151915285600080516020614a31833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020614a3183398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b611d61613cbd565b600080516020614a318339815191528210611dca5760405162461bcd60e51b815260206004820152602360248201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604482015262195b9d60ea1b606482015260840161065a565b816000611dd682612cef565b9150506000600080516020614a3183398151915280611e0557634e487b7160e01b600052601260045260246000fd5b8384099050600080516020614a318339815191526004820890506000600080516020614a3183398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020614a318339815191528383099050611e6c81612d18565b9050600080516020614a318339815191528283099150600080516020614a318339815191528183099150600080516020614a318339815191528286099150600080516020614a31833981519152611ed183600080516020614a31833981519152614961565b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020614a318339815191528586099150600080516020614a318339815191528583099150600080516020614a318339815191526003830891506000611f3583612cef565b90935090508015611f7d5784611f6057611f5d83600080516020614a31833981519152614961565b92505b505060408051808201909152938452602084015250909392505050565b600080516020614a3183398151915260018708611fa890600080516020614a31833981519152614961565b9550600080516020614a318339815191528687099250600080516020614a318339815191528684099250600080516020614a31833981519152600384089250611ff083612cef565b909350905080156120185784611f6057611f5d83600080516020614a31833981519152614961565b600080516020614a318339815191528485099550600080516020614a318339815191528687099550600080516020614a318339815191528287099550600080516020614a318339815191528287099550600080516020614a31833981519152600187089550600080516020614a318339815191528687099250600080516020614a318339815191528684099250600080516020614a318339815191526003840892506120c383612cef565b9093509050806121205760405162461bcd60e51b815260206004820152602260248201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960448201526137b760f11b606482015260840161065a565b84611f6057611f5d83600080516020614a31833981519152614961565b600080612163886121518560000151610cac565b80519060200120898660200151612308565b6121b95760405162461bcd60e51b815260206004820152602160248201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736044820152601d60fa1b606482015260840161065a565b6000806121cc8888888860000151610bd3565b9092509050600081600b8111156121f357634e487b7160e01b600052602160045260246000fd5b146122055760009350915061222c9050565b61222361221183610cac565b805190602001208a8760200151612d23565b93506000925050505b965096945050505050565b6040805160006020820181905291612271918791016040516020818303038152906040528051906020012086602001518560200151612308565b6122cd5760405162461bcd60e51b815260206004820152602760248201527f437265617465325472616e736665723a2072656365697665722070726f6f66206044820152661a5b9d985b1a5960ca1b606482015260840161065a565b60006122e28560400151858760600151610d3d565b90506122fe818051906020012086602001518560200151612d23565b9695505050505050565b600084612316858585612d23565b1495945050505050565b815160009081908061237e5760405162461bcd60e51b815260206004820152602160248201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726044820152606f60f81b606482015260840161065a565b835181146123ec5760405162461bcd60e51b815260206004820152603560248201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604482015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606482015260840161065a565b60006123f9826001614916565b612404906006614942565b90506000816001600160401b0381111561242e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612457578160200160208202803683370190505b50905087600060200201518160008151811061248357634e487b7160e01b600052603260045260246000fd5b60209081029190910101528760016020020151816001815181106124b757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28160028151811061250557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed8160038151811061255357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec816004815181106125a157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d816005815181106125ef57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060005b8381101561296b5786818151811061262657634e487b7160e01b600052603260045260246000fd5b602002602001015160006002811061264e57634e487b7160e01b600052603260045260246000fd5b60200201518261265f836006614942565b61266a906006614916565b8151811061268857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508681815181106126b457634e487b7160e01b600052603260045260246000fd5b60200260200101516001600281106126dc57634e487b7160e01b600052603260045260246000fd5b6020020151826126ed836006614942565b6126f8906007614916565b8151811061271657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061274257634e487b7160e01b600052603260045260246000fd5b602002602001015160016004811061276a57634e487b7160e01b600052603260045260246000fd5b60200201518261277b836006614942565b612786906008614916565b815181106127a457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781815181106127d057634e487b7160e01b600052603260045260246000fd5b60200260200101516000600481106127f857634e487b7160e01b600052603260045260246000fd5b602002015182612809836006614942565b612814906009614916565b8151811061283257634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061285e57634e487b7160e01b600052603260045260246000fd5b602002602001015160036004811061288657634e487b7160e01b600052603260045260246000fd5b602002015182612897836006614942565b6128a290600a614916565b815181106128c057634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781815181106128ec57634e487b7160e01b600052603260045260246000fd5b602002602001015160026004811061291457634e487b7160e01b600052603260045260246000fd5b602002015182612925836006614942565b61293090600b614916565b8151811061294e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612963816149bf565b9150506125fe565b50612974613cf9565b6000739f19c6456854fda109dfc2b9ad45d9bf147c8557634e79f8ca61299b876001614916565b6040518263ffffffff1660e01b81526004016129b991815260200190565b60206040518083038186803b1580156129d157600080fd5b505afa1580156129e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0991906142f7565b90506020826020860260208601600885fa955085612a3257600080965096505050505050611274565b5051151598600198509650505050505050565b80516060906000612a57826020614916565b612a62906040614916565b612a6d906004614916565b6001600160401b03811115612a9257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612abc576020820181803683370190505b5060408051606080825260808201909252919250600091906020820181803683370190505090506060820160005b84811015612b045760208188018101518383015201612aea565b5083016000815360010160608153600101600081536001810187905260210160208153506000600283604051612b3a9190614741565b602060405180830381855afa158015612b57573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612b7a91906142f7565b9050600060429450848452816020850152600160408501536041840188905260206061850153600284604051612bb09190614741565b602060405180830381855afa158015612bcd573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612bf091906142f7565b905080602084015280821880602086015250600260408501536041840188905260206061850153600284604051612c279190614741565b602060405180830381855afa158015612c44573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612c6791906142f7565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051612c9e9190614741565b602060405180830381855afa158015612cbb573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612cde91906142f7565b606084015250909695505050505050565b600080612cfb83612e12565b915082600080516020614a31833981519152838409149050915091565b60006103b882613547565b600083815b8351811015612e0957600185821c16612d9b5781848281518110612d5c57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612d7e929190918252602082015260400190565b604051602081830303815290604052805190602001209150612df7565b838181518110612dbb57634e487b7160e01b600052603260045260246000fd5b602002602001015182604051602001612dde929190918252602082015260400190565b6040516020818303038152906040528051906020012091505b80612e01816149bf565b915050612d28565b50949350505050565b6000600080516020614a318339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020614a318339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6000604051604081018181106001600160401b0382111715613d3b57613d3b614a1a565b80604052508091508284604085011115613d5457600080fd5b60005b6002811015613d76578135835260209283019290910190600101613d57565b50505092915050565b600082601f830112613d8f578081fd5b81356020613da4613d9f836148f3565b6148c3565b80838252828201915082860187848660051b8901011115613dc3578586fd5b855b85811015613e035781356001600160401b03811115613de2578788fd5b613df08a87838c0101613ec2565b8552509284019290840190600101613dc5565b5090979650505050505050565b6000601f8381840112613e21578182fd5b82356020613e31613d9f836148f3565b80838252828201915082870188848660071b8a01011115613e50578687fd5b865b85811015613eb4578987830112613e67578788fd5b613e6f6148a1565b8083608085018d811115613e81578b8cfd5b8b5b6004811015613ea057823585529389019391890191600101613e83565b509187525094860194925050600101613e52565b509098975050505050505050565b600082601f830112613ed2578081fd5b81356020613ee2613d9f836148f3565b80838252828201915082860187848660051b8901011115613f01578586fd5b855b85811015613e0357813584529284019290840190600101613f03565b600082601f830112613f2f578081fd5b81356020613f3f613d9f836148f3565b80838252828201915082860187848660071b8901011115613f5e578586fd5b855b85811015613e0357613f7289836140ac565b84529284019260809190910190600101613f60565b60008083601f840112613f98578182fd5b5081356001600160401b03811115613fae578182fd5b602083019150836020828501011115613fc657600080fd5b9250929050565b600082601f830112613fdd578081fd5b81356001600160401b03811115613ff657613ff6614a1a565b614009601f8201601f19166020016148c3565b81815284602083860101111561401d578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215614048578081fd5b604051604081016001600160401b03828210818311171561406b5761406b614a1a565b8160405282935061407c86866140ac565b8352608085013591508082111561409257600080fd5b5061409f85828601613ec2565b6020830152505092915050565b6000608082840312156140bd578081fd5b604051608081018181106001600160401b03821117156140df576140df614a1a565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b60008060208385031215614122578182fd5b82356001600160401b0380821115614138578384fd5b818501915085601f83011261414b578384fd5b813581811115614159578485fd5b8660208260051b850101111561416d578485fd5b60209290920196919550909350505050565b60008060008060008060e08789031215614197578182fd5b87601f8801126141a5578182fd5b6141af8888613d17565b955060408701356001600160401b03808211156141ca578384fd5b9088019060c0828b0312156141dd578384fd5b6141e5614879565b8235828111156141f3578586fd5b6141ff8c828601613f1f565b825250602083013582811115614213578586fd5b61421f8c828601613d7f565b602083015250604083013582811115614236578586fd5b6142428c828601613e10565b604083015250606083013582811115614259578586fd5b6142658c828601613d7f565b60608301525060808301358281111561427c578586fd5b6142888c828601613ec2565b60808301525060a08301358281111561429f578586fd5b6142ab8c828601613d7f565b60a08301525080975050606089013595506080890135945060a0890135935060c08901359150808211156142dd578283fd5b506142ea89828a01613fcd565b9150509295509295509295565b600060208284031215614308578081fd5b5051919050565b600080600080600060a08688031215614326578283fd5b8535945060208601356001600160401b0380821115614343578485fd5b61434f89838a01613fcd565b955060408801359450606088013591508082111561436b578283fd5b61437789838a01614037565b9350608088013591508082111561438c578283fd5b5061439988828901614037565b9150509295509295909350565b600080602083850312156143b8578182fd5b82356001600160401b038111156143cd578283fd5b6143d985828601613f87565b90969095509350505050565b60008060008060008061012087890312156143fe578384fd5b86356001600160401b03811115614413578485fd5b61441f89828a01613f87565b9097509550506060870188811115614435578485fd5b60208801945060e088018981111561444b578384fd5b9699959850939693953594610100909401359392505050565b60008060008060408587031215614479578182fd5b84356001600160401b038082111561448f578384fd5b61449b88838901613f87565b909650945060208701359150808211156144b3578384fd5b506144c087828801613f87565b95989497509550505050565b600060c082840312156144dd578081fd5b50919050565b600060c082840312156144f4578081fd5b60405160c081018181106001600160401b038211171561451657614516614a1a565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b600060e082840312156144dd578081fd5b600060e0828403121561457d578081fd5b60405160e081018181106001600160401b038211171561459f5761459f614a1a565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201528091505092915050565b60008060008060008060c08789031215614606578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000806000806080858703121561464c578182fd5b505082516020840151604085015160609095015191969095509092509050565b600080600080600080600060e0888a031215614686578485fd5b5050855160208701516040880151606089015160808a015160a08b015160c0909b0151949c939b50919990985090965094509092509050565b600081518084526146d7816020860160208601614978565b601f01601f19169290920160200192915050565b600c811061470957634e487b7160e01b600052602160045260246000fd5b9052565b60008183825b6004811015614732578151835260209283019290910190600101614713565b50505060808201905092915050565b60008251614753818460208701614978565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156147be5781518051855286810151878601528581015186860152606080820151908601526080908101519085015260a0909301929085019060010161477a565b5091979650505050505050565b8281526040810161087b60208301846146eb565b60208152600061087b60208301846146bf565b60608152600061480560608301866146bf565b828103602084015261481781866146bf565b915050610a6a60408301846146eb565b602081016103b882846146eb565b6000808335601e1984360301811261484b578283fd5b8301803591506001600160401b03821115614864578283fd5b602001915036819003821315613fc657600080fd5b60405160c081016001600160401b038111828210171561489b5761489b614a1a565b60405290565b604051608081016001600160401b038111828210171561489b5761489b614a1a565b604051601f8201601f191681016001600160401b03811182821017156148eb576148eb614a1a565b604052919050565b60006001600160401b0382111561490c5761490c614a1a565b5060051b60200190565b60008219821115614929576149296149ee565b500190565b60008261493d5761493d614a04565b500490565b600081600019048311821515161561495c5761495c6149ee565b500290565b600082821015614973576149736149ee565b500390565b60005b8381101561499357818101518382015260200161497b565b838111156149a2576000848401525b50505050565b6000816149b7576149b76149ee565b506000190190565b60006000198214156149d3576149d36149ee565b5060010190565b6000826149e9576149e9614a04565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c6343000804000a",
}

// FrontendCreate2TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use FrontendCreate2TransferMetaData.ABI instead.
var FrontendCreate2TransferABI = FrontendCreate2TransferMetaData.ABI

// FrontendCreate2TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FrontendCreate2TransferMetaData.Bin instead.
var FrontendCreate2TransferBin = FrontendCreate2TransferMetaData.Bin

// DeployFrontendCreate2Transfer deploys a new Ethereum contract, binding an instance of FrontendCreate2Transfer to it.
func DeployFrontendCreate2Transfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FrontendCreate2Transfer, error) {
	parsed, err := FrontendCreate2TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FrontendCreate2TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FrontendCreate2Transfer{FrontendCreate2TransferCaller: FrontendCreate2TransferCaller{contract: contract}, FrontendCreate2TransferTransactor: FrontendCreate2TransferTransactor{contract: contract}, FrontendCreate2TransferFilterer: FrontendCreate2TransferFilterer{contract: contract}}, nil
}

// FrontendCreate2Transfer is an auto generated Go binding around an Ethereum contract.
type FrontendCreate2Transfer struct {
	FrontendCreate2TransferCaller     // Read-only binding to the contract
	FrontendCreate2TransferTransactor // Write-only binding to the contract
	FrontendCreate2TransferFilterer   // Log filterer for contract events
}

// FrontendCreate2TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type FrontendCreate2TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendCreate2TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FrontendCreate2TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendCreate2TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FrontendCreate2TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendCreate2TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FrontendCreate2TransferSession struct {
	Contract     *FrontendCreate2Transfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// FrontendCreate2TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FrontendCreate2TransferCallerSession struct {
	Contract *FrontendCreate2TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// FrontendCreate2TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FrontendCreate2TransferTransactorSession struct {
	Contract     *FrontendCreate2TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// FrontendCreate2TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type FrontendCreate2TransferRaw struct {
	Contract *FrontendCreate2Transfer // Generic contract binding to access the raw methods on
}

// FrontendCreate2TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FrontendCreate2TransferCallerRaw struct {
	Contract *FrontendCreate2TransferCaller // Generic read-only contract binding to access the raw methods on
}

// FrontendCreate2TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FrontendCreate2TransferTransactorRaw struct {
	Contract *FrontendCreate2TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFrontendCreate2Transfer creates a new instance of FrontendCreate2Transfer, bound to a specific deployed contract.
func NewFrontendCreate2Transfer(address common.Address, backend bind.ContractBackend) (*FrontendCreate2Transfer, error) {
	contract, err := bindFrontendCreate2Transfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FrontendCreate2Transfer{FrontendCreate2TransferCaller: FrontendCreate2TransferCaller{contract: contract}, FrontendCreate2TransferTransactor: FrontendCreate2TransferTransactor{contract: contract}, FrontendCreate2TransferFilterer: FrontendCreate2TransferFilterer{contract: contract}}, nil
}

// NewFrontendCreate2TransferCaller creates a new read-only instance of FrontendCreate2Transfer, bound to a specific deployed contract.
func NewFrontendCreate2TransferCaller(address common.Address, caller bind.ContractCaller) (*FrontendCreate2TransferCaller, error) {
	contract, err := bindFrontendCreate2Transfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendCreate2TransferCaller{contract: contract}, nil
}

// NewFrontendCreate2TransferTransactor creates a new write-only instance of FrontendCreate2Transfer, bound to a specific deployed contract.
func NewFrontendCreate2TransferTransactor(address common.Address, transactor bind.ContractTransactor) (*FrontendCreate2TransferTransactor, error) {
	contract, err := bindFrontendCreate2Transfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendCreate2TransferTransactor{contract: contract}, nil
}

// NewFrontendCreate2TransferFilterer creates a new log filterer instance of FrontendCreate2Transfer, bound to a specific deployed contract.
func NewFrontendCreate2TransferFilterer(address common.Address, filterer bind.ContractFilterer) (*FrontendCreate2TransferFilterer, error) {
	contract, err := bindFrontendCreate2Transfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FrontendCreate2TransferFilterer{contract: contract}, nil
}

// bindFrontendCreate2Transfer binds a generic wrapper to an already deployed contract.
func bindFrontendCreate2Transfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendCreate2TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendCreate2Transfer *FrontendCreate2TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendCreate2Transfer.Contract.FrontendCreate2TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendCreate2Transfer *FrontendCreate2TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendCreate2Transfer.Contract.FrontendCreate2TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendCreate2Transfer *FrontendCreate2TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendCreate2Transfer.Contract.FrontendCreate2TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendCreate2Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendCreate2Transfer *FrontendCreate2TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendCreate2Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendCreate2Transfer *FrontendCreate2TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendCreate2Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0xc62070c6.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) CheckSignature(opts *bind.CallOpts, signature [2]*big.Int, proof TypesSignatureProofWithReceiver, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "checkSignature", signature, proof, stateRoot, accountRoot, domain, txs)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0xc62070c6.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProofWithReceiver, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendCreate2Transfer.Contract.CheckSignature(&_FrontendCreate2Transfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// CheckSignature is a free data retrieval call binding the contract method 0xc62070c6.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][],bytes32[],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProofWithReceiver, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendCreate2Transfer.Contract.CheckSignature(&_FrontendCreate2Transfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Compress(opts *bind.CallOpts, encodedTxs [][]byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "compress", encodedTxs)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.Compress(&_FrontendCreate2Transfer.CallOpts, encodedTxs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.Compress(&_FrontendCreate2Transfer.CallOpts, encodedTxs)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Decode(opts *bind.CallOpts, encodedTx []byte) (OffchainCreate2Transfer, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "decode", encodedTx)

	if err != nil {
		return *new(OffchainCreate2Transfer), err
	}

	out0 := *abi.ConvertType(out[0], new(OffchainCreate2Transfer)).(*OffchainCreate2Transfer)

	return out0, err

}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Decode(encodedTx []byte) (OffchainCreate2Transfer, error) {
	return _FrontendCreate2Transfer.Contract.Decode(&_FrontendCreate2Transfer.CallOpts, encodedTx)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Decode(encodedTx []byte) (OffchainCreate2Transfer, error) {
	return _FrontendCreate2Transfer.Contract.Decode(&_FrontendCreate2Transfer.CallOpts, encodedTx)
}

// DecodeWithPub is a free data retrieval call binding the contract method 0xe48411d3.
//
// Solidity: function decodeWithPub(bytes encodedTx) pure returns((uint256,uint256,bytes32,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) DecodeWithPub(opts *bind.CallOpts, encodedTx []byte) (OffchainCreate2TransferWithPub, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "decodeWithPub", encodedTx)

	if err != nil {
		return *new(OffchainCreate2TransferWithPub), err
	}

	out0 := *abi.ConvertType(out[0], new(OffchainCreate2TransferWithPub)).(*OffchainCreate2TransferWithPub)

	return out0, err

}

// DecodeWithPub is a free data retrieval call binding the contract method 0xe48411d3.
//
// Solidity: function decodeWithPub(bytes encodedTx) pure returns((uint256,uint256,bytes32,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) DecodeWithPub(encodedTx []byte) (OffchainCreate2TransferWithPub, error) {
	return _FrontendCreate2Transfer.Contract.DecodeWithPub(&_FrontendCreate2Transfer.CallOpts, encodedTx)
}

// DecodeWithPub is a free data retrieval call binding the contract method 0xe48411d3.
//
// Solidity: function decodeWithPub(bytes encodedTx) pure returns((uint256,uint256,bytes32,uint256,uint256,uint256) _tx)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) DecodeWithPub(encodedTx []byte) (OffchainCreate2TransferWithPub, error) {
	return _FrontendCreate2Transfer.Contract.DecodeWithPub(&_FrontendCreate2Transfer.CallOpts, encodedTx)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256,uint256)[])
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Decompress(opts *bind.CallOpts, txs []byte) ([]TxCreate2Transfer, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "decompress", txs)

	if err != nil {
		return *new([]TxCreate2Transfer), err
	}

	out0 := *abi.ConvertType(out[0], new([]TxCreate2Transfer)).(*[]TxCreate2Transfer)

	return out0, err

}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256,uint256)[])
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Decompress(txs []byte) ([]TxCreate2Transfer, error) {
	return _FrontendCreate2Transfer.Contract.Decompress(&_FrontendCreate2Transfer.CallOpts, txs)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256,uint256)[])
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Decompress(txs []byte) ([]TxCreate2Transfer, error) {
	return _FrontendCreate2Transfer.Contract.Decompress(&_FrontendCreate2Transfer.CallOpts, txs)
}

// Encode is a free data retrieval call binding the contract method 0x6cc2d754.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Encode(opts *bind.CallOpts, _tx OffchainCreate2Transfer) ([]byte, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "encode", _tx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Encode is a free data retrieval call binding the contract method 0x6cc2d754.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Encode(_tx OffchainCreate2Transfer) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.Encode(&_FrontendCreate2Transfer.CallOpts, _tx)
}

// Encode is a free data retrieval call binding the contract method 0x6cc2d754.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Encode(_tx OffchainCreate2Transfer) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.Encode(&_FrontendCreate2Transfer.CallOpts, _tx)
}

// EncodeWithPub is a free data retrieval call binding the contract method 0xbdb83e8a.
//
// Solidity: function encodeWithPub((uint256,uint256,bytes32,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) EncodeWithPub(opts *bind.CallOpts, _tx OffchainCreate2TransferWithPub) ([]byte, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "encodeWithPub", _tx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeWithPub is a free data retrieval call binding the contract method 0xbdb83e8a.
//
// Solidity: function encodeWithPub((uint256,uint256,bytes32,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) EncodeWithPub(_tx OffchainCreate2TransferWithPub) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.EncodeWithPub(&_FrontendCreate2Transfer.CallOpts, _tx)
}

// EncodeWithPub is a free data retrieval call binding the contract method 0xbdb83e8a.
//
// Solidity: function encodeWithPub((uint256,uint256,bytes32,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) EncodeWithPub(_tx OffchainCreate2TransferWithPub) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.EncodeWithPub(&_FrontendCreate2Transfer.CallOpts, _tx)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Process(opts *bind.CallOpts, stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "process", stateRoot, encodedTx, tokenID, from, to)

	outstruct := new(struct {
		NewRoot [32]byte
		Result  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Result = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendCreate2Transfer.Contract.Process(&_FrontendCreate2Transfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendCreate2Transfer.Contract.Process(&_FrontendCreate2Transfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTxWithPub) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) SignBytes(opts *bind.CallOpts, encodedTxWithPub []byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "signBytes", encodedTxWithPub)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTxWithPub) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) SignBytes(encodedTxWithPub []byte) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.SignBytes(&_FrontendCreate2Transfer.CallOpts, encodedTxWithPub)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTxWithPub) pure returns(bytes)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) SignBytes(encodedTxWithPub []byte) ([]byte, error) {
	return _FrontendCreate2Transfer.Contract.SignBytes(&_FrontendCreate2Transfer.CallOpts, encodedTxWithPub)
}

// Validate is a free data retrieval call binding the contract method 0x8090e82d.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkeySender, bytes32 pubkeyHashReceiver, bytes32 domain) view returns(bool)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) Validate(opts *bind.CallOpts, encodedTx []byte, signature [2]*big.Int, pubkeySender [4]*big.Int, pubkeyHashReceiver [32]byte, domain [32]byte) (bool, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "validate", encodedTx, signature, pubkeySender, pubkeyHashReceiver, domain)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Validate is a free data retrieval call binding the contract method 0x8090e82d.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkeySender, bytes32 pubkeyHashReceiver, bytes32 domain) view returns(bool)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkeySender [4]*big.Int, pubkeyHashReceiver [32]byte, domain [32]byte) (bool, error) {
	return _FrontendCreate2Transfer.Contract.Validate(&_FrontendCreate2Transfer.CallOpts, encodedTx, signature, pubkeySender, pubkeyHashReceiver, domain)
}

// Validate is a free data retrieval call binding the contract method 0x8090e82d.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkeySender, bytes32 pubkeyHashReceiver, bytes32 domain) view returns(bool)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkeySender [4]*big.Int, pubkeyHashReceiver [32]byte, domain [32]byte) (bool, error) {
	return _FrontendCreate2Transfer.Contract.Validate(&_FrontendCreate2Transfer.CallOpts, encodedTx, signature, pubkeySender, pubkeyHashReceiver, domain)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCaller) ValidateAndApply(opts *bind.CallOpts, senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	var out []interface{}
	err := _FrontendCreate2Transfer.contract.Call(opts, &out, "validateAndApply", senderEncoded, encodedTx)

	outstruct := new(struct {
		NewSender   []byte
		NewReceiver []byte
		Result      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewSender = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.NewReceiver = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Result = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferSession) ValidateAndApply(senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendCreate2Transfer.Contract.ValidateAndApply(&_FrontendCreate2Transfer.CallOpts, senderEncoded, encodedTx)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0x5f7dde22.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendCreate2Transfer *FrontendCreate2TransferCallerSession) ValidateAndApply(senderEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendCreate2Transfer.Contract.ValidateAndApply(&_FrontendCreate2Transfer.CallOpts, senderEncoded, encodedTx)
}
