// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OffchainTransfer is an auto generated low-level Go binding around an user-defined struct.
type OffchainTransfer struct {
	TxType    *big.Int
	FromIndex *big.Int
	ToIndex   *big.Int
	Amount    *big.Int
	Fee       *big.Int
	Nonce     *big.Int
}

// TxTransfer is an auto generated low-level Go binding around an user-defined struct.
type TxTransfer struct {
	FromIndex *big.Int
	ToIndex   *big.Int
	Amount    *big.Int
	Fee       *big.Int
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// FrontendTransferMetaData contains all meta data concerning the FrontendTransfer contract.
var FrontendTransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedTxs\",\"type\":\"bytes[]\"}],\"name\":\"compress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"decompress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"structTx.Transfer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"signBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"senderEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiverEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"validateAndApply\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newSender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newReceiver\",\"type\":\"bytes\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50614661806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806389840761116100665780638984076114610124578063d8b1728e14610145578063dd21c2ed14610158578063e5c5e9a31461017a578063fa320471146101d957600080fd5b806308909a83146100985780635cd3f3a1146100c15780635ef63f4f146100e1578063729ba7f014610104575b600080fd5b6100ab6100a63660046141e2565b6101ec565b6040516100b89190614405565b60405180910390f35b6100d46100cf366004614098565b61020b565b6040516100b8919061438d565b6100f46100ef3660046140d7565b61036c565b60405190151581526020016100b8565b610117610112366004613eb7565b610515565b6040516100b8919061444d565b610137610132366004614001565b610557565b6040516100b89291906143f1565b6100ab610153366004614098565b6105ba565b61016b61016636600461414d565b61064b565b6040516100b893929190614418565b61018d610188366004614098565b6107c1565b6040516100b89190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6100ab6101e7366004613e48565b610840565b6060610205610200368490038401846141f9565b6109ca565b92915050565b6060600061024e84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a3892505050565b90506000816001600160401b0381111561027857634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102d457816020015b6102c16040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816102965790505b50905060005b82811015610363576103258187878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050610a489050565b82828151811061034557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250808061035b906145c3565b9150506102da565b50949350505050565b6000806103ae87878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ade92505050565b90506103bd8160600151610b4b565b506103cb8160800151610b4b565b5060006040518060800160405280836020015181526020018360400151815260200183606001518152602001836080015181525090506000610411828460a00151610bf9565b90506000806104788960028060200260405190810160405280929190826002602002808284376000920191909152505060408051608081810190925291508b90600490839083908082843760009201919091525061047391508b905087610c54565b610d30565b92509050816104c75760405162461bcd60e51b8152602060048201526016602482015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b60448201526064015b60405180910390fd5b806105045760405162461bcd60e51b815260206004820152600d60248201526c426164207369676e617475726560981b60448201526064016104be565b5060019a9950505050505050505050565b6000806040518060a0016040528089815260200187815260200186815260200185815260200184815250905061054b8188610ff9565b98975050505050505050565b600080600061056587610ade565b905060006040518060800160405280836020015181526020018360400151815260200183606001518152602001836080015181525090506105a989828989896114ea565b9350935050505b9550959350505050565b606060006105fd84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ade92505050565b90506000604051806080016040528083602001518152602001836040015181526020018360600151815260200183608001518152509050610642818360a00151610bf9565b95945050505050565b60608060008061069086868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ade92505050565b905060006106d38b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155b92505050565b905060006107168a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061155b92505050565b90506000826020015190506107358185606001518660800151866115b0565b95509250600085600b81111561075b57634e487b7160e01b600052602160045260246000fd5b146107875761076983611689565b60408051602081019091526000815290975095506107b59350505050565b61079681856060015184611708565b955091506107a383611689565b6107ac83611689565b96509650505050505b96509650969350505050565b6107fa6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61083983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ade92505050565b9392505050565b60606000826001600160401b0381111561086a57634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156108c657816020015b6108b36040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816108885790505b50905060005b81518110156109b85760006109468686848181106108fa57634e487b7160e01b600052603260045260246000fd5b905060200281019061090c919061445b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ade92505050565b90506040518060800160405280826020015181526020018260400151815260200182606001518152602001826080015181525083838151811061099957634e487b7160e01b600052603260045260246000fd5b60200260200101819052505080806109b0906145c3565b9150506108cc565b506109c28161179c565b949350505050565b6060816000015182602001518360400151846060015185608001518660a00151604051602001610a2296959493929190958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6040516020818303038152906040529050919050565b6000600c82516102059190614532565b610a736040518060800160405280600081526020016000815260200160008152602001600081525090565b506004600c8281028401918201516008830151600a80850151948401516040805160808101825263ffffffff9586168152939094166020840152600f86861c8116830a610fff97881602948401949094529384901c90921690910a9190921602606082015292915050565b610b176040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81806020019051810190610b2b91906142a6565b60a087015260808601526060850152604084015260208301528152919050565b60008181805b600f811015610bac578215801590610b715750610b6f600a846145de565b155b15610b9557610b81600a84614532565b9250610b8e60018361451a565b9150610b9a565b610bac565b80610ba4816145c3565b915050610b51565b50610fff821115610beb5760405162461bcd60e51b8152602060048201526009602482015268109859081a5b9c1d5d60ba1b60448201526064016104be565b6109c282600c83901b61451a565b8151602080840151604080860151606087810151835160019681019690965292850195909552838501929092526080830185905260a083019190915260c082015260e001604051602081830303815290604052905092915050565b610c5c613a16565b6000610c6884846119f1565b90506000610c7c82825b6020020151611aac565b90506000610c8b836001610c72565b9050610c95613a34565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610cd457610cd6565bfe5b5080610d245760405162461bcd60e51b815260206004820152601760248201527f424c533a20626e206164642063616c6c206661696c656400000000000000000060448201526064016104be565b50919695505050505050565b600080600060405180610180016040528087600060028110610d6257634e487b7160e01b600052603260045260246000fd5b6020020151815260200187600160028110610d8d57634e487b7160e01b600052603260045260246000fd5b602002015181526020017f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281526020017f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81526020017f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81526020017f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d815260200185600060028110610e5057634e487b7160e01b600052603260045260246000fd5b6020020151815260200185600160028110610e7b57634e487b7160e01b600052603260045260246000fd5b6020020151815260200186600160048110610ea657634e487b7160e01b600052603260045260246000fd5b6020020151815260200186600060048110610ed157634e487b7160e01b600052603260045260246000fd5b6020020151815260200186600360048110610efc57634e487b7160e01b600052603260045260246000fd5b6020020151815260200186600260048110610f2757634e487b7160e01b600052603260045260246000fd5b602002015190529050610f38613a52565b60405163273cfc6560e11b815260026004820152600090739f19c6456854fda109dfc2b9ad45d9bf147c855790634e79f8ca9060240160206040518083038186803b158015610f8657600080fd5b505afa158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190613fe9565b9050600060208361018086600886fa905080610fe4576000809550955050505050610ff1565b5050511515925060019150505b935093915050565b6000806110098460800151610a38565b90506000816001600160401b0381111561103357634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561106c57816020015b611059613a16565b8152602001906001900390816110515790505b5090506000826001600160401b0381111561109757634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156110c0578160200160208202803683370190505b50905060005b8381101561149b57600060016110dc8387614565565b6110e69190614565565b90506000611101828a60800151610a4890919063ffffffff16565b905061117c896020015161113f8a60000151858151811061113257634e487b7160e01b600052603260045260246000fd5b6020026020010151611689565b8051906020012083600001518b60200151868151811061116f57634e487b7160e01b600052603260045260246000fd5b6020026020010151611e90565b6111d45760405162461bcd60e51b8152602060048201526024808201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960448201526333b732b960e11b60648201526084016104be565b6000886000015183815181106111fa57634e487b7160e01b600052603260045260246000fd5b602002602001015160600151116112535760405162461bcd60e51b815260206004820152601860248201527f41757468656e7469636974793a207a65726f206e6f6e6365000000000000000060448201526064016104be565b61130189604001518960400151848151811061127f57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001611297919061433d565b604051602081830303815290604052805190602001208a6000015185815181106112d157634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518b60600151868151811061116f57634e487b7160e01b600052603260045260246000fd5b61135b5760405162461bcd60e51b815260206004820152602560248201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604482015264786973747360d81b60648201526084016104be565b600060018960000151848151811061138357634e487b7160e01b600052603260045260246000fd5b6020026020010151606001516113999190614565565b82519091506000906113b29066038d7ea4c6800061451a565b905060005b8581101561140e57818782815181106113e057634e487b7160e01b600052603260045260246000fd5b602002602001015114156113fc57826113f8816145ac565b9350505b80611406816145c3565b9150506113b7565b508086868151811061143057634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060006114488484610bf9565b90506114588c6060015182610c54565b88868151811061147857634e487b7160e01b600052603260045260246000fd5b602002602001018190525050505050508080611493906145c3565b9150506110c6565b506000806114b28860000151886040015186611ea8565b92509050816114c957600a95505050505050610205565b806114dc57600595505050505050610205565b506000979650505050505050565b6000806115078787600001518789604001518a60600151896125cd565b9092509050600081600b81111561152e57634e487b7160e01b600052602160045260246000fd5b14611538576105b0565b61154d828760200151878960400151876126c7565b909890975095505050505050565b6115866040518060800160405280600081526020016000815260200160008152602001600081525090565b8180602001905181019061159a9190614271565b6060850152604084015260208301528152919050565b6115db6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000846115ed57508190506001611680565b60006115f986866127be565b90508084604001511015611614578360029250925050611680565b8684602001511461162c578360039250925050611680565b6040805160808101825285518152602080870151908201528582015160009282019061165890856127ca565b8152602001611675600188606001516127be90919063ffffffff16565b905293506000925050505b94509492505050565b805160609015801561169d57506020820151155b80156116ab57506040820151155b80156116b957506060820151155b156116cf57604080516000602082015201610a22565b815160208084015160408086015160608701519151610a2295949192910193845260208401929092526040830152606082015260800190565b6117336040518060800160405280600081526020016000815260200160008152602001600081525090565b60008483602001511461174b57508190506004610ff1565b604051806080016040528084600001518152602001846020015181526020016117818686604001516127be90919063ffffffff16565b81526060850151602090910152915060009050935093915050565b805160609060006117ae82600c614546565b6001600160401b038111156117d357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117fd576020820181803683370190505b50905060005b828110156119e957600085828151811061182d57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001519050600086838151811061185d57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151905060006118a188858151811061189057634e487b7160e01b600052603260045260246000fd5b602002602001015160400151610b4b565b905060006118d98986815181106118c857634e487b7160e01b600052603260045260246000fd5b602002602001015160600151610b4b565b6040516001600160e01b031960e087811b8216602084015286901b1660248201526001600160f01b031960f085811b8216602884015283901b16602a820152909150600090602c0160408051601f1981840301815291905290506000611940600c88614546565b905060005b600c8110156119cf5782818151811061196e57634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b03191689611988848461451a565b815181106119a657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350806119c7816145c3565b915050611945565b5050505050505080806119e1906145c3565b915050611803565b509392505050565b6119f9613a16565b6000611a0584846127d6565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b03815116945060008051602061463583398151915285600080516020614635833981519152600160c01b870908604887015160608801516001600160c01b039081169750169450925060008051602061463583398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b611ab4613a16565b6000805160206146358339815191528210611b1d5760405162461bcd60e51b815260206004820152602360248201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604482015262195b9d60ea1b60648201526084016104be565b816000611b2982612a80565b915050600060008051602061463583398151915280611b5857634e487b7160e01b600052601260045260246000fd5b8384099050600080516020614635833981519152600482089050600060008051602061463583398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd8509905060006000805160206146358339815191528383099050611bbf81612aa9565b9050600080516020614635833981519152828309915060008051602061463583398151915281830991506000805160206146358339815191528286099150600080516020614635833981519152611c2483600080516020614635833981519152614565565b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020614635833981519152858609915060008051602061463583398151915285830991506000805160206146358339815191526003830891506000611c8883612a80565b90935090508015611cd05784611cb357611cb083600080516020614635833981519152614565565b92505b505060408051808201909152938452602084015250909392505050565b60008051602061463583398151915260018708611cfb90600080516020614635833981519152614565565b955060008051602061463583398151915286870992506000805160206146358339815191528684099250600080516020614635833981519152600384089250611d4383612a80565b90935090508015611d6b5784611cb357611cb083600080516020614635833981519152614565565b600080516020614635833981519152848509955060008051602061463583398151915286870995506000805160206146358339815191528287099550600080516020614635833981519152828709955060008051602061463583398151915260018708955060008051602061463583398151915286870992506000805160206146358339815191528684099250600080516020614635833981519152600384089250611e1683612a80565b909350905080611e735760405162461bcd60e51b815260206004820152602260248201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960448201526137b760f11b60648201526084016104be565b84611cb357611cb083600080516020614635833981519152614565565b600084611e9e858585612ab4565b1495945050505050565b8151600090819080611f065760405162461bcd60e51b815260206004820152602160248201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726044820152606f60f81b60648201526084016104be565b83518114611f745760405162461bcd60e51b815260206004820152603560248201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604482015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b60648201526084016104be565b6000611f8182600161451a565b611f8c906006614546565b90506000816001600160401b03811115611fb657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611fdf578160200160208202803683370190505b50905087600060200201518160008151811061200b57634e487b7160e01b600052603260045260246000fd5b602090810291909101015287600160200201518160018151811061203f57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28160028151811061208d57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed816003815181106120db57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec8160048151811061212957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8160058151811061217757634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060005b838110156124f3578681815181106121ae57634e487b7160e01b600052603260045260246000fd5b60200260200101516000600281106121d657634e487b7160e01b600052603260045260246000fd5b6020020151826121e7836006614546565b6121f290600661451a565b8151811061221057634e487b7160e01b600052603260045260246000fd5b60200260200101818152505086818151811061223c57634e487b7160e01b600052603260045260246000fd5b602002602001015160016002811061226457634e487b7160e01b600052603260045260246000fd5b602002015182612275836006614546565b61228090600761451a565b8151811061229e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781815181106122ca57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600481106122f257634e487b7160e01b600052603260045260246000fd5b602002015182612303836006614546565b61230e90600861451a565b8151811061232c57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061235857634e487b7160e01b600052603260045260246000fd5b602002602001015160006004811061238057634e487b7160e01b600052603260045260246000fd5b602002015182612391836006614546565b61239c90600961451a565b815181106123ba57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781815181106123e657634e487b7160e01b600052603260045260246000fd5b602002602001015160036004811061240e57634e487b7160e01b600052603260045260246000fd5b60200201518261241f836006614546565b61242a90600a61451a565b8151811061244857634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061247457634e487b7160e01b600052603260045260246000fd5b602002602001015160026004811061249c57634e487b7160e01b600052603260045260246000fd5b6020020151826124ad836006614546565b6124b890600b61451a565b815181106124d657634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806124eb816145c3565b915050612186565b506124fc613a52565b6000739f19c6456854fda109dfc2b9ad45d9bf147c8557634e79f8ca61252387600161451a565b6040518263ffffffff1660e01b815260040161254191815260200190565b60206040518083038186803b15801561255957600080fd5b505afa15801561256d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125919190613fe9565b90506020826020860260208601600885fa9550856125ba57600080965096505050505050610ff1565b5051151598600198509650505050505050565b6000806125f3886125e18560000151611689565b80519060200120898660200151611e90565b6126495760405162461bcd60e51b815260206004820152602160248201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736044820152601d60fa1b60648201526084016104be565b60008061265c88888888600001516115b0565b9092509050600081600b81111561268357634e487b7160e01b600052602160045260246000fd5b14612695576000935091506126bc9050565b6126b36126a183611689565b805190602001208a8760200151612ab4565b93506000925050505b965096945050505050565b6000806126ed876126db8560000151611689565b80519060200120888660200151611e90565b6127455760405162461bcd60e51b815260206004820152602360248201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786044820152621a5cdd60ea1b60648201526084016104be565b60008061275787878760000151611708565b9092509050600081600b81111561277e57634e487b7160e01b600052602160045260246000fd5b14612790576000935091506105b09050565b6127ae61279c83611689565b80519060200120898760200151612ab4565b9960009950975050505050505050565b6000610839828461451a565b60006108398284614565565b805160609060006127e882602061451a565b6127f390604061451a565b6127fe90600461451a565b6001600160401b0381111561282357634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561284d576020820181803683370190505b5060408051606080825260808201909252919250600091906020820181803683370190505090506060820160005b84811015612895576020818801810151838301520161287b565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516128cb9190614371565b602060405180830381855afa1580156128e8573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061290b9190613fe9565b90506000604294508484528160208501526001604085015360418401889052602060618501536002846040516129419190614371565b602060405180830381855afa15801561295e573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129819190613fe9565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516129b89190614371565b602060405180830381855afa1580156129d5573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906129f89190613fe9565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051612a2f9190614371565b602060405180830381855afa158015612a4c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190612a6f9190613fe9565b606084015250909695505050505050565b600080612a8c83612b9a565b915082600080516020614635833981519152838409149050915091565b6000610205826132cf565b600083815b835181101561036357600185821c16612b2c5781848281518110612aed57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612b0f929190918252602082015260400190565b604051602081830303815290604052805190602001209150612b88565b838181518110612b4c57634e487b7160e01b600052603260045260246000fd5b602002602001015182604051602001612b6f929190918252602082015260400190565b6040516020818303038152906040528051906020012091505b80612b92816145c3565b915050612ab9565b60006000805160206146358339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60006000805160206146358339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6000604051604081018181106001600160401b0382111715613a9457613a9461461e565b80604052508091508284604085011115613aad57600080fd5b60005b6002811015613acf578135835260209283019290910190600101613ab0565b50505092915050565b600082601f830112613ae8578081fd5b81356020613afd613af8836144f7565b6144c7565b80838252828201915082860187848660051b8901011115613b1c578586fd5b855b85811015613b5c5781356001600160401b03811115613b3b578788fd5b613b498a87838c0101613c1b565b8552509284019290840190600101613b1e565b5090979650505050505050565b6000601f8381840112613b7a578182fd5b82356020613b8a613af8836144f7565b80838252828201915082870188848660071b8a01011115613ba9578687fd5b865b85811015613c0d578987830112613bc0578788fd5b613bc861449f565b8083608085018d811115613bda578b8cfd5b8b5b6004811015613bf957823585529389019391890191600101613bdc565b509187525094860194925050600101613bab565b509098975050505050505050565b600082601f830112613c2b578081fd5b81356020613c3b613af8836144f7565b80838252828201915082860187848660051b8901011115613c5a578586fd5b855b85811015613b5c57813584529284019290840190600101613c5c565b600082601f830112613c88578081fd5b81356020613c98613af8836144f7565b80838252828201915082860187848660071b8901011115613cb7578586fd5b855b85811015613b5c57613ccb8983613e05565b84529284019260809190910190600101613cb9565b60008083601f840112613cf1578182fd5b5081356001600160401b03811115613d07578182fd5b602083019150836020828501011115613d1f57600080fd5b9250929050565b600082601f830112613d36578081fd5b81356001600160401b03811115613d4f57613d4f61461e565b613d62601f8201601f19166020016144c7565b818152846020838601011115613d76578283fd5b816020850160208301379081016020019190915292915050565b600060a08284031215613da1578081fd5b604051604081016001600160401b038282108183111715613dc457613dc461461e565b81604052829350613dd58686613e05565b83526080850135915080821115613deb57600080fd5b50613df885828601613c1b565b6020830152505092915050565b600060808284031215613e16578081fd5b613e1e61449f565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b60008060208385031215613e5a578182fd5b82356001600160401b0380821115613e70578384fd5b818501915085601f830112613e83578384fd5b813581811115613e91578485fd5b8660208260051b8501011115613ea5578485fd5b60209290920196919550909350505050565b60008060008060008060e08789031215613ecf578182fd5b87601f880112613edd578182fd5b613ee78888613a70565b955060408701356001600160401b0380821115613f02578384fd5b908801906080828b031215613f15578384fd5b613f1d61449f565b823582811115613f2b578586fd5b613f378c828601613c78565b825250602083013582811115613f4b578586fd5b613f578c828601613ad8565b602083015250604083013582811115613f6e578586fd5b613f7a8c828601613b69565b604083015250606083013582811115613f91578586fd5b613f9d8c828601613ad8565b60608301525080975050606089013595506080890135945060a0890135935060c0890135915080821115613fcf578283fd5b50613fdc89828a01613d26565b9150509295509295509295565b600060208284031215613ffa578081fd5b5051919050565b600080600080600060a08688031215614018578283fd5b8535945060208601356001600160401b0380821115614035578485fd5b61404189838a01613d26565b955060408801359450606088013591508082111561405d578283fd5b61406989838a01613d90565b9350608088013591508082111561407e578283fd5b5061408b88828901613d90565b9150509295509295909350565b600080602083850312156140aa578182fd5b82356001600160401b038111156140bf578283fd5b6140cb85828601613ce0565b90969095509350505050565b600080600080600061010086880312156140ef578283fd5b85356001600160401b03811115614104578384fd5b61411088828901613ce0565b9096509450506060860187811115614126578384fd5b60208701935060e087018881111561413c578283fd5b959894975092955091933592915050565b60008060008060008060608789031215614165578384fd5b86356001600160401b038082111561417b578586fd5b6141878a838b01613ce0565b9098509650602089013591508082111561419f578586fd5b6141ab8a838b01613ce0565b909650945060408901359150808211156141c3578384fd5b506141d089828a01613ce0565b979a9699509497509295939492505050565b600060c082840312156141f3578081fd5b50919050565b600060c0828403121561420a578081fd5b60405160c081018181106001600160401b038211171561422c5761422c61461e565b8060405250823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b60008060008060808587031215614286578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008060008060008060c087890312156142be578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b6000815180845261430781602086016020860161457c565b601f01601f19169290920160200192915050565b600c811061433957634e487b7160e01b600052602160045260246000fd5b9052565b60008183825b6004811015614362578151835260209283019290910190600101614343565b50505060808201905092915050565b6000825161438381846020870161457c565b9190910192915050565b602080825282518282018190526000919060409081850190868401855b828110156143e4578151805185528681015187860152858101518686015260609081015190850152608090930192908501906001016143aa565b5091979650505050505050565b82815260408101610839602083018461431b565b60208152600061083960208301846142ef565b60608152600061442b60608301866142ef565b828103602084015261443d81866142ef565b9150506109c2604083018461431b565b60208101610205828461431b565b6000808335601e19843603018112614471578283fd5b8301803591506001600160401b0382111561448a578283fd5b602001915036819003821315613d1f57600080fd5b604051608081016001600160401b03811182821017156144c1576144c161461e565b60405290565b604051601f8201601f191681016001600160401b03811182821017156144ef576144ef61461e565b604052919050565b60006001600160401b038211156145105761451061461e565b5060051b60200190565b6000821982111561452d5761452d6145f2565b500190565b60008261454157614541614608565b500490565b6000816000190483118215151615614560576145606145f2565b500290565b600082821015614577576145776145f2565b500390565b60005b8381101561459757818101518382015260200161457f565b838111156145a6576000848401525b50505050565b6000816145bb576145bb6145f2565b506000190190565b60006000198214156145d7576145d76145f2565b5060010190565b6000826145ed576145ed614608565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c6343000804000a",
}

// FrontendTransferABI is the input ABI used to generate the binding from.
// Deprecated: Use FrontendTransferMetaData.ABI instead.
var FrontendTransferABI = FrontendTransferMetaData.ABI

// FrontendTransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FrontendTransferMetaData.Bin instead.
var FrontendTransferBin = FrontendTransferMetaData.Bin

// DeployFrontendTransfer deploys a new Ethereum contract, binding an instance of FrontendTransfer to it.
func DeployFrontendTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FrontendTransfer, error) {
	parsed, err := FrontendTransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FrontendTransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FrontendTransfer{FrontendTransferCaller: FrontendTransferCaller{contract: contract}, FrontendTransferTransactor: FrontendTransferTransactor{contract: contract}, FrontendTransferFilterer: FrontendTransferFilterer{contract: contract}}, nil
}

// FrontendTransfer is an auto generated Go binding around an Ethereum contract.
type FrontendTransfer struct {
	FrontendTransferCaller     // Read-only binding to the contract
	FrontendTransferTransactor // Write-only binding to the contract
	FrontendTransferFilterer   // Log filterer for contract events
}

// FrontendTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type FrontendTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FrontendTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FrontendTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FrontendTransferSession struct {
	Contract     *FrontendTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FrontendTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FrontendTransferCallerSession struct {
	Contract *FrontendTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// FrontendTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FrontendTransferTransactorSession struct {
	Contract     *FrontendTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// FrontendTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type FrontendTransferRaw struct {
	Contract *FrontendTransfer // Generic contract binding to access the raw methods on
}

// FrontendTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FrontendTransferCallerRaw struct {
	Contract *FrontendTransferCaller // Generic read-only contract binding to access the raw methods on
}

// FrontendTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FrontendTransferTransactorRaw struct {
	Contract *FrontendTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFrontendTransfer creates a new instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransfer(address common.Address, backend bind.ContractBackend) (*FrontendTransfer, error) {
	contract, err := bindFrontendTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FrontendTransfer{FrontendTransferCaller: FrontendTransferCaller{contract: contract}, FrontendTransferTransactor: FrontendTransferTransactor{contract: contract}, FrontendTransferFilterer: FrontendTransferFilterer{contract: contract}}, nil
}

// NewFrontendTransferCaller creates a new read-only instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferCaller(address common.Address, caller bind.ContractCaller) (*FrontendTransferCaller, error) {
	contract, err := bindFrontendTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferCaller{contract: contract}, nil
}

// NewFrontendTransferTransactor creates a new write-only instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*FrontendTransferTransactor, error) {
	contract, err := bindFrontendTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferTransactor{contract: contract}, nil
}

// NewFrontendTransferFilterer creates a new log filterer instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*FrontendTransferFilterer, error) {
	contract, err := bindFrontendTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferFilterer{contract: contract}, nil
}

// bindFrontendTransfer binds a generic wrapper to an already deployed contract.
func bindFrontendTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendTransfer *FrontendTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendTransfer.Contract.FrontendTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendTransfer *FrontendTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.FrontendTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendTransfer *FrontendTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.FrontendTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendTransfer *FrontendTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendTransfer *FrontendTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendTransfer *FrontendTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferCaller) CheckSignature(opts *bind.CallOpts, signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "checkSignature", signature, proof, stateRoot, accountRoot, domain, txs)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendTransfer.Contract.CheckSignature(&_FrontendTransfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferCallerSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendTransfer.Contract.CheckSignature(&_FrontendTransfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) Compress(opts *bind.CallOpts, encodedTxs [][]byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "compress", encodedTxs)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendTransfer.Contract.Compress(&_FrontendTransfer.CallOpts, encodedTxs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendTransfer.Contract.Compress(&_FrontendTransfer.CallOpts, encodedTxs)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferCaller) Decode(opts *bind.CallOpts, encodedTx []byte) (OffchainTransfer, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "decode", encodedTx)

	if err != nil {
		return *new(OffchainTransfer), err
	}

	out0 := *abi.ConvertType(out[0], new(OffchainTransfer)).(*OffchainTransfer)

	return out0, err

}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferSession) Decode(encodedTx []byte) (OffchainTransfer, error) {
	return _FrontendTransfer.Contract.Decode(&_FrontendTransfer.CallOpts, encodedTx)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferCallerSession) Decode(encodedTx []byte) (OffchainTransfer, error) {
	return _FrontendTransfer.Contract.Decode(&_FrontendTransfer.CallOpts, encodedTx)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferCaller) Decompress(opts *bind.CallOpts, txs []byte) ([]TxTransfer, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "decompress", txs)

	if err != nil {
		return *new([]TxTransfer), err
	}

	out0 := *abi.ConvertType(out[0], new([]TxTransfer)).(*[]TxTransfer)

	return out0, err

}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferSession) Decompress(txs []byte) ([]TxTransfer, error) {
	return _FrontendTransfer.Contract.Decompress(&_FrontendTransfer.CallOpts, txs)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferCallerSession) Decompress(txs []byte) ([]TxTransfer, error) {
	return _FrontendTransfer.Contract.Decompress(&_FrontendTransfer.CallOpts, txs)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) Encode(opts *bind.CallOpts, _tx OffchainTransfer) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "encode", _tx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) Encode(_tx OffchainTransfer) ([]byte, error) {
	return _FrontendTransfer.Contract.Encode(&_FrontendTransfer.CallOpts, _tx)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) Encode(_tx OffchainTransfer) ([]byte, error) {
	return _FrontendTransfer.Contract.Encode(&_FrontendTransfer.CallOpts, _tx)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferCaller) Process(opts *bind.CallOpts, stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "process", stateRoot, encodedTx, tokenID, from, to)

	outstruct := new(struct {
		NewRoot [32]byte
		Result  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Result = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendTransfer.Contract.Process(&_FrontendTransfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferCallerSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendTransfer.Contract.Process(&_FrontendTransfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) SignBytes(opts *bind.CallOpts, encodedTx []byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "signBytes", encodedTx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendTransfer.Contract.SignBytes(&_FrontendTransfer.CallOpts, encodedTx)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendTransfer.Contract.SignBytes(&_FrontendTransfer.CallOpts, encodedTx)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferCaller) Validate(opts *bind.CallOpts, encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "validate", encodedTx, signature, pubkey, domain)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendTransfer.Contract.Validate(&_FrontendTransfer.CallOpts, encodedTx, signature, pubkey, domain)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferCallerSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendTransfer.Contract.Validate(&_FrontendTransfer.CallOpts, encodedTx, signature, pubkey, domain)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferCaller) ValidateAndApply(opts *bind.CallOpts, senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "validateAndApply", senderEncoded, receiverEncoded, encodedTx)

	outstruct := new(struct {
		NewSender   []byte
		NewReceiver []byte
		Result      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewSender = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.NewReceiver = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Result = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferSession) ValidateAndApply(senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendTransfer.Contract.ValidateAndApply(&_FrontendTransfer.CallOpts, senderEncoded, receiverEncoded, encodedTx)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferCallerSession) ValidateAndApply(senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendTransfer.Contract.ValidateAndApply(&_FrontendTransfer.CallOpts, senderEncoded, receiverEncoded, encodedTx)
}
