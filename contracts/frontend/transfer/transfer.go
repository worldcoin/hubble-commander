// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transfer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// OffchainTransfer is an auto generated low-level Go binding around an user-defined struct.
type OffchainTransfer struct {
	TxType    *big.Int
	FromIndex *big.Int
	ToIndex   *big.Int
	Amount    *big.Int
	Fee       *big.Int
	Nonce     *big.Int
}

// TxTransfer is an auto generated low-level Go binding around an user-defined struct.
type TxTransfer struct {
	FromIndex *big.Int
	ToIndex   *big.Int
	Amount    *big.Int
	Fee       *big.Int
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// FrontendTransferABI is the input ABI used to generate the binding from.
const FrontendTransferABI = "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"encodedTxs\",\"type\":\"bytes[]\"}],\"name\":\"compress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"decode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"name\":\"decompress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"structTx.Transfer[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"txType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structOffchain.Transfer\",\"name\":\"_tx\",\"type\":\"tuple\"}],\"name\":\"encode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"process\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"signBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"},{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"pubkey\",\"type\":\"uint256[4]\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"senderEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"receiverEncoded\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encodedTx\",\"type\":\"bytes\"}],\"name\":\"validateAndApply\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"newSender\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"newReceiver\",\"type\":\"bytes\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// FrontendTransferBin is the compiled bytecode used for deploying new contracts.
var FrontendTransferBin = "0x608060405234801561001057600080fd5b50613f52806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806389840761116100665780638984076114610121578063d8b1728e14610142578063dd21c2ed14610155578063e5c5e9a314610177578063fa3204711461019757610093565b806308909a83146100985780635cd3f3a1146100c15780635ef63f4f146100e1578063729ba7f014610101575b600080fd5b6100ab6100a636600461379f565b6101aa565b6040516100b89190613a2f565b60405180910390f35b6100d46100cf366004613655565b6101cb565b6040516100b8919061399e565b6100f46100ef366004613694565b6102dd565b6040516100b89190613a02565b61011461010f3660046134d2565b61044e565b6040516100b89190613a77565b61013461012f3660046135be565b610497565b6040516100b8929190613a1b565b6100ab610150366004613655565b610506565b61016861016336600461370a565b6105a3565b6040516100b893929190613a42565b61018a610185366004613655565b610718565b6040516100b89190613e0c565b6100ab6101a5366004613464565b610766565b60606101c36101be368490038401846137b6565b610890565b90505b919050565b6060600061020e84848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506108db92505050565b90506060816001600160401b038111801561022857600080fd5b5060405190808252806020026020018201604052801561026257816020015b61024f612f5f565b8152602001906001900390816102475790505b50905060005b828110156102d2576102b38187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506108ef9050565b8282815181106102bf57fe5b6020908102919091010152600101610268565b509150505b92915050565b60006102e7612f87565b61032687878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061096292505050565b9050610335816060015161099e565b50610343816080015161099e565b5061034c612f5f565b604051806080016040528083602001518152602001836040015181526020018360600151815260200183608001518152509050606061038f828460a00151610a0d565b90506000806103f68960028060200260405190810160405280929190826002602002808284376000920191909152505060408051608081810190925291508b9060049083908390808284376000920191909152506103f191508b905087610a52565b610b11565b92509050816104205760405162461bcd60e51b815260040161041790613bcc565b60405180910390fd5b8061043d5760405162461bcd60e51b815260040161041790613de5565b5060019a9950505050505050505050565b6000610458612fbd565b6040518060a0016040528089815260200187815260200186815260200185815260200184815250905061048b8188610cd4565b98975050505050505050565b6000806104a2612f87565b6104ab87610962565b90506104b5612f5f565b6040518060800160405280836020015181526020018360400151815260200183606001518152602001836080015181525090506104f58982898989610ffa565b9350935050505b9550959350505050565b6060610510612f87565b61054f84848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061096292505050565b9050610559612f5f565b60405180608001604052808360200151815260200183604001518152602001836060015181526020018360800151815250905061059a818360a00151610a0d565b95945050505050565b60608060006105b0612f87565b6105ef86868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061096292505050565b90506105f9612f5f565b6106388b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061105792505050565b9050610642612f5f565b6106818a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061105792505050565b90506000826020015190506106a0818560600151866080015186611089565b95509250600085600a8111156106b257fe5b146106de576106c083611151565b604080516020810190915260008152909750955061070c9350505050565b6106ed8185606001518461117a565b955091506106fa83611151565b61070383611151565b96509650505050505b96509650969350505050565b610720612f87565b61075f83838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061096292505050565b9392505050565b606080826001600160401b038111801561077f57600080fd5b506040519080825280602002602001820160405280156107b957816020015b6107a6612f5f565b81526020019060019003908161079e5790505b50905060005b815181101561087e576107d0612f87565b61082b8686848181106107df57fe5b90506020028101906107f19190613e50565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061096292505050565b90506040518060800160405280826020015181526020018260400151815260200182606001518152602001826080015181525083838151811061086a57fe5b6020908102919091010152506001016107bf565b50610888816111eb565b949350505050565b6060816000015182602001518360400151846060015185608001518660a001516040516020016108c596959493929190613934565b6040516020818303038152906040529050919050565b6000600c8251816108e857fe5b0492915050565b6108f7612f5f565b506004600c8281028401918201516008830151600a80850151948401516040805160808101825263ffffffff9586168152939094166020840152600f86861c8116830a610fff97881602948401949094529384901c90921690910a9190921602606082015292915050565b61096a612f87565b8180602001905181019061097e9190613846565b60a087015260808601526060850152604084015260208301528152919050565b60008181805b600f8110156109e05782158015906109bd5750600a8306155b156109d357600a830492506001820191506109d8565b6109e0565b6001016109a4565b50610fff821115610a035760405162461bcd60e51b815260040161041790613c74565b600c1b0192915050565b60606001836000015184602001518486604001518760600151604051602001610a3b96959493929190613934565b604051602081830303815290604052905092915050565b610a5a612ff4565b610a62612ff4565b610a6c848461135d565b9050610a76612ff4565b610a878260005b6020020151611418565b9050610a91612ff4565b610a9c836001610a7d565b9050610aa6613012565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610ae557610ae7565bfe5b5080610b055760405162461bcd60e51b815260040161041790613a8e565b50919695505050505050565b600080610b1c613030565b50604080516101808101825286518152602080880151818301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2828401527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060808401919091527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec60808401527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60a0840152865160c08401528682015160e084015290870151610100830152865161012083015286015161014082015290850151610160820152610c0e61304f565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610c4990600290600401613a85565b60206040518083038186803b158015610c6157600080fd5b505afa158015610c75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9991906135a6565b9050600060208361018086600886fa905080610cbf576000809550955050505050610ccc565b5050511515925060019150505b935093915050565b600080610ce484608001516108db565b90506060816001600160401b0381118015610cfe57600080fd5b50604051908082528060200260200182016040528015610d3857816020015b610d25612ff4565b815260200190600190039081610d1d5790505b5090506060826001600160401b0381118015610d5357600080fd5b50604051908082528060200260200182016040528015610d7d578160200160208202803683370190505b50905060005b83811015610fab5760001981850301610d9a612f5f565b6080890151610da990836108ef565b9050610dfc8960200151610dd38a600001518581518110610dc657fe5b6020026020010151611151565b8051906020012083600001518b602001518681518110610def57fe5b6020026020010151611794565b610e185760405162461bcd60e51b815260040161041790613ac5565b600088600001518381518110610e2a57fe5b60200260200101516060015111610e535760405162461bcd60e51b815260040161041790613bfc565b610ec5896040015189604001518481518110610e6b57fe5b6020026020010151604051602001610e8391906138c9565b604051602081830303815290604052805190602001208a600001518581518110610ea957fe5b6020026020010151600001518b606001518681518110610def57fe5b610ee15760405162461bcd60e51b815260040161041790613d1b565b6000600189600001518481518110610ef557fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b85811015610f4c5781878281518110610f2e57fe5b60200260200101511415610f4457600019909201915b600101610f19565b5080868681518110610f5a57fe5b6020026020010181815250506060610f728484610a0d565b9050610f828c6060015182610a52565b888681518110610f8e57fe5b602002602001018190525050505050508080600101915050610d83565b50600080610fc288600001518860400151866117ac565b9250905081610fd957600a955050505050506102d7565b80610fec576005955050505050506102d7565b506000979650505050505050565b6000806110178787600001518789604001518a6060015189611bdb565b9092509050600081600a81111561102a57fe5b14611034576104fc565b61104982876020015187896040015187611c8e565b909890975095505050505050565b61105f612f5f565b818060200190518101906110739190613811565b6060850152604084015260208301528152919050565b611091612f5f565b6000846110a357508190506001611148565b60006110af8686611d3c565b905080846040015110156110ca578360029250925050611148565b868460200151146110e2578360039250925050611148565b6110ea612f5f565b60405180608001604052808660000151815260200186602001518152602001611120848860400151611d6190919063ffffffff16565b815260200161113d60018860600151611d3c90919063ffffffff16565b905293506000925050505b94509492505050565b606081600001518260200151836040015184606001516040516020016108c59493929190613919565b611182612f5f565b60008483602001511461119a57508190506004610ccc565b604051806080016040528084600001518152602001846020015181526020016111d0868660400151611d3c90919063ffffffff16565b81526060850151602090910152915060009050935093915050565b805160609081600c82026001600160401b038111801561120a57600080fd5b506040519080825280601f01601f191660200182016040528015611235576020820181803683370190505b50905060005b8281101561135557600085828151811061125157fe5b6020026020010151600001519050600086838151811061126d57fe5b6020026020010151602001519050600061129d88858151811061128c57fe5b60200260200101516040015161099e565b905060006112c18986815181106112b057fe5b60200260200101516060015161099e565b90506060848484846040516020016112dc949392919061395c565b60408051601f198184030181529190529050600c860260005b600c8110156113425782818151811061130a57fe5b602001015160f81c60f81b898383018151811061132357fe5b60200101906001600160f81b031916908160001a9053506001016112f5565b50506001909501945061123b9350505050565b509392505050565b611365612ff4565b60606113718484611d89565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020613f2683398151915285600080516020613f26833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020613f2683398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b611420612ff4565b600080516020613f26833981519152821061144d5760405162461bcd60e51b815260040161041790613cd8565b81600061145982612004565b9150506000600080516020613f268339815191528061147457fe5b8384099050600080516020613f268339815191526004820890506000600080516020613f2683398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020613f2683398151915283830990506114db8161202d565b9050600080516020613f268339815191528283099150600080516020613f268339815191528183099150600080516020613f268339815191528286099150600080516020613f2683398151915282600080516020613f26833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020613f268339815191528586099150600080516020613f268339815191528583099150600080516020613f26833981519152600383089150600061159d83612004565b909350905080156115e057846115c15782600080516020613f268339815191520392505b5050604080518082019091529384526020840152509091506101c69050565b600080516020613f2683398151915260018708600080516020613f26833981519152039550600080516020613f268339815191528061161b57fe5b8687099250600080516020613f268339815191528684099250600080516020613f2683398151915260038408925061165283612004565b9093509050801561169157846115c157505060408051808201909152938452600080516020613f26833981519152036020840152509091506101c69050565b600080516020613f268339815191528485099550600080516020613f268339815191528687099550600080516020613f268339815191528287099550600080516020613f268339815191528287099550600080516020613f26833981519152600187089550600080516020613f268339815191528687099250600080516020613f268339815191528684099250600080516020613f2683398151915260038408925061173c83612004565b90935090508061175e5760405162461bcd60e51b815260040161041790613d60565b846117775782600080516020613f268339815191520392505b505060408051808201909152938452602084015250909392505050565b6000846117a2858585612038565b1495945050505050565b81516000908190806117d05760405162461bcd60e51b815260040161041790613c97565b835181146117f05760405162461bcd60e51b815260040161041790613b77565b600660018201026060816001600160401b038111801561180f57600080fd5b50604051908082528060200260200182016040528015611839578160200160208202803683370190505b50905087600060200201518160008151811061185157fe5b602090810291909101015287600160200201518160018151811061187157fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2816002815181106118ab57fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed816003815181106118e557fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec8160048151811061191f57fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d8160058151811061195957fe5b60200260200101818152505060005b83811015611b095786818151811061197c57fe5b602002602001015160006002811061199057fe5b60200201518282600602600601815181106119a757fe5b6020026020010181815250508681815181106119bf57fe5b60200260200101516001600281106119d357fe5b60200201518282600602600701815181106119ea57fe5b602002602001018181525050878181518110611a0257fe5b6020026020010151600160048110611a1657fe5b6020020151828260060260080181518110611a2d57fe5b602002602001018181525050878181518110611a4557fe5b6020026020010151600060048110611a5957fe5b6020020151828260060260090181518110611a7057fe5b602002602001018181525050878181518110611a8857fe5b6020026020010151600360048110611a9c57fe5b60200201518282600602600a0181518110611ab357fe5b602002602001018181525050878181518110611acb57fe5b6020026020010151600260048110611adf57fe5b60200201518282600602600b0181518110611af657fe5b6020908102919091010152600101611968565b50611b1261304f565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90611b4f906001890190600401613a85565b60206040518083038186803b158015611b6757600080fd5b505afa158015611b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9f91906135a6565b90506020826020860260208601600885fa955085611bc857600080965096505050505050610ccc565b5051151598600198509650505050505050565b600080611c0188611bef8560000151611151565b80519060200120898660200151611794565b611c1d5760405162461bcd60e51b815260040161041790613c33565b611c25612f5f565b6000611c378888888860000151611089565b9092509050600081600a811115611c4a57fe5b14611c5c57600093509150611c839050565b611c7a611c6883611151565b805190602001208a8760200151612038565b93506000925050505b965096945050505050565b600080611cb487611ca28560000151611151565b80519060200120888660200151611794565b611cd05760405162461bcd60e51b815260040161041790613da2565b611cd8612f5f565b6000611ce98787876000015161117a565b9092509050600081600a811115611cfc57fe5b14611d0e576000935091506104fc9050565b611d2c611d1a83611151565b80519060200120898760200151612038565b9960009950975050505050505050565b60008282018381101561075f5760405162461bcd60e51b815260040161041790613b09565b600082821115611d835760405162461bcd60e51b815260040161041790613b40565b50900390565b805160609081606482016001600160401b0381118015611da857600080fd5b506040519080825280601f01601f191660200182016040528015611dd3576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b84811015611e195760208188018101518383015201611dff565b5083016000815360010160608153600101600081536001810187905260210160208153506000600283604051611e4f91906138fd565b602060405180830381855afa158015611e6c573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611e8f91906135a6565b9050600060429450848452816020850152600160408501536041840188905260206061850153600284604051611ec591906138fd565b602060405180830381855afa158015611ee2573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611f0591906135a6565b905080602084015280821880602086015250600260408501536041840188905260206061850153600284604051611f3c91906138fd565b602060405180830381855afa158015611f59573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611f7c91906135a6565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051611fb391906138fd565b602060405180830381855afa158015611fd0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611ff391906135a6565b606084015250909695505050505050565b600080612010836120e3565b915082600080516020613f26833981519152838409149050915091565b60006101c382612818565b600083815b83518110156120da57600185821c16612093578184828151811061205d57fe5b6020026020010151604051602001612076929190613a0d565b6040516020818303038152906040528051906020012091506120d2565b83818151811061209f57fe5b6020026020010151826040516020016120b9929190613a0d565b6040516020818303038152906040528051906020012091505b60010161203d565b50949350505050565b6000600080516020613f268339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020613f268339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060800160405280600081526020016000815260200160008152602001600081525090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040518060a00160405280612fd0612ff4565b81526000602082018190526040820181905260608083019190915260809091015290565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f83011261307d578081fd5b813561309061308b82613eba565b613e94565b818152915060208083019084810160005b848110156130ca576130b8888484358a010161318c565b845292820192908201906001016130a1565b505050505092915050565b6000601f83818401126130e6578182fd5b82356130f461308b82613eba565b818152925060208084019085810160808085028801830189101561311757600080fd5b60005b8581101561317f57898784011261313057600080fd5b61313982613e94565b80848486018d81111561314b57600080fd5b60005b600481101561316b5782358552938801939188019160010161314e565b50918852509585019593505060010161311a565b5050505050505092915050565b600082601f83011261319c578081fd5b81356131aa61308b82613eba565b8181529150602080830190848101818402860182018710156131cb57600080fd5b60005b848110156130ca578135845292820192908201906001016131ce565b600082601f8301126131fa578081fd5b813561320861308b82613eba565b818152915060208083019084810160808085028701830188101561322b57600080fd5b60005b8581101561325257613240898461341f565b8552938301939181019160010161322e565b50505050505092915050565b60008083601f84011261326f578182fd5b5081356001600160401b03811115613285578182fd5b60208301915083602082850101111561329d57600080fd5b9250929050565b600082601f8301126132b4578081fd5b81356001600160401b038111156132c9578182fd5b6132dc601f8201601f1916602001613e94565b91508082528360208285010111156132f357600080fd5b8060208401602084013760009082016020015292915050565b60006080828403121561331d578081fd5b6133276080613e94565b905081356001600160401b038082111561334057600080fd5b61334c858386016131ea565b8352602084013591508082111561336257600080fd5b61336e8583860161306d565b6020840152604084013591508082111561338757600080fd5b613393858386016130d5565b604084015260608401359150808211156133ac57600080fd5b506133b98482850161306d565b60608301525092915050565b600060a082840312156133d6578081fd5b6133e06040613e94565b90506133ec838361341f565b815260808201356001600160401b0381111561340757600080fd5b6134138482850161318c565b60208301525092915050565b600060808284031215613430578081fd5b61343a6080613e94565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b60008060208385031215613476578182fd5b82356001600160401b038082111561348c578384fd5b818501915085601f83011261349f578384fd5b8135818111156134ad578485fd5b86602080830285010111156134c0578485fd5b60209290920196919550909350505050565b60008060008060008060e087890312156134ea578182fd5b87601f8801126134f8578182fd5b600261350661308b82613ed9565b808960408b018c811115613518578687fd5b865b8581101561353857823585526020948501949092019160010161351a565b50919950503591506001600160401b03905080821115613556578384fd5b6135628a838b0161330c565b9650606089013595506080890135945060a0890135935060c089013591508082111561358c578283fd5b5061359989828a016132a4565b9150509295509295509295565b6000602082840312156135b7578081fd5b5051919050565b600080600080600060a086880312156135d5578283fd5b8535945060208601356001600160401b03808211156135f2578485fd5b6135fe89838a016132a4565b955060408801359450606088013591508082111561361a578283fd5b61362689838a016133c5565b9350608088013591508082111561363b578283fd5b50613648888289016133c5565b9150509295509295909350565b60008060208385031215613667578182fd5b82356001600160401b0381111561367c578283fd5b6136888582860161325e565b90969095509350505050565b600080600080600061010086880312156136ac578283fd5b85356001600160401b038111156136c1578384fd5b6136cd8882890161325e565b90965094505060608601878111156136e3578384fd5b60208701935060e08701888111156136f9578283fd5b959894975092955091933592915050565b60008060008060008060608789031215613722578384fd5b86356001600160401b0380821115613738578586fd5b6137448a838b0161325e565b9098509650602089013591508082111561375c578586fd5b6137688a838b0161325e565b90965094506040890135915080821115613780578384fd5b5061378d89828a0161325e565b979a9699509497509295939492505050565b600060c082840312156137b0578081fd5b50919050565b600060c082840312156137c7578081fd5b6137d160c0613e94565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b60008060008060808587031215613826578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008060008060008060c0878903121561385e578384fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600081518084526138a7816020860160208601613ef5565b601f01601f19169290920160200192915050565b600b81106138c557fe5b9052565b60008183825b60048110156138ee5781518352602092830192909101906001016138cf565b50505060808201905092915050565b6000825161390f818460208701613ef5565b9190910192915050565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b6001600160e01b031960e095861b811682529390941b90921660048401526001600160f01b031960f091821b8116600885015291901b16600a820152600c0190565b602080825282518282018190526000919060409081850190868401855b828110156139f5578151805185528681015187860152858101518686015260609081015190850152608090930192908501906001016139bb565b5091979650505050505050565b901515815260200190565b918252602082015260400190565b8281526040810161075f60208301846138bb565b60006020825261075f602083018461388f565b600060608252613a55606083018661388f565b8281036020840152613a67818661388f565b91505061088860408301846138bb565b602081016102d782846138bb565b90815260200190565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b602080825260169082015275141c9958dbdb5c1a5b194818d85b1b0819985a5b195960521b604082015260600190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b602080825260099082015268109859081a5b9c1d5d60ba1b604082015260600190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526025908201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604082015264786973747360d81b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b6020808252600d908201526c426164207369676e617475726560981b604082015260600190565b600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015292915050565b6000808335601e19843603018112613e66578283fd5b8301803591506001600160401b03821115613e7f578283fd5b60200191503681900382131561329d57600080fd5b6040518181016001600160401b0381118282101715613eb257600080fd5b604052919050565b60006001600160401b03821115613ecf578081fd5b5060209081020190565b60006001600160401b03821115613eee578081fd5b5060200290565b60005b83811015613f10578181015183820152602001613ef8565b83811115613f1f576000848401525b5050505056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a"

// DeployFrontendTransfer deploys a new Ethereum contract, binding an instance of FrontendTransfer to it.
func DeployFrontendTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FrontendTransfer, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendTransferABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(FrontendTransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FrontendTransfer{FrontendTransferCaller: FrontendTransferCaller{contract: contract}, FrontendTransferTransactor: FrontendTransferTransactor{contract: contract}, FrontendTransferFilterer: FrontendTransferFilterer{contract: contract}}, nil
}

// FrontendTransfer is an auto generated Go binding around an Ethereum contract.
type FrontendTransfer struct {
	FrontendTransferCaller     // Read-only binding to the contract
	FrontendTransferTransactor // Write-only binding to the contract
	FrontendTransferFilterer   // Log filterer for contract events
}

// FrontendTransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type FrontendTransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FrontendTransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FrontendTransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FrontendTransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FrontendTransferSession struct {
	Contract     *FrontendTransfer // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FrontendTransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FrontendTransferCallerSession struct {
	Contract *FrontendTransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// FrontendTransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FrontendTransferTransactorSession struct {
	Contract     *FrontendTransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// FrontendTransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type FrontendTransferRaw struct {
	Contract *FrontendTransfer // Generic contract binding to access the raw methods on
}

// FrontendTransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FrontendTransferCallerRaw struct {
	Contract *FrontendTransferCaller // Generic read-only contract binding to access the raw methods on
}

// FrontendTransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FrontendTransferTransactorRaw struct {
	Contract *FrontendTransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFrontendTransfer creates a new instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransfer(address common.Address, backend bind.ContractBackend) (*FrontendTransfer, error) {
	contract, err := bindFrontendTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FrontendTransfer{FrontendTransferCaller: FrontendTransferCaller{contract: contract}, FrontendTransferTransactor: FrontendTransferTransactor{contract: contract}, FrontendTransferFilterer: FrontendTransferFilterer{contract: contract}}, nil
}

// NewFrontendTransferCaller creates a new read-only instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferCaller(address common.Address, caller bind.ContractCaller) (*FrontendTransferCaller, error) {
	contract, err := bindFrontendTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferCaller{contract: contract}, nil
}

// NewFrontendTransferTransactor creates a new write-only instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*FrontendTransferTransactor, error) {
	contract, err := bindFrontendTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferTransactor{contract: contract}, nil
}

// NewFrontendTransferFilterer creates a new log filterer instance of FrontendTransfer, bound to a specific deployed contract.
func NewFrontendTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*FrontendTransferFilterer, error) {
	contract, err := bindFrontendTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FrontendTransferFilterer{contract: contract}, nil
}

// bindFrontendTransfer binds a generic wrapper to an already deployed contract.
func bindFrontendTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(FrontendTransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendTransfer *FrontendTransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendTransfer.Contract.FrontendTransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendTransfer *FrontendTransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.FrontendTransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendTransfer *FrontendTransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.FrontendTransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FrontendTransfer *FrontendTransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FrontendTransfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FrontendTransfer *FrontendTransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FrontendTransfer *FrontendTransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FrontendTransfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferCaller) CheckSignature(opts *bind.CallOpts, signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "checkSignature", signature, proof, stateRoot, accountRoot, domain, txs)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendTransfer.Contract.CheckSignature(&_FrontendTransfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// CheckSignature is a free data retrieval call binding the contract method 0x729ba7f0.
//
// Solidity: function checkSignature(uint256[2] signature, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof, bytes32 stateRoot, bytes32 accountRoot, bytes32 domain, bytes txs) view returns(uint8)
func (_FrontendTransfer *FrontendTransferCallerSession) CheckSignature(signature [2]*big.Int, proof TypesSignatureProof, stateRoot [32]byte, accountRoot [32]byte, domain [32]byte, txs []byte) (uint8, error) {
	return _FrontendTransfer.Contract.CheckSignature(&_FrontendTransfer.CallOpts, signature, proof, stateRoot, accountRoot, domain, txs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) Compress(opts *bind.CallOpts, encodedTxs [][]byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "compress", encodedTxs)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendTransfer.Contract.Compress(&_FrontendTransfer.CallOpts, encodedTxs)
}

// Compress is a free data retrieval call binding the contract method 0xfa320471.
//
// Solidity: function compress(bytes[] encodedTxs) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) Compress(encodedTxs [][]byte) ([]byte, error) {
	return _FrontendTransfer.Contract.Compress(&_FrontendTransfer.CallOpts, encodedTxs)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferCaller) Decode(opts *bind.CallOpts, encodedTx []byte) (OffchainTransfer, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "decode", encodedTx)

	if err != nil {
		return *new(OffchainTransfer), err
	}

	out0 := *abi.ConvertType(out[0], new(OffchainTransfer)).(*OffchainTransfer)

	return out0, err

}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferSession) Decode(encodedTx []byte) (OffchainTransfer, error) {
	return _FrontendTransfer.Contract.Decode(&_FrontendTransfer.CallOpts, encodedTx)
}

// Decode is a free data retrieval call binding the contract method 0xe5c5e9a3.
//
// Solidity: function decode(bytes encodedTx) pure returns((uint256,uint256,uint256,uint256,uint256,uint256) _tx)
func (_FrontendTransfer *FrontendTransferCallerSession) Decode(encodedTx []byte) (OffchainTransfer, error) {
	return _FrontendTransfer.Contract.Decode(&_FrontendTransfer.CallOpts, encodedTx)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferCaller) Decompress(opts *bind.CallOpts, txs []byte) ([]TxTransfer, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "decompress", txs)

	if err != nil {
		return *new([]TxTransfer), err
	}

	out0 := *abi.ConvertType(out[0], new([]TxTransfer)).(*[]TxTransfer)

	return out0, err

}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferSession) Decompress(txs []byte) ([]TxTransfer, error) {
	return _FrontendTransfer.Contract.Decompress(&_FrontendTransfer.CallOpts, txs)
}

// Decompress is a free data retrieval call binding the contract method 0x5cd3f3a1.
//
// Solidity: function decompress(bytes txs) pure returns((uint256,uint256,uint256,uint256)[])
func (_FrontendTransfer *FrontendTransferCallerSession) Decompress(txs []byte) ([]TxTransfer, error) {
	return _FrontendTransfer.Contract.Decompress(&_FrontendTransfer.CallOpts, txs)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) Encode(opts *bind.CallOpts, _tx OffchainTransfer) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "encode", _tx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) Encode(_tx OffchainTransfer) ([]byte, error) {
	return _FrontendTransfer.Contract.Encode(&_FrontendTransfer.CallOpts, _tx)
}

// Encode is a free data retrieval call binding the contract method 0x08909a83.
//
// Solidity: function encode((uint256,uint256,uint256,uint256,uint256,uint256) _tx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) Encode(_tx OffchainTransfer) ([]byte, error) {
	return _FrontendTransfer.Contract.Encode(&_FrontendTransfer.CallOpts, _tx)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferCaller) Process(opts *bind.CallOpts, stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "process", stateRoot, encodedTx, tokenID, from, to)

	outstruct := new(struct {
		NewRoot [32]byte
		Result  uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewRoot = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Result = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendTransfer.Contract.Process(&_FrontendTransfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// Process is a free data retrieval call binding the contract method 0x89840761.
//
// Solidity: function process(bytes32 stateRoot, bytes encodedTx, uint256 tokenID, ((uint256,uint256,uint256,uint256),bytes32[]) from, ((uint256,uint256,uint256,uint256),bytes32[]) to) pure returns(bytes32 newRoot, uint8 result)
func (_FrontendTransfer *FrontendTransferCallerSession) Process(stateRoot [32]byte, encodedTx []byte, tokenID *big.Int, from TypesStateMerkleProof, to TypesStateMerkleProof) (struct {
	NewRoot [32]byte
	Result  uint8
}, error) {
	return _FrontendTransfer.Contract.Process(&_FrontendTransfer.CallOpts, stateRoot, encodedTx, tokenID, from, to)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCaller) SignBytes(opts *bind.CallOpts, encodedTx []byte) ([]byte, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "signBytes", encodedTx)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendTransfer.Contract.SignBytes(&_FrontendTransfer.CallOpts, encodedTx)
}

// SignBytes is a free data retrieval call binding the contract method 0xd8b1728e.
//
// Solidity: function signBytes(bytes encodedTx) pure returns(bytes)
func (_FrontendTransfer *FrontendTransferCallerSession) SignBytes(encodedTx []byte) ([]byte, error) {
	return _FrontendTransfer.Contract.SignBytes(&_FrontendTransfer.CallOpts, encodedTx)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferCaller) Validate(opts *bind.CallOpts, encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "validate", encodedTx, signature, pubkey, domain)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendTransfer.Contract.Validate(&_FrontendTransfer.CallOpts, encodedTx, signature, pubkey, domain)
}

// Validate is a free data retrieval call binding the contract method 0x5ef63f4f.
//
// Solidity: function validate(bytes encodedTx, uint256[2] signature, uint256[4] pubkey, bytes32 domain) view returns(bool)
func (_FrontendTransfer *FrontendTransferCallerSession) Validate(encodedTx []byte, signature [2]*big.Int, pubkey [4]*big.Int, domain [32]byte) (bool, error) {
	return _FrontendTransfer.Contract.Validate(&_FrontendTransfer.CallOpts, encodedTx, signature, pubkey, domain)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferCaller) ValidateAndApply(opts *bind.CallOpts, senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	var out []interface{}
	err := _FrontendTransfer.contract.Call(opts, &out, "validateAndApply", senderEncoded, receiverEncoded, encodedTx)

	outstruct := new(struct {
		NewSender   []byte
		NewReceiver []byte
		Result      uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.NewSender = *abi.ConvertType(out[0], new([]byte)).(*[]byte)
	outstruct.NewReceiver = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Result = *abi.ConvertType(out[2], new(uint8)).(*uint8)

	return *outstruct, err

}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferSession) ValidateAndApply(senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendTransfer.Contract.ValidateAndApply(&_FrontendTransfer.CallOpts, senderEncoded, receiverEncoded, encodedTx)
}

// ValidateAndApply is a free data retrieval call binding the contract method 0xdd21c2ed.
//
// Solidity: function validateAndApply(bytes senderEncoded, bytes receiverEncoded, bytes encodedTx) pure returns(bytes newSender, bytes newReceiver, uint8 result)
func (_FrontendTransfer *FrontendTransferCallerSession) ValidateAndApply(senderEncoded []byte, receiverEncoded []byte, encodedTx []byte) (struct {
	NewSender   []byte
	NewReceiver []byte
	Result      uint8
}, error) {
	return _FrontendTransfer.Contract.ValidateAndApply(&_FrontendTransfer.CallOpts, senderEncoded, receiverEncoded, encodedTx)
}
