// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// TransferMetaData contains all meta data concerning the Transfer contract.
var TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processTransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b506134c9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344ec5a771461003b5780639293149214610064575b600080fd5b61004e610049366004613178565b610085565b60405161005b91906132e5565b60405180910390f35b61007761007236600461302e565b61009a565b60405161005b9291906132d1565b6000610091838361027f565b90505b92915050565b6000806100a6846107cb565b156100b657508590506008610275565b60006100c1856107e3565b9050868111156100d8578760099250925050610275565b600080856000815181106100fc57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516020015190506101396040518060800160405280600081526020016000815260200160008152602001600081525090565b60005b848110156102295761014e89826107f3565b91506101cc8c83858b6101628660026133de565b8151811061018057634e487b7160e01b600052603260045260246000fd5b60200260200101518c86600261019691906133de565b6101a19060016133b2565b815181106101bf57634e487b7160e01b600052603260045260246000fd5b6020026020010151610889565b909c509550600086600b8111156101f357634e487b7160e01b600052602160045260246000fd5b14610205578b96505050505050610275565b60608201516102159085906108fa565b9350806102218161342b565b91505061013c565b506102688b8a84868b61023d8a60026133de565b8151811061025b57634e487b7160e01b600052603260045260246000fd5b6020026020010151610906565b909b508b96509450505050505b9550959350505050565b60008061028f84608001516107e3565b90506000816001600160401b038111156102b957634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156102f257816020015b6102df612c07565b8152602001906001900390816102d75790505b5090506000826001600160401b0381111561031d57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610346578160200160208202803683370190505b50905060005b8381101561077c576000600161036283876133fd565b61036c91906133fd565b90506000610387828a608001516107f390919063ffffffff16565b905061040289602001516103c58a6000015185815181106103b857634e487b7160e01b600052603260045260246000fd5b60200260200101516109fd565b8051906020012083600001518b6020015186815181106103f557634e487b7160e01b600052603260045260246000fd5b6020026020010151610a8e565b61045f5760405162461bcd60e51b8152602060048201526024808201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960448201526333b732b960e11b60648201526084015b60405180910390fd5b60008860000151838151811061048557634e487b7160e01b600052603260045260246000fd5b602002602001015160600151116104de5760405162461bcd60e51b815260206004820152601860248201527f41757468656e7469636974793a207a65726f206e6f6e636500000000000000006044820152606401610456565b61058c89604001518960400151848151811061050a57634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016105229190613264565b604051602081830303815290604052805190602001208a60000151858151811061055c57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001518b6060015186815181106103f557634e487b7160e01b600052603260045260246000fd5b6105e65760405162461bcd60e51b815260206004820152602560248201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604482015264786973747360d81b6064820152608401610456565b600060018960000151848151811061060e57634e487b7160e01b600052603260045260246000fd5b60200260200101516060015161062491906133fd565b825190915060009061063d9066038d7ea4c680006133b2565b905060005b85811015610699578187828151811061066b57634e487b7160e01b600052603260045260246000fd5b60200260200101511415610687578261068381613414565b9350505b806106918161342b565b915050610642565b50808686815181106106bb57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600061072984848151602080840151604080860151606087810151835160019681019690965292850195909552838501929092526080830185905260a083019190915260c082015260e001604051602081830303815290604052905092915050565b90506107398c6060015182610aa6565b88868151811061075957634e487b7160e01b600052603260045260246000fd5b6020026020010181905250505050505080806107749061342b565b91505061034c565b506000806107938860000151886040015186610b82565b92509050816107aa57600a95505050505050610094565b806107bd57600595505050505050610094565b506000979650505050505050565b6000600c82516107db9190613446565b151592915050565b6000600c825161009491906133ca565b61081e6040518060800160405280600081526020016000815260200160008152602001600081525090565b506004600c8281028401918201516008830151600a80850151948401516040805160808101825263ffffffff9586168152939094166020840152600f86861c8116830a610fff97881602948401949094529384901c90921690910a9190921602606082015292915050565b6000806108a68787600001518789604001518a60600151896112aa565b9092509050600081600b8111156108cd57634e487b7160e01b600052602160045260246000fd5b146108d757610275565b6108ec82876020015187896040015187610906565b909890975095505050505050565b600061009182846133b2565b60008061092c8761091a85600001516109fd565b80519060200120888660200151610a8e565b6109845760405162461bcd60e51b815260206004820152602360248201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786044820152621a5cdd60ea1b6064820152608401610456565b600080610996878787600001516113a4565b9092509050600081600b8111156109bd57634e487b7160e01b600052602160045260246000fd5b146109cf576000935091506102759050565b6109ed6109db836109fd565b80519060200120898760200151611438565b9960009950975050505050505050565b8051606090158015610a1157506020820151155b8015610a1f57506040820151155b8015610a2d57506060820151155b15610a55576040805160006020820152015b6040516020818303038152906040529050919050565b815160208084015160408086015160608701519151610a3f95949192910193845260208401929092526040830152606082015260800190565b600084610a9c858585611438565b1495945050505050565b610aae612c07565b6000610aba8484611529565b90506000610ace82825b60200201516115e4565b90506000610add836001610ac4565b9050610ae7612c25565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa9050808015610b2657610b28565bfe5b5080610b765760405162461bcd60e51b815260206004820152601760248201527f424c533a20626e206164642063616c6c206661696c65640000000000000000006044820152606401610456565b50919695505050505050565b8151600090819080610be05760405162461bcd60e51b815260206004820152602160248201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726044820152606f60f81b6064820152608401610456565b83518114610c4e5760405162461bcd60e51b815260206004820152603560248201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604482015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b6064820152608401610456565b6000610c5b8260016133b2565b610c669060066133de565b90506000816001600160401b03811115610c9057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610cb9578160200160208202803683370190505b509050876000602002015181600081518110610ce557634e487b7160e01b600052603260045260246000fd5b6020908102919091010152876001602002015181600181518110610d1957634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c281600281518110610d6757634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed81600381518110610db557634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec81600481518110610e0357634e487b7160e01b600052603260045260246000fd5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81600581518110610e5157634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060005b838110156111cd57868181518110610e8857634e487b7160e01b600052603260045260246000fd5b6020026020010151600060028110610eb057634e487b7160e01b600052603260045260246000fd5b602002015182610ec18360066133de565b610ecc9060066133b2565b81518110610eea57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050868181518110610f1657634e487b7160e01b600052603260045260246000fd5b6020026020010151600160028110610f3e57634e487b7160e01b600052603260045260246000fd5b602002015182610f4f8360066133de565b610f5a9060076133b2565b81518110610f7857634e487b7160e01b600052603260045260246000fd5b602002602001018181525050878181518110610fa457634e487b7160e01b600052603260045260246000fd5b6020026020010151600160048110610fcc57634e487b7160e01b600052603260045260246000fd5b602002015182610fdd8360066133de565b610fe89060086133b2565b8151811061100657634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061103257634e487b7160e01b600052603260045260246000fd5b602002602001015160006004811061105a57634e487b7160e01b600052603260045260246000fd5b60200201518261106b8360066133de565b6110769060096133b2565b8151811061109457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508781815181106110c057634e487b7160e01b600052603260045260246000fd5b60200260200101516003600481106110e857634e487b7160e01b600052603260045260246000fd5b6020020151826110f98360066133de565b61110490600a6133b2565b8151811061112257634e487b7160e01b600052603260045260246000fd5b60200260200101818152505087818151811061114e57634e487b7160e01b600052603260045260246000fd5b602002602001015160026004811061117657634e487b7160e01b600052603260045260246000fd5b6020020151826111878360066133de565b61119290600b6133b2565b815181106111b057634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806111c58161342b565b915050610e60565b506111d6612c43565b6000739f19c6456854fda109dfc2b9ad45d9bf147c8557634e79f8ca6111fd8760016133b2565b6040518263ffffffff1660e01b815260040161121b91815260200190565b60206040518083038186803b15801561123357600080fd5b505afa158015611247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126b9190613016565b90506020826020860260208601600885fa955085611294576000809650965050505050506112a2565b505115159450600193505050505b935093915050565b6000806112d0886112be85600001516109fd565b80519060200120898660200151610a8e565b6113265760405162461bcd60e51b815260206004820152602160248201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736044820152601d60fa1b6064820152608401610456565b60008061133988888888600001516119c8565b9092509050600081600b81111561136057634e487b7160e01b600052602160045260246000fd5b14611372576000935091506113999050565b61139061137e836109fd565b805190602001208a8760200151611438565b93506000925050505b965096945050505050565b6113cf6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000848360200151146113e7575081905060046112a2565b6040518060800160405280846000015181526020018460200151815260200161141d8686604001516108fa90919063ffffffff16565b81526060850151602090910152915060009050935093915050565b600083815b835181101561151e57600185821c166114b0578184828151811061147157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001611493929190918252602082015260400190565b60405160208183030381529060405280519060200120915061150c565b8381815181106114d057634e487b7160e01b600052603260045260246000fd5b6020026020010151826040516020016114f3929190918252602082015260400190565b6040516020818303038152906040528051906020012091505b806115168161342b565b91505061143d565b5090505b9392505050565b611531612c07565b600061153d8484611aa1565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b03815116945060008051602061349d8339815191528560008051602061349d833981519152600160c01b870908604887015160608801516001600160c01b039081169750169450925060008051602061349d83398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b6115ec612c07565b60008051602061349d83398151915282106116555760405162461bcd60e51b815260206004820152602360248201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604482015262195b9d60ea1b6064820152608401610456565b81600061166182611d4b565b915050600060008051602061349d8339815191528061169057634e487b7160e01b600052601260045260246000fd5b838409905060008051602061349d833981519152600482089050600060008051602061349d83398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd85099050600060008051602061349d83398151915283830990506116f781611d74565b905060008051602061349d833981519152828309915060008051602061349d833981519152818309915060008051602061349d833981519152828609915060008051602061349d83398151915261175c8360008051602061349d8339815191526133fd565b7759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe08945060008051602061349d833981519152858609915060008051602061349d833981519152858309915060008051602061349d83398151915260038308915060006117c083611d4b565b9093509050801561180857846117eb576117e88360008051602061349d8339815191526133fd565b92505b505060408051808201909152938452602084015250909392505050565b60008051602061349d833981519152600187086118339060008051602061349d8339815191526133fd565b955060008051602061349d833981519152868709925060008051602061349d833981519152868409925060008051602061349d83398151915260038408925061187b83611d4b565b909350905080156118a357846117eb576117e88360008051602061349d8339815191526133fd565b60008051602061349d833981519152848509955060008051602061349d833981519152868709955060008051602061349d833981519152828709955060008051602061349d833981519152828709955060008051602061349d83398151915260018708955060008051602061349d833981519152868709925060008051602061349d833981519152868409925060008051602061349d83398151915260038408925061194e83611d4b565b9093509050806119ab5760405162461bcd60e51b815260206004820152602260248201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960448201526137b760f11b6064820152608401610456565b846117eb576117e88360008051602061349d8339815191526133fd565b6119f36040518060800160405280600081526020016000815260200160008152602001600081525090565b600084611a0557508190506001611a98565b6000611a1186866108fa565b90508084604001511015611a2c578360029250925050611a98565b86846020015114611a44578360039250925050611a98565b60408051608081018252855181526020808701519082015285820151600092820190611a709085611d7f565b8152602001611a8d600188606001516108fa90919063ffffffff16565b905293506000925050505b94509492505050565b80516060906000611ab38260206133b2565b611abe9060406133b2565b611ac99060046133b2565b6001600160401b03811115611aee57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b18576020820181803683370190505b5060408051606080825260808201909252919250600091906020820181803683370190505090506060820160005b84811015611b605760208188018101518383015201611b46565b5083016000815360010160608153600101600081536001810187905260210160208153506000600283604051611b969190613298565b602060405180830381855afa158015611bb3573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611bd69190613016565b9050600060429450848452816020850152600160408501536041840188905260206061850153600284604051611c0c9190613298565b602060405180830381855afa158015611c29573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c4c9190613016565b905080602084015280821880602086015250600260408501536041840188905260206061850153600284604051611c839190613298565b602060405180830381855afa158015611ca0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611cc39190613016565b905080604084015280821880602086015250600360408501536041840188905260206061850153600284604051611cfa9190613298565b602060405180830381855afa158015611d17573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611d3a9190613016565b606084015250909695505050505050565b600080611d5783611d8b565b91508260008051602061349d833981519152838409149050915091565b6000610094826124c0565b600061009182846133fd565b600060008051602061349d8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab600060008051602061349d8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6000612c6b61331b565b9050808284604085011115612c7f57600080fd5b60005b6002811015612ca1578135835260209283019290910190600101612c82565b50505092915050565b600082601f830112612cba578081fd5b81356020612ccf612cca8361338f565b61335f565b80838252828201915082860187848660051b8901011115612cee578586fd5b855b85811015612d2e5781356001600160401b03811115612d0d578788fd5b612d1b8a87838c0101612ded565b8552509284019290840190600101612cf0565b5090979650505050505050565b6000601f8381840112612d4c578182fd5b82356020612d5c612cca8361338f565b80838252828201915082870188848660071b8a01011115612d7b578687fd5b865b85811015612ddf578987830112612d92578788fd5b612d9a6132f3565b8083608085018d811115612dac578b8cfd5b8b5b6004811015612dcb57823585529389019391890191600101612dae565b509187525094860194925050600101612d7d565b509098975050505050505050565b600082601f830112612dfd578081fd5b81356020612e0d612cca8361338f565b80838252828201915082860187848660051b8901011115612e2c578586fd5b855b85811015612d2e57813584529284019290840190600101612e2e565b600082601f830112612e5a578081fd5b81356020612e6a612cca8361338f565b80838252828201915082860187848660071b8901011115612e89578586fd5b855b85811015612d2e57612e9d8983612fd3565b84529284019260809190910190600101612e8b565b600082601f830112612ec2578081fd5b81356001600160401b03811115612edb57612edb613486565b612eee601f8201601f191660200161335f565b818152846020838601011115612f02578283fd5b816020850160208301379081016020019190915292915050565b600060808284031215612f2d578081fd5b612f356132f3565b905081356001600160401b0380821115612f4e57600080fd5b612f5a85838601612e4a565b83526020840135915080821115612f7057600080fd5b612f7c85838601612caa565b60208401526040840135915080821115612f9557600080fd5b612fa185838601612d3b565b60408401526060840135915080821115612fba57600080fd5b50612fc784828501612caa565b60608301525092915050565b600060808284031215612fe4578081fd5b612fec6132f3565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b600060208284031215613027578081fd5b5051919050565b600080600080600060a08688031215613045578081fd5b8535945060208601359350604086013592506001600160401b03806060880135111561306f578182fd5b61307f8860608901358901612eb2565b92508060808801351115613091578182fd5b6080870135870188601f8201126130a6578283fd5b6130b3612cca823561338f565b8082358252602082019150602083018b6020853560051b86010111156130d7578586fd5b855b84358110156131655785823511156130ef578687fd5b60a0823586018e03601f19011215613105578687fd5b61310d61331b565b61311d8e60208535890101612fd3565b81528660a08435880101351115613132578788fd5b6131488e8435880160a081013501602001612ded565b6020828101919091529085529384019391909101906001016130d9565b5050809450505050509295509295909350565b6000806040838503121561318a578182fd5b82356001600160401b03808211156131a0578384fd5b9084019060c082870312156131b3578384fd5b6131bb61333d565b86601f8401126131c9578485fd5b6131d38784612c61565b815260408301356020820152606083013560408201526080830135606082015260a083013582811115613204578586fd5b61321088828601612eb2565b6080830152509350602085013591508082111561322b578283fd5b5061323885828601612f1c565b9150509250929050565b600c811061326057634e487b7160e01b600052602160045260246000fd5b9052565b60008183825b600481101561328957815183526020928301929091019060010161326a565b50505060808201905092915050565b60008251815b818110156132b8576020818601810151858301520161329e565b818111156132c65782828501525b509190910192915050565b828152604081016115226020830184613242565b602081016100948284613242565b604051608081016001600160401b038111828210171561331557613315613486565b60405290565b604080519081016001600160401b038111828210171561331557613315613486565b60405160a081016001600160401b038111828210171561331557613315613486565b604051601f8201601f191681016001600160401b038111828210171561338757613387613486565b604052919050565b60006001600160401b038211156133a8576133a8613486565b5060051b60200190565b600082198211156133c5576133c561345a565b500190565b6000826133d9576133d9613470565b500490565b60008160001904831182151516156133f8576133f861345a565b500290565b60008282101561340f5761340f61345a565b500390565b6000816134235761342361345a565b506000190190565b600060001982141561343f5761343f61345a565b5060010190565b60008261345557613455613470565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c6343000804000a",
}

// TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use TransferMetaData.ABI instead.
var TransferABI = TransferMetaData.ABI

// TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TransferMetaData.Bin instead.
var TransferBin = TransferMetaData.Bin

// DeployTransfer deploys a new Ethereum contract, binding an instance of Transfer to it.
func DeployTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Transfer, error) {
	parsed, err := TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// Transfer is an auto generated Go binding around an Ethereum contract.
type Transfer struct {
	TransferCaller     // Read-only binding to the contract
	TransferTransactor // Write-only binding to the contract
	TransferFilterer   // Log filterer for contract events
}

// TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransferSession struct {
	Contract     *Transfer         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransferCallerSession struct {
	Contract *TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransferTransactorSession struct {
	Contract     *TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransferRaw struct {
	Contract *Transfer // Generic contract binding to access the raw methods on
}

// TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransferCallerRaw struct {
	Contract *TransferCaller // Generic read-only contract binding to access the raw methods on
}

// TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransferTransactorRaw struct {
	Contract *TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransfer creates a new instance of Transfer, bound to a specific deployed contract.
func NewTransfer(address common.Address, backend bind.ContractBackend) (*Transfer, error) {
	contract, err := bindTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// NewTransferCaller creates a new read-only instance of Transfer, bound to a specific deployed contract.
func NewTransferCaller(address common.Address, caller bind.ContractCaller) (*TransferCaller, error) {
	contract, err := bindTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransferCaller{contract: contract}, nil
}

// NewTransferTransactor creates a new write-only instance of Transfer, bound to a specific deployed contract.
func NewTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*TransferTransactor, error) {
	contract, err := bindTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransferTransactor{contract: contract}, nil
}

// NewTransferFilterer creates a new log filterer instance of Transfer, bound to a specific deployed contract.
func NewTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*TransferFilterer, error) {
	contract, err := bindTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransferFilterer{contract: contract}, nil
}

// bindTransfer binds a generic wrapper to an already deployed contract.
func bindTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCaller) ProcessTransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "processTransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCallerSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
