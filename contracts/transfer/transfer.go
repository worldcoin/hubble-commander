// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transfer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// TransferABI is the input ABI used to generate the binding from.
const TransferABI = "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processTransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// TransferBin is the compiled bytecode used for deploying new contracts.
var TransferBin = "0x608060405234801561001057600080fd5b50612f7c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344ec5a771461003b5780639293149214610064575b600080fd5b61004e6100493660046129df565b610085565b60405161005b9190612ba1565b60405180910390f35b6100776100723660046128b2565b61009a565b60405161005b929190612b83565b600061009183836101cf565b90505b92915050565b6000806100a6846104fe565b156100b6575085905060086101c5565b60006100c185610516565b9050868111156100d85787600992509250506101c5565b600080856000815181106100e857fe5b6020026020010151600001516020015190506101026124c1565b60005b8481101561019457610117898261052a565b91506101558c83858b856002028151811061012e57fe5b60200260200101518c866002026001018151811061014857fe5b602002602001015161059d565b909c509550600086600a81111561016857fe5b1461017a578b965050505050506101c5565b606082015161018a9085906105fa565b9350600101610105565b506101b88b8a84868b89600202815181106101ab57fe5b602002602001015161061f565b909b508b96509450505050505b9550959350505050565b6000806101df8460800151610516565b90506060816001600160401b03811180156101f957600080fd5b5060405190808252806020026020018201604052801561023357816020015b6102206124e9565b8152602001906001900390816102185790505b5090506060826001600160401b038111801561024e57600080fd5b50604051908082528060200260200182016040528015610278578160200160208202803683370190505b50905060005b838110156104af57600019818503016102956124c1565b60808901516102a4908361052a565b90506102f789602001516102ce8a6000015185815181106102c157fe5b60200260200101516106cd565b8051906020012083600001518b6020015186815181106102ea57fe5b602002602001015161070c565b61031c5760405162461bcd60e51b815260040161031390612c1f565b60405180910390fd5b60008860000151838151811061032e57fe5b602002602001015160600151116103575760405162461bcd60e51b815260040161031390612cef565b6103c989604001518960400151848151811061036f57fe5b60200260200101516040516020016103879190612ae2565b604051602081830303815290604052805190602001208a6000015185815181106103ad57fe5b6020026020010151600001518b6060015186815181106102ea57fe5b6103e55760405162461bcd60e51b815260040161031390612deb565b60006001896000015184815181106103f957fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b85811015610450578187828151811061043257fe5b6020026020010151141561044857600019909201915b60010161041d565b508086868151811061045e57fe5b60200260200101818152505060606104768484610724565b90506104868c6060015182610769565b88868151811061049257fe5b60200260200101819052505050505050808060010191505061027e565b506000806104c68860000151886040015186610828565b92509050816104dd57600a95505050505050610094565b806104f057600595505050505050610094565b506000979650505050505050565b6000600c82518161050b57fe5b06151590505b919050565b6000600c82518161052357fe5b0492915050565b6105326124c1565b506004600c8281028401918201516008830151600a80850151948401516040805160808101825263ffffffff9586168152939094166020840152600f86861c8116830a610fff97881602948401949094529384901c90921690910a9190921602606082015292915050565b6000806105ba8787600001518789604001518a6060015189610c5a565b9092509050600081600a8111156105cd57fe5b146105d7576101c5565b6105ec8287602001518789604001518761061f565b909890975095505050505050565b6000828201838110156100915760405162461bcd60e51b815260040161031390612c63565b6000806106458761063385600001516106cd565b8051906020012088866020015161070c565b6106615760405162461bcd60e51b815260040161031390612e72565b6106696124c1565b600061067a87878760000151610d0d565b9092509050600081600a81111561068d57fe5b1461069f576000935091506101c59050565b6106bd6106ab836106cd565b80519060200120898760200151610d7e565b9960009950975050505050505050565b606081600001518260200151836040015184606001516040516020016106f69493929190612b32565b6040516020818303038152906040529050919050565b60008461071a858585610d7e565b1495945050505050565b6060600183600001518460200151848660400151876060015160405160200161075296959493929190612b4d565b604051602081830303815290604052905092915050565b6107716124e9565b6107796124e9565b6107838484610e29565b905061078d6124e9565b61079e8260005b6020020151610ee4565b90506107a86124e9565b6107b3836001610794565b90506107bd612507565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa90508080156107fc576107fe565bfe5b508061081c5760405162461bcd60e51b815260040161031390612be8565b50919695505050505050565b815160009081908061084c5760405162461bcd60e51b815260040161031390612d67565b8351811461086c5760405162461bcd60e51b815260040161031390612c9a565b600660018201026060816001600160401b038111801561088b57600080fd5b506040519080825280602002602001820160405280156108b5578160200160208202803683370190505b5090508760006020020151816000815181106108cd57fe5b60209081029190910101528760016020020151816001815181106108ed57fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28160028151811061092757fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed8160038151811061096157fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec8160048151811061099b57fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d816005815181106109d557fe5b60200260200101818152505060005b83811015610b85578681815181106109f857fe5b6020026020010151600060028110610a0c57fe5b6020020151828260060260060181518110610a2357fe5b602002602001018181525050868181518110610a3b57fe5b6020026020010151600160028110610a4f57fe5b6020020151828260060260070181518110610a6657fe5b602002602001018181525050878181518110610a7e57fe5b6020026020010151600160048110610a9257fe5b6020020151828260060260080181518110610aa957fe5b602002602001018181525050878181518110610ac157fe5b6020026020010151600060048110610ad557fe5b6020020151828260060260090181518110610aec57fe5b602002602001018181525050878181518110610b0457fe5b6020026020010151600360048110610b1857fe5b60200201518282600602600a0181518110610b2f57fe5b602002602001018181525050878181518110610b4757fe5b6020026020010151600260048110610b5b57fe5b60200201518282600602600b0181518110610b7257fe5b60209081029190910101526001016109e4565b50610b8e612525565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610bcb906001890190600401612eb5565b60206040518083038186803b158015610be357600080fd5b505afa158015610bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1b919061289a565b90506020826020860260208601600885fa955085610c4457600080965096505050505050610c52565b505115159450600193505050505b935093915050565b600080610c8088610c6e85600001516106cd565b8051906020012089866020015161070c565b610c9c5760405162461bcd60e51b815260040161031390612d26565b610ca46124c1565b6000610cb68888888860000151611260565b9092509050600081600a811115610cc957fe5b14610cdb57600093509150610d029050565b610cf9610ce7836106cd565b805190602001208a8760200151610d7e565b93506000925050505b965096945050505050565b610d156124c1565b600084836020015114610d2d57508190506004610c52565b60405180608001604052808460000151815260200184602001518152602001610d638686604001516105fa90919063ffffffff16565b81526060850151602090910152915060009050935093915050565b600083815b8351811015610e2057600185821c16610dd95781848281518110610da357fe5b6020026020010151604051602001610dbc929190612b75565b604051602081830303815290604052805190602001209150610e18565b838181518110610de557fe5b602002602001015182604051602001610dff929190612b75565b6040516020818303038152906040528051906020012091505b600101610d83565b50949350505050565b610e316124e9565b6060610e3d8484611328565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020612f5083398151915285600080516020612f50833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020612f5083398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b610eec6124e9565b600080516020612f508339815191528210610f195760405162461bcd60e51b815260040161031390612da8565b816000610f25826115a3565b9150506000600080516020612f5083398151915280610f4057fe5b8384099050600080516020612f508339815191526004820890506000600080516020612f5083398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020612f508339815191528383099050610fa7816115cc565b9050600080516020612f508339815191528283099150600080516020612f508339815191528183099150600080516020612f508339815191528286099150600080516020612f5083398151915282600080516020612f50833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020612f508339815191528586099150600080516020612f508339815191528583099150600080516020612f508339815191526003830891506000611069836115a3565b909350905080156110ac578461108d5782600080516020612f508339815191520392505b5050604080518082019091529384526020840152509091506105119050565b600080516020612f5083398151915260018708600080516020612f50833981519152039550600080516020612f50833981519152806110e757fe5b8687099250600080516020612f508339815191528684099250600080516020612f5083398151915260038408925061111e836115a3565b9093509050801561115d578461108d57505060408051808201909152938452600080516020612f50833981519152036020840152509091506105119050565b600080516020612f508339815191528485099550600080516020612f508339815191528687099550600080516020612f508339815191528287099550600080516020612f508339815191528287099550600080516020612f50833981519152600187089550600080516020612f508339815191528687099250600080516020612f508339815191528684099250600080516020612f50833981519152600384089250611208836115a3565b90935090508061122a5760405162461bcd60e51b815260040161031390612e30565b846112435782600080516020612f508339815191520392505b505060408051808201909152938452602084015250909392505050565b6112686124c1565b60008461127a5750819050600161131f565b600061128686866105fa565b905080846040015110156112a157836002925092505061131f565b868460200151146112b957836003925092505061131f565b6112c16124c1565b604051806080016040528086600001518152602001866020015181526020016112f78488604001516115d790919063ffffffff16565b8152602001611314600188606001516105fa90919063ffffffff16565b905293506000925050505b94509492505050565b805160609081606482016001600160401b038111801561134757600080fd5b506040519080825280601f01601f191660200182016040528015611372576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b848110156113b8576020818801810151838301520161139e565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516113ee9190612b16565b602060405180830381855afa15801561140b573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061142e919061289a565b90506000604294508484528160208501526001604085015360418401889052602060618501536002846040516114649190612b16565b602060405180830381855afa158015611481573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114a4919061289a565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516114db9190612b16565b602060405180830381855afa1580156114f8573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061151b919061289a565b9050806040840152808218806020860152506003604085015360418401889052602060618501536002846040516115529190612b16565b602060405180830381855afa15801561156f573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611592919061289a565b606084015250909695505050505050565b6000806115af83611619565b915082600080516020612f50833981519152838409149050915091565b600061009482611d4e565b600061009183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612495565b6000600080516020612f508339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020612f508339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab600081848411156124b95760405162461bcd60e51b81526004016103139190612bb5565b505050900390565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f830112612553578081fd5b813561256661256182612ee4565b612ebe565b818152915060208083019084810160005b848110156125a05761258e888484358a0101612662565b84529282019290820190600101612577565b505050505092915050565b6000601f83818401126125bc578182fd5b82356125ca61256182612ee4565b81815292506020808401908581016080808502880183018910156125ed57600080fd5b60005b8581101561265557898784011261260657600080fd5b61260f82612ebe565b80848486018d81111561262157600080fd5b60005b600481101561264157823585529388019391880191600101612624565b5091885250958501959350506001016125f0565b5050505050505092915050565b600082601f830112612672578081fd5b813561268061256182612ee4565b8181529150602080830190848101818402860182018710156126a157600080fd5b60005b848110156125a0578135845292820192908201906001016126a4565b600082601f8301126126d0578081fd5b81356126de61256182612ee4565b818152915060208083019084810160808085028701830188101561270157600080fd5b60005b85811015612728576127168984612855565b85529383019391810191600101612704565b50505050505092915050565b600082601f830112612744578081fd5b81356001600160401b03811115612759578182fd5b61276c601f8201601f1916602001612ebe565b915080825283602082850101111561278357600080fd5b8060208401602084013760009082016020015292915050565b6000608082840312156127ad578081fd5b6127b76080612ebe565b905081356001600160401b03808211156127d057600080fd5b6127dc858386016126c0565b835260208401359150808211156127f257600080fd5b6127fe85838601612543565b6020840152604084013591508082111561281757600080fd5b612823858386016125ab565b6040840152606084013591508082111561283c57600080fd5b5061284984828501612543565b60608301525092915050565b600060808284031215612866578081fd5b6128706080612ebe565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b6000602082840312156128ab578081fd5b5051919050565b600080600080600060a086880312156128c9578081fd5b8535945060208601359350604086013592506001600160401b03606087013511156128f2578081fd5b6129028760608801358801612734565b91506001600160401b036080870135111561291b578081fd5b6080860135860187601f820112612930578182fd5b61293d6125618235612ee4565b81358152602080820191908301845b84358110156129cd578135850160a0818e03601f1901121561296c578687fd5b6129766040612ebe565b6129838e60208401612855565b81526001600160401b0360a0830135111561299c578788fd5b6129af8e602060a0850135850101612662565b6020828101919091529086529485019492909201915060010161294c565b50508093505050509295509295909350565b600080604083850312156129f1578182fd5b82356001600160401b0380821115612a07578384fd5b9084019060c08287031215612a1a578384fd5b612a2460a0612ebe565b86601f840112612a32578485fd5b6002612a4061256182612f03565b8085604087018b811115612a5257898afd5b895b85811015612a72578235855260209485019490920191600101612a54565b50918552503560208401525050606083810135604083015260808401359082015260a083013582811115612aa4578586fd5b612ab088828601612734565b60808301525093506020850135915080821115612acb578283fd5b50612ad88582860161279c565b9150509250929050565b60008183825b6004811015612b07578151835260209283019290910190600101612ae8565b50505060808201905092915050565b60008251612b28818460208701612f1f565b9190910192915050565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b918252602082015260400190565b82815260408101600b8310612b9457fe5b8260208301529392505050565b60208101600b8310612baf57fe5b91905290565b6000602082528251806020840152612bd4816040850160208701612f1f565b601f01601f19169190910160400192915050565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526025908201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604082015264786973747360d81b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b90815260200190565b6040518181016001600160401b0381118282101715612edc57600080fd5b604052919050565b60006001600160401b03821115612ef9578081fd5b5060209081020190565b60006001600160401b03821115612f18578081fd5b5060200290565b60005b83811015612f3a578181015183820152602001612f22565b83811115612f49576000848401525b5050505056fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a"

// DeployTransfer deploys a new Ethereum contract, binding an instance of Transfer to it.
func DeployTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Transfer, error) {
	parsed, err := abi.JSON(strings.NewReader(TransferABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// Transfer is an auto generated Go binding around an Ethereum contract.
type Transfer struct {
	TransferCaller     // Read-only binding to the contract
	TransferTransactor // Write-only binding to the contract
	TransferFilterer   // Log filterer for contract events
}

// TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransferSession struct {
	Contract     *Transfer         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransferCallerSession struct {
	Contract *TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransferTransactorSession struct {
	Contract     *TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransferRaw struct {
	Contract *Transfer // Generic contract binding to access the raw methods on
}

// TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransferCallerRaw struct {
	Contract *TransferCaller // Generic read-only contract binding to access the raw methods on
}

// TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransferTransactorRaw struct {
	Contract *TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransfer creates a new instance of Transfer, bound to a specific deployed contract.
func NewTransfer(address common.Address, backend bind.ContractBackend) (*Transfer, error) {
	contract, err := bindTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// NewTransferCaller creates a new read-only instance of Transfer, bound to a specific deployed contract.
func NewTransferCaller(address common.Address, caller bind.ContractCaller) (*TransferCaller, error) {
	contract, err := bindTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransferCaller{contract: contract}, nil
}

// NewTransferTransactor creates a new write-only instance of Transfer, bound to a specific deployed contract.
func NewTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*TransferTransactor, error) {
	contract, err := bindTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransferTransactor{contract: contract}, nil
}

// NewTransferFilterer creates a new log filterer instance of Transfer, bound to a specific deployed contract.
func NewTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*TransferFilterer, error) {
	contract, err := bindTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransferFilterer{contract: contract}, nil
}

// bindTransfer binds a generic wrapper to an already deployed contract.
func bindTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCaller) ProcessTransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "processTransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCallerSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
