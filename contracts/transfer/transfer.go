// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package transfer

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TypesAuthCommon is an auto generated low-level Go binding around an user-defined struct.
type TypesAuthCommon struct {
	Signature   [2]*big.Int
	StateRoot   [32]byte
	AccountRoot [32]byte
	Domain      [32]byte
	Txs         []byte
}

// TypesSignatureProof is an auto generated low-level Go binding around an user-defined struct.
type TypesSignatureProof struct {
	States          []TypesUserState
	StateWitnesses  [][][32]byte
	Pubkeys         [][4]*big.Int
	PubkeyWitnesses [][][32]byte
}

// TypesStateMerkleProof is an auto generated low-level Go binding around an user-defined struct.
type TypesStateMerkleProof struct {
	State   TypesUserState
	Witness [][32]byte
}

// TypesUserState is an auto generated low-level Go binding around an user-defined struct.
type TypesUserState struct {
	PubkeyID *big.Int
	TokenID  *big.Int
	Balance  *big.Int
	Nonce    *big.Int
}

// TransferMetaData contains all meta data concerning the Transfer contract.
var TransferMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"signature\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"}],\"internalType\":\"structTypes.AuthCommon\",\"name\":\"common\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState[]\",\"name\":\"states\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"stateWitnesses\",\"type\":\"bytes32[][]\"},{\"internalType\":\"uint256[4][]\",\"name\":\"pubkeys\",\"type\":\"uint256[4][]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"pubkeyWitnesses\",\"type\":\"bytes32[][]\"}],\"internalType\":\"structTypes.SignatureProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"enumTypes.Result\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxTxSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeReceiver\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txs\",\"type\":\"bytes\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pubkeyID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"structTypes.UserState\",\"name\":\"state\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"witness\",\"type\":\"bytes32[]\"}],\"internalType\":\"structTypes.StateMerkleProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"}],\"name\":\"processTransferCommit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"enumTypes.Result\",\"name\":\"result\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50612f9b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806344ec5a771461003b5780639293149214610064575b600080fd5b61004e6100493660046129f1565b610085565b60405161005b9190612bcf565b60405180910390f35b610077610072366004612924565b61009a565b60405161005b929190612bb3565b600061009183836101cf565b90505b92915050565b6000806100a684610500565b156100b6575085905060086101c5565b60006100c185610518565b9050868111156100d85787600992509250506101c5565b600080856000815181106100e857fe5b6020026020010151600001516020015190506101026124d6565b60005b8481101561019457610117898261052c565b91506101558c83858b856002028151811061012e57fe5b60200260200101518c866002026001018151811061014857fe5b602002602001015161059f565b909c509550600086600b81111561016857fe5b1461017a578b965050505050506101c5565b606082015161018a9085906105fc565b9350600101610105565b506101b88b8a84868b89600202815181106101ab57fe5b6020026020010151610621565b909b508b96509450505050505b9550959350505050565b6000806101df8460800151610518565b905060608167ffffffffffffffff811180156101fa57600080fd5b5060405190808252806020026020018201604052801561023457816020015b6102216124fe565b8152602001906001900390816102195790505b50905060608267ffffffffffffffff8111801561025057600080fd5b5060405190808252806020026020018201604052801561027a578160200160208202803683370190505b50905060005b838110156104b157600019818503016102976124d6565b60808901516102a6908361052c565b90506102f989602001516102d08a6000015185815181106102c357fe5b60200260200101516106cf565b8051906020012083600001518b6020015186815181106102ec57fe5b6020026020010151610765565b61031e5760405162461bcd60e51b815260040161031590612c29565b60405180910390fd5b60008860000151838151811061033057fe5b602002602001015160600151116103595760405162461bcd60e51b815260040161031590612d30565b6103cb89604001518960400151848151811061037157fe5b60200260200101516040516020016103899190612af5565b604051602081830303815290604052805190602001208a6000015185815181106103af57fe5b6020026020010151600001518b6060015186815181106102ec57fe5b6103e75760405162461bcd60e51b815260040161031590612e2c565b60006001896000015184815181106103fb57fe5b6020026020010151606001510390506000826000015166038d7ea4c6800001905060005b85811015610452578187828151811061043457fe5b6020026020010151141561044a57600019909201915b60010161041f565b508086868151811061046057fe5b6020026020010181815250506060610478848461077d565b90506104888c60600151826107c2565b88868151811061049457fe5b602002602001018190525050505050508080600101915050610280565b506000806104c88860000151886040015186610881565b92509050816104df57600a95505050505050610094565b806104f257600595505050505050610094565b506000979650505050505050565b6000600c82518161050d57fe5b06151590505b919050565b6000600c82518161052557fe5b0492915050565b6105346124d6565b506004600c8281028401918201516008830151600a80850151948401516040805160808101825263ffffffff9586168152939094166020840152600f86861c8116830a610fff97881602948401949094529384901c90921690910a9190921602606082015292915050565b6000806105bc8787600001518789604001518a6060015189610cb4565b9092509050600081600b8111156105cf57fe5b146105d9576101c5565b6105ee82876020015187896040015187610621565b909890975095505050505050565b6000828201838110156100915760405162461bcd60e51b815260040161031590612c6d565b6000806106478761063585600001516106cf565b80519060200120888660200151610765565b6106635760405162461bcd60e51b815260040161031590612eb3565b61066b6124d6565b600061067c87878760000151610d67565b9092509050600081600b81111561068f57fe5b146106a1576000935091506101c59050565b6106bf6106ad836106cf565b80519060200120898760200151610dd8565b9960009950975050505050505050565b80516060901580156106e357506020820151155b80156106f157506040820151155b80156106ff57506060820151155b1561072c5760006040516020016107169190612be4565b6040516020818303038152906040529050610513565b81516020808401516040808601516060870151915161074f959491929101612b62565b6040516020818303038152906040529050919050565b600084610773858585610dd8565b1495945050505050565b606060018360000151846020015184866040015187606001516040516020016107ab96959493929190612b7d565b604051602081830303815290604052905092915050565b6107ca6124fe565b6107d26124fe565b6107dc8484610e83565b90506107e66124fe565b6107f78260005b6020020151610f3e565b90506108016124fe565b61080c8360016107ed565b905061081661251c565b825181526020808401518282015282516040808401919091529083015160608301526000908460808460066107d05a03fa905080801561085557610857565bfe5b50806108755760405162461bcd60e51b815260040161031590612bf2565b50919695505050505050565b81516000908190806108a55760405162461bcd60e51b815260040161031590612da8565b835181146108c55760405162461bcd60e51b815260040161031590612cdb565b6006600182010260608167ffffffffffffffff811180156108e557600080fd5b5060405190808252806020026020018201604052801561090f578160200160208202803683370190505b50905087600060200201518160008151811061092757fe5b602090810291909101015287600160200201518160018151811061094757fe5b6020026020010181815250507f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28160028151811061098157fe5b6020026020010181815250507f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed816003815181106109bb57fe5b6020026020010181815250507f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec816004815181106109f557fe5b6020026020010181815250507f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d81600581518110610a2f57fe5b60200260200101818152505060005b83811015610bdf57868181518110610a5257fe5b6020026020010151600060028110610a6657fe5b6020020151828260060260060181518110610a7d57fe5b602002602001018181525050868181518110610a9557fe5b6020026020010151600160028110610aa957fe5b6020020151828260060260070181518110610ac057fe5b602002602001018181525050878181518110610ad857fe5b6020026020010151600160048110610aec57fe5b6020020151828260060260080181518110610b0357fe5b602002602001018181525050878181518110610b1b57fe5b6020026020010151600060048110610b2f57fe5b6020020151828260060260090181518110610b4657fe5b602002602001018181525050878181518110610b5e57fe5b6020026020010151600360048110610b7257fe5b60200201518282600602600a0181518110610b8957fe5b602002602001018181525050878181518110610ba157fe5b6020026020010151600260048110610bb557fe5b60200201518282600602600b0181518110610bcc57fe5b6020908102919091010152600101610a3e565b50610be861253a565b60405163273cfc6560e11b815260009073079d8077c465bd0bf0fc502ad2b846757e41566190634e79f8ca90610c25906001890190600401612ef6565b60206040518083038186803b158015610c3d57600080fd5b505afa158015610c51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c75919061290c565b90506020826020860260208601600885fa955085610c9e57600080965096505050505050610cac565b505115159450600193505050505b935093915050565b600080610cda88610cc885600001516106cf565b80519060200120898660200151610765565b610cf65760405162461bcd60e51b815260040161031590612d67565b610cfe6124d6565b6000610d1088888888600001516112ba565b9092509050600081600b811115610d2357fe5b14610d3557600093509150610d5c9050565b610d53610d41836106cf565b805190602001208a8760200151610dd8565b93506000925050505b965096945050505050565b610d6f6124d6565b600084836020015114610d8757508190506004610cac565b60405180608001604052808460000151815260200184602001518152602001610dbd8686604001516105fc90919063ffffffff16565b81526060850151602090910152915060009050935093915050565b600083815b8351811015610e7a57600185821c16610e335781848281518110610dfd57fe5b6020026020010151604051602001610e16929190612ba5565b604051602081830303815290604052805190602001209150610e72565b838181518110610e3f57fe5b602002602001015182604051602001610e59929190612ba5565b6040516020818303038152906040528051906020012091505b600101610ddd565b50949350505050565b610e8b6124fe565b6060610e978484611382565b9050600080600080601885016001600160c01b0381511693506030860190506001600160c01b038151169450600080516020612f6f83398151915285600080516020612f6f833981519152600160c01b870908604887015160608801516001600160c01b0390811697501694509250600080516020612f6f83398151915290508481600160c01b860908604080518082019091529283526020830152509695505050505050565b610f466124fe565b600080516020612f6f8339815191528210610f735760405162461bcd60e51b815260040161031590612de9565b816000610f7f826115fe565b9150506000600080516020612f6f83398151915280610f9a57fe5b8384099050600080516020612f6f8339815191526004820890506000600080516020612f6f83398151915277b3c4d79d41a91759a9e4c7e359b6b89eaec68e62effffffd850990506000600080516020612f6f833981519152838309905061100181611627565b9050600080516020612f6f8339815191528283099150600080516020612f6f8339815191528183099150600080516020612f6f8339815191528286099150600080516020612f6f83398151915282600080516020612f6f833981519152037759e26bcea0d48bacd4f263f1acdb5c4f5763473177fffffe089450600080516020612f6f8339815191528586099150600080516020612f6f8339815191528583099150600080516020612f6f83398151915260038308915060006110c3836115fe565b9093509050801561110657846110e75782600080516020612f6f8339815191520392505b5050604080518082019091529384526020840152509091506105139050565b600080516020612f6f83398151915260018708600080516020612f6f833981519152039550600080516020612f6f8339815191528061114157fe5b8687099250600080516020612f6f8339815191528684099250600080516020612f6f833981519152600384089250611178836115fe565b909350905080156111b757846110e757505060408051808201909152938452600080516020612f6f833981519152036020840152509091506105139050565b600080516020612f6f8339815191528485099550600080516020612f6f8339815191528687099550600080516020612f6f8339815191528287099550600080516020612f6f8339815191528287099550600080516020612f6f833981519152600187089550600080516020612f6f8339815191528687099250600080516020612f6f8339815191528684099250600080516020612f6f833981519152600384089250611262836115fe565b9093509050806112845760405162461bcd60e51b815260040161031590612e71565b8461129d5782600080516020612f6f8339815191520392505b505060408051808201909152938452602084015250909392505050565b6112c26124d6565b6000846112d457508190506001611379565b60006112e086866105fc565b905080846040015110156112fb578360029250925050611379565b86846020015114611313578360039250925050611379565b61131b6124d6565b6040518060800160405280866000015181526020018660200151815260200161135184886040015161163290919063ffffffff16565b815260200161136e600188606001516105fc90919063ffffffff16565b905293506000925050505b94509492505050565b8051606090816064820167ffffffffffffffff811180156113a257600080fd5b506040519080825280601f01601f1916602001820160405280156113cd576020820181803683370190505b506040805160608082526080820190925291925090816020820181803683370190505090506060820160005b8481101561141357602081880181015183830152016113f9565b50830160008153600101606081536001016000815360018101879052602101602081535060006002836040516114499190612b29565b602060405180830381855afa158015611466573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611489919061290c565b90506000604294508484528160208501526001604085015360418401889052602060618501536002846040516114bf9190612b29565b602060405180830381855afa1580156114dc573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906114ff919061290c565b9050806020840152808218806020860152506002604085015360418401889052602060618501536002846040516115369190612b29565b602060405180830381855afa158015611553573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611576919061290c565b9050806040840152808218806020860152506003604085015360418401889052602060618501536002846040516115ad9190612b29565b602060405180830381855afa1580156115ca573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906115ed919061290c565b606084015250909695505050505050565b60008061160a8361165a565b915082600080516020612f6f833981519152838409149050915091565b600061009482611d8f565b6000828211156116545760405162461bcd60e51b815260040161031590612ca4565b50900390565b6000600080516020612f6f8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6000600080516020612f6f8339815191528083840991508083830981838209828283098385830984848309858484098684850997508684840987858409945087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087878a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a09985087898a09985087898a09985087898a09985087838a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087828a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087848a09985087898a09985087898a09985087898a09985087898a09985087898a09985087868a09985087898a09985087898a099850878a8a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087898a09985087818ab6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180604001604052806002906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b600082601f830112612568578081fd5b813561257b61257682612f26565b612eff565b818152915060208083019084810160005b848110156125b5576125a3888484358a0101612677565b8452928201929082019060010161258c565b505050505092915050565b6000601f83818401126125d1578182fd5b82356125df61257682612f26565b818152925060208084019085810160808085028801830189101561260257600080fd5b60005b8581101561266a57898784011261261b57600080fd5b61262482612eff565b80848486018d81111561263657600080fd5b60005b600481101561265657823585529388019391880191600101612639565b509188525095850195935050600101612605565b5050505050505092915050565b600082601f830112612687578081fd5b813561269561257682612f26565b8181529150602080830190848101818402860182018710156126b657600080fd5b60005b848110156125b5578135845292820192908201906001016126b9565b600082601f8301126126e5578081fd5b81356126f361257682612f26565b818152915060208083019084810160808085028701830188101561271657600080fd5b60005b8581101561273d5761272b89846128c7565b85529383019391810191600101612719565b50505050505092915050565b600082601f830112612759578081fd5b813567ffffffffffffffff81111561276f578182fd5b612782601f8201601f1916602001612eff565b915080825283602082850101111561279957600080fd5b8060208401602084013760009082016020015292915050565b6000608082840312156127c3578081fd5b6127cd6080612eff565b9050813567ffffffffffffffff808211156127e757600080fd5b6127f3858386016126d5565b8352602084013591508082111561280957600080fd5b61281585838601612558565b6020840152604084013591508082111561282e57600080fd5b61283a858386016125c0565b6040840152606084013591508082111561285357600080fd5b5061286084828501612558565b60608301525092915050565b600060a0828403121561287d578081fd5b6128876040612eff565b905061289383836128c7565b8152608082013567ffffffffffffffff8111156128af57600080fd5b6128bb84828501612677565b60208301525092915050565b6000608082840312156128d8578081fd5b6128e26080612eff565b90508135815260208201356020820152604082013560408201526060820135606082015292915050565b60006020828403121561291d578081fd5b5051919050565b600080600080600060a0868803121561293b578081fd5b85359450602080870135945060408701359350606087013567ffffffffffffffff80821115612968578384fd5b6129748a838b01612749565b94506080890135915080821115612989578384fd5b508701601f8101891361299a578283fd5b80356129a861257682612f26565b81815283810190838501865b848110156129dd576129cb8e88843589010161286c565b845292860192908601906001016129b4565b505080955050505050509295509295909350565b60008060408385031215612a03578182fd5b823567ffffffffffffffff80821115612a1a578384fd5b9084019060c08287031215612a2d578384fd5b612a3760a0612eff565b86601f840112612a45578485fd5b6002612a5361257682612f46565b8085604087018b811115612a6557898afd5b895b85811015612a85578235855260209485019490920191600101612a67565b50918552503560208401525050606083810135604083015260808401359082015260a083013582811115612ab7578586fd5b612ac388828601612749565b60808301525093506020850135915080821115612ade578283fd5b50612aeb858286016127b2565b9150509250929050565b60008183825b6004811015612b1a578151835260209283019290910190600101612afb565b50505060808201905092915050565b60008251815b81811015612b495760208186018101518583015201612b2f565b81811115612b575782828501525b509190910192915050565b93845260208401929092526040830152606082015260800190565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b918252602082015260400190565b82815260408101612bc383612f63565b60208301529392505050565b60208101612bdc83612f63565b825292915050565b60ff91909116815260200190565b60208082526017908201527f424c533a20626e206164642063616c6c206661696c6564000000000000000000604082015260600190565b60208082526024908201527f41757468656e7469636974793a20737461746520696e636c7573696f6e20736960408201526333b732b960e11b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b60208082526035908201527f424c533a206e756d626572206f66207075626c6963206b65797320616e64206d604082015274195cdcd859d95cc81b5d5cdd08189948195c5d585b605a1b606082015260800190565b60208082526018908201527f41757468656e7469636974793a207a65726f206e6f6e63650000000000000000604082015260600190565b60208082526021908201527f5472616e736974696f6e3a2053656e64657220646f6573206e6f7420657869736040820152601d60fa1b606082015260800190565b60208082526021908201527f424c533a206e756d626572206f66207075626c6963206b6579206973207a65726040820152606f60f81b606082015260800190565b60208082526023908201527f6d6170546f506f696e7446543a20696e76616c6964206669656c6420656c656d604082015262195b9d60ea1b606082015260800190565b60208082526025908201527f41757468656e7469636974793a206163636f756e7420646f6573206e6f742065604082015264786973747360d81b606082015260800190565b60208082526022908201527f424c533a20626164206674206d617070696e6720696d706c656d656e7461746960408201526137b760f11b606082015260800190565b60208082526023908201527f5472616e736974696f6e3a20726563656976657220646f6573206e6f742065786040820152621a5cdd60ea1b606082015260800190565b90815260200190565b60405181810167ffffffffffffffff81118282101715612f1e57600080fd5b604052919050565b600067ffffffffffffffff821115612f3c578081fd5b5060209081020190565b600067ffffffffffffffff821115612f5c578081fd5b5060200290565b80600c811061051357fefe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a164736f6c634300060c000a",
}

// TransferABI is the input ABI used to generate the binding from.
// Deprecated: Use TransferMetaData.ABI instead.
var TransferABI = TransferMetaData.ABI

// TransferBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TransferMetaData.Bin instead.
var TransferBin = TransferMetaData.Bin

// DeployTransfer deploys a new Ethereum contract, binding an instance of Transfer to it.
func DeployTransfer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Transfer, error) {
	parsed, err := TransferMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TransferBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// Transfer is an auto generated Go binding around an Ethereum contract.
type Transfer struct {
	TransferCaller     // Read-only binding to the contract
	TransferTransactor // Write-only binding to the contract
	TransferFilterer   // Log filterer for contract events
}

// TransferCaller is an auto generated read-only Go binding around an Ethereum contract.
type TransferCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TransferTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TransferFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TransferSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TransferSession struct {
	Contract     *Transfer         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TransferCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TransferCallerSession struct {
	Contract *TransferCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TransferTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TransferTransactorSession struct {
	Contract     *TransferTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TransferRaw is an auto generated low-level Go binding around an Ethereum contract.
type TransferRaw struct {
	Contract *Transfer // Generic contract binding to access the raw methods on
}

// TransferCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TransferCallerRaw struct {
	Contract *TransferCaller // Generic read-only contract binding to access the raw methods on
}

// TransferTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TransferTransactorRaw struct {
	Contract *TransferTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTransfer creates a new instance of Transfer, bound to a specific deployed contract.
func NewTransfer(address common.Address, backend bind.ContractBackend) (*Transfer, error) {
	contract, err := bindTransfer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Transfer{TransferCaller: TransferCaller{contract: contract}, TransferTransactor: TransferTransactor{contract: contract}, TransferFilterer: TransferFilterer{contract: contract}}, nil
}

// NewTransferCaller creates a new read-only instance of Transfer, bound to a specific deployed contract.
func NewTransferCaller(address common.Address, caller bind.ContractCaller) (*TransferCaller, error) {
	contract, err := bindTransfer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TransferCaller{contract: contract}, nil
}

// NewTransferTransactor creates a new write-only instance of Transfer, bound to a specific deployed contract.
func NewTransferTransactor(address common.Address, transactor bind.ContractTransactor) (*TransferTransactor, error) {
	contract, err := bindTransfer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TransferTransactor{contract: contract}, nil
}

// NewTransferFilterer creates a new log filterer instance of Transfer, bound to a specific deployed contract.
func NewTransferFilterer(address common.Address, filterer bind.ContractFilterer) (*TransferFilterer, error) {
	contract, err := bindTransfer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TransferFilterer{contract: contract}, nil
}

// bindTransfer binds a generic wrapper to an already deployed contract.
func bindTransfer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TransferABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.TransferCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.TransferTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Transfer *TransferCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Transfer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Transfer *TransferTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Transfer *TransferTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Transfer.Contract.contract.Transact(opts, method, params...)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCaller) CheckSignature(opts *bind.CallOpts, common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "checkSignature", common, proof)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// CheckSignature is a free data retrieval call binding the contract method 0x44ec5a77.
//
// Solidity: function checkSignature((uint256[2],bytes32,bytes32,bytes32,bytes) common, ((uint256,uint256,uint256,uint256)[],bytes32[][],uint256[4][],bytes32[][]) proof) view returns(uint8)
func (_Transfer *TransferCallerSession) CheckSignature(common TypesAuthCommon, proof TypesSignatureProof) (uint8, error) {
	return _Transfer.Contract.CheckSignature(&_Transfer.CallOpts, common, proof)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCaller) ProcessTransferCommit(opts *bind.CallOpts, stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	var out []interface{}
	err := _Transfer.contract.Call(opts, &out, "processTransferCommit", stateRoot, maxTxSize, feeReceiver, txs, proofs)

	if err != nil {
		return *new([32]byte), *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return out0, out1, err

}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}

// ProcessTransferCommit is a free data retrieval call binding the contract method 0x92931492.
//
// Solidity: function processTransferCommit(bytes32 stateRoot, uint256 maxTxSize, uint256 feeReceiver, bytes txs, ((uint256,uint256,uint256,uint256),bytes32[])[] proofs) pure returns(bytes32, uint8 result)
func (_Transfer *TransferCallerSession) ProcessTransferCommit(stateRoot [32]byte, maxTxSize *big.Int, feeReceiver *big.Int, txs []byte, proofs []TypesStateMerkleProof) ([32]byte, uint8, error) {
	return _Transfer.Contract.ProcessTransferCommit(&_Transfer.CallOpts, stateRoot, maxTxSize, feeReceiver, txs, proofs)
}
