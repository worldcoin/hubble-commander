name: Build, Test & Deploy

on:
  push

env:
  IMAGE_ID: ghcr.io/${{ github.repository }}:${{ github.sha }}

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.48.0
          args: --timeout 5m --build-tags hardhat,e2e
          skip-build-cache: true
          skip-pkg-cache: true
  test-on-hardhat:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Install Go dependencies
        run: make install
      - name: Install JavaScript dependancies
        run: npm ci
        working-directory: hubble-contracts
      - name: Compile contracts and generate ts types
        run: npm run generate
        working-directory: hubble-contracts
      - name: Run node in the background
        run: npm run hardhat:node &
        working-directory: hubble-contracts
      - name: Deploy gas estimator contracts
        run: npm run keyless:deploy
        working-directory: hubble-contracts
      - name: Test
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic -tags hardhat ./bls/hardhat
      - name: Submit to codecov.io
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos
          files: ./coverage.out
          flags: ${{ github.job }}
          fail_ci_if_error: true
          verbose: true
  generate:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Install Go dependencies
        run: make install
      - name: Install abigen
        run: |
          sudo add-apt-repository -y ppa:ethereum/ethereum
          sudo apt-get update
          sudo apt-get install ethereum
      - name: Move existing files
        run: |
          find contracts -type f ! -name '*.go' -exec rm {} \;
          find contracts -type f -name 'events.go' -exec rm {} \;
          mv contracts tmp-contracts
      - name: Generate bindings
        run: make generate
      - name: Check diff
        run: diff -r contracts tmp-contracts
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Go dependencies
        run: make install
      - name: Build
        run: make build
  e2e-tests:
    runs-on: ubuntu-20.04
    env:
      HUBBLE_ETHEREUM_RPC_URL: ws://localhost:8546
      HUBBLE_ETHEREUM_CHAIN_ID: 1337
      HUBBLE_ETHEREUM_PRIVATE_KEY: ee79b5f6e221356af78cf4c36f4f7885a11b67dfcc81c34d80249947330c0f82
      HUBBLE_API_AUTHENTICATION_KEY: secret_authentication_key
      HUBBLE_BOOTSTRAP_GENESIS_PATH: ${{ github.workspace }}/genesis.yaml
      HUBBLE_E2E_ACCOUNTS_PATH: ${{ github.workspace }}/e2e/setup/accounts.yaml
    steps:
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Restore cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Run E2E tests
        run: |
          make setup-geth
          go test -v -race -coverprofile=coverage.out -covermode=atomic -tags e2e ./e2e
      - name: Cleanup
        # Cleanup this folder because it confuses codecov
        run: sudo rm -rf e2e/geth-data/geth
      - name: Submit to codecov.io
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Optional for public repos
          files: ./coverage.out
          flags: ${{ github.job }}
          fail_ci_if_error: true
          verbose: true
  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push docker image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ env.IMAGE_ID }}
          context: .
  deploy-stage-hubble-instances:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    if: github.ref == 'refs/heads/master'
    environment: stage
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_STAGE_REGION }}
          role-to-assume: ${{ secrets.AWS_STAGE_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_STAGE_REGION }}
          --name ${{ secrets.AWS_STAGE_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy/hubble
          --install --atomic --timeout 60s
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
          --set ingress.host=hubble.stage-crypto.worldcoin.dev
          --set environment=stage
          --set persistentStorage.volumeID=aws://us-east-1a/vol-065fd87c2124454e6
  deploy-stage-hubble-instances-manual:
    runs-on: ubuntu-latest
    needs: [ build-and-push ]
    environment: stage-manual
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_STAGE_REGION }}
          role-to-assume: ${{ secrets.AWS_STAGE_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_STAGE_REGION }}
          --name ${{ secrets.AWS_STAGE_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy/hubble
          --install
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
          --set ingress.host=hubble.stage-crypto.worldcoin.dev
          --set environment=stage
          --set persistentStorage.volumeID=aws://us-east-1a/vol-065fd87c2124454e6
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [ build-and-push, e2e-tests ]
    if: github.ref == 'refs/heads/master'
    environment: prod
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_PROD_REGION }}
          role-to-assume: ${{ secrets.AWS_PROD_ROLE }}
          role-duration-seconds: 900
      - name: Connect to EKS cluster
        run: aws eks update-kubeconfig
          --region ${{ secrets.AWS_PROD_REGION }}
          --name ${{ secrets.AWS_PROD_CLUSTER }}
      - name: Helm install
        run: helm upgrade "${{ github.event.repository.name }}" ./deploy/hubble
          --install
          --namespace "${{ github.event.repository.name }}"
          --set image.tag="${{ github.sha }}"
